{
  "timeStamp": "1655396062322",
  "fullStack": "PID 3874 - process\nTID 3874:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cac1 pthread_cond_wait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223ddeb5c std::condition_variable::wait(std::unique_lock<std::mutex>&)\n#3  0x0000560223c337a7 mongo::waitForShutdown()\n#4  0x00005602212c14e1 mongo::(anonymous namespace)::_initAndListen(mongo::ServiceContext*, int) [clone .isra.1896]\n#5  0x00005602212c2eff mongo::mongod_main(int, char**)\n#6  0x000056022115daae main\n#7  0x00007f97dba22d90 __libc_start_call_main\n    ../sysdeps/nptl/libc_start_call_main.h:58:16\n#8  0x00007f97dba22e40 __libc_start_main@@GLIBC_2.34\n    ../csu/libc-start.c:392:3\n#9  0x00005602212bd3fe _start\nTID 3876:\n#0  0x00007f97dba3c21a __sigtimedwait\n    ../sysdeps/unix/sysv/linux/sigtimedwait.c:61:28\n#1  0x0000560221f94230 mongo::(anonymous namespace)::signalProcessingThread(mongo::LogFileStatus)\n#2  0x0000560221f94ce5 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (*)(mongo::LogFileStatus), mongo::LogFileStatus&, 0>(void (*)(mongo::LogFileStatus), mongo::LogFileStatus&)::{lambda()#1}> > >::_M_run()\n#3  0x0000560223de245f execute_native_thread_routine\n#4  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#5  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3877:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560223a95df7 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundThreadClockSource::_startTimerThread()::{lambda()#1}, , 0>(mongo::BackgroundThreadClockSource::_startTimerThread()::{lambda()#1})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3878:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cac1 pthread_cond_wait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223ddeb5c std::condition_variable::wait(std::unique_lock<std::mutex>&)\n#3  0x00005602239fb766 mongo::ThreadPool::Impl::_consumeTasks()\n#4  0x00005602239fbea1 mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n#5  0x00005602239fc3b0 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()\n#6  0x0000560223de245f execute_native_thread_routine\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3879:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3880:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3881:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x00005602213d803b __tiered_server\n#4  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#5  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3886:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x00005602213cff10 __log_file_server\n#4  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#5  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3887:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x000056022144f353 __wt_cond_auto_wait\n#5  0x00005602213d1883 __log_wrlsn_server\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3888:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x00005602213d0572 __log_server\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3889:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x000056022144f353 __wt_cond_auto_wait\n#5  0x00005602213fc30d __wt_evict_thread_run\n#6  0x0000560221460a49 __thread_run\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3890:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x000056022144f353 __wt_cond_auto_wait\n#5  0x00005602213fc30d __wt_evict_thread_run\n#6  0x0000560221460a49 __thread_run\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3891:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x000056022144f353 __wt_cond_auto_wait\n#5  0x00005602213fc30d __wt_evict_thread_run\n#6  0x0000560221460a49 __thread_run\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3892:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x000056022144f2d5 __wt_cond_auto_wait_signal\n#4  0x000056022144f353 __wt_cond_auto_wait\n#5  0x00005602213fc30d __wt_evict_thread_run\n#6  0x0000560221460a49 __thread_run\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3893:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022142072a __wt_cond_wait_signal\n#3  0x00005602213d5ce2 __sweep_server\n#4  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#5  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3894:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022138477b mongo::WiredTigerKVEngine::WiredTigerSessionSweeper::run()\n#3  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#4  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3895:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3896:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x00005602222c5dcf mongo::JournalFlusher::run()\n#3  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#4  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3897:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560222281b6a mongo::Checkpointer::run()\n#3  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#4  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3898:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560222bb23fc mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::deadlineMonitorThread()\n#3  0x0000560222baea91 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::*)(), mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>*, 0>(void (mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::*)(), mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>*&&)::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3902:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x00005602217b5a54 mongo::FTDCController::doLoop()\n#3  0x00005602217b617c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3903:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cac1 pthread_cond_wait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x00005602238e4d2b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)\n#3  0x00005602238e5195 asio::detail::scheduler::run(std::error_code&)\n#4  0x00005602238ecd1e asio::io_context::run()\n#5  0x00005602234009b0 mongo::transport::TransportLayerASIO::ASIOReactor::run()\n#6  0x00005602233cda77 mongo::executor::NetworkInterfaceTL::_run()\n#7  0x00005602233cdd66 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()\n#8  0x0000560223de245f execute_native_thread_routine\n#9  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#10 0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3904:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cac1 pthread_cond_wait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223ddeb5c std::condition_variable::wait(std::unique_lock<std::mutex>&)\n#3  0x00005602239fb766 mongo::ThreadPool::Impl::_consumeTasks()\n#4  0x00005602239fbea1 mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n#5  0x00005602239fc3b0 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()\n#6  0x0000560223de245f execute_native_thread_routine\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3905:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x000056022178ee7a mongo::FreeMonMessageQueue::dequeue(mongo::ClockSource*)\n#3  0x000056022178b7be mongo::FreeMonProcessor::run()\n#4  0x00005602217966c3 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FreeMonController::start(mongo::RegistrationType, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, mongo::Duration<std::ratio<1l, 1l> >)::{lambda()#1}, , 0>(mongo::FreeMonController::start(mongo::RegistrationType, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, mongo::Duration<std::ratio<1l, 1l> >)::{lambda()#1})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3906:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x00005602216be8aa mongo::TTLMonitor::run()\n#3  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#4  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3907:\n#0  0x00007f97dbade868 clock_nanosleep@GLIBC_2.2.5\n    ../sysdeps/unix/sysv/linux/clock_nanosleep.c:78:7\n#1  0x00007f97dbae36e7 __nanosleep\n    ../sysdeps/unix/sysv/linux/nanosleep.c:25:13\n#2  0x0000560223c54287 mongo::sleepsecs(int)\n#3  0x0000560222327fc6 mongo::(anonymous namespace)::ClientCursorMonitor::run()\n#4  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#5  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#6  0x0000560223de245f execute_native_thread_routine\n#7  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#8  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3908:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x00005602239f47fa mongo::(anonymous namespace)::PeriodicTaskRunner::run()\n#3  0x00005602239f3e96 mongo::BackgroundJob::jobBody()\n#4  0x00005602239f436c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#5  0x0000560223de245f execute_native_thread_routine\n#6  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#7  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3909:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cac1 pthread_cond_wait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223ddeb5c std::condition_variable::wait(std::unique_lock<std::mutex>&)\n#3  0x00005602226943b3 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::SessionKiller::SessionKiller(mongo::ServiceContext*, std::function<mongo::StatusWith<std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> > > (mongo::OperationContext*, mongo::SessionKiller::Matcher const&, std::linear_congruential_engine<unsigned long, 48271ul, 0ul, 2147483647ul>*)>)::{lambda()#1}, , 0>(mongo::SessionKiller::SessionKiller(mongo::ServiceContext*, std::function<mongo::StatusWith<std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> > > (mongo::OperationContext*, mongo::SessionKiller::Matcher const&, std::linear_congruential_engine<unsigned long, 48271ul, 0ul, 2147483647ul>*)>)::{lambda()#1})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3910:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3911:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3912:\n#0  0x00007f97dba8a197 __GI___futex_abstimed_wait_cancelable64\n    ./nptl/futex-internal.c:57:12\n#1  0x00007f97dba8cf1b pthread_cond_timedwait@@GLIBC_2.3.2\n    ./nptl/pthread_cond_wait.c:503:10\n#2  0x0000560223a96a17 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)\n#3  0x0000560221b339d2 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()\n#4  0x0000560223de245f execute_native_thread_routine\n#5  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#6  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3913:\n#0  0x00007f97dbb1efde epoll_wait\n    ../sysdeps/unix/sysv/linux/epoll_wait.c:30:10\n#1  0x00005602238e222e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)\n#2  0x00005602238e4c0d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)\n#3  0x00005602238e5195 asio::detail::scheduler::run(std::error_code&)\n#4  0x00005602238ecd1e asio::io_context::run()\n#5  0x00005602234009b0 mongo::transport::TransportLayerASIO::ASIOReactor::run()\n#6  0x00005602233e388d mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}>(mongo::transport::ServiceExecutorFixed::start()::{lambda(mongo::Status)#2}&&)::SpecificImpl::call(mongo::Status&&)\n#7  0x00005602239f93f5 mongo::ThreadPool::Impl::_doOneTask(std::unique_lock<mongo::latch_detail::Latch>*)\n#8  0x00005602239faa8b mongo::ThreadPool::Impl::_consumeTasks()\n#9  0x00005602239fbea1 mongo::ThreadPool::Impl::_workerThreadBody(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n#10 0x00005602239fc3b0 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::Impl::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()\n#11 0x0000560223de245f execute_native_thread_routine\n#12 0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#13 0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 3914:\n#0  0x00007f97dbb1efde epoll_wait\n    ../sysdeps/unix/sysv/linux/epoll_wait.c:30:10\n#1  0x00005602238e222e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)\n#2  0x00005602238e4c0d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)\n#3  0x00005602238e5195 asio::detail::scheduler::run(std::error_code&)\n#4  0x00005602238ecd1e asio::io_context::run()\n#5  0x00005602233ff0ec mongo::transport::TransportLayerASIO::_runListener()\n#6  0x00005602233ff6cc std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::transport::TransportLayerASIO::start()::{lambda()#1}, , 0>(mongo::transport::TransportLayerASIO::start()::{lambda()#1})::{lambda()#1}> > >::_M_run()\n#7  0x0000560223de245f execute_native_thread_routine\n#8  0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#9  0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 4117:\n#0  0x00007f97dbb96981 __strlen_avx2\n    ../sysdeps/x86_64/multiarch/strlen-avx2.S:75\n#1  0x0000560223bcdb3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x00005602235157b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x00005602235143d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000056022233e4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000056022234f26a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000056022233c613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000056022233d8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005602223c6d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005602223c7acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x00005602223c7b63 mongo::PlanExecutorImpl::getNext(mongo::BSONObj*, mongo::RecordId*)\n#11 0x0000560221e1820a mongo::(anonymous namespace)::FindCmd::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#12 0x0000560222a5e74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#13 0x0000560222a638be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#14 0x00005602212fd907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#15 0x000056022130ff56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#16 0x0000560221310fbb mongo::(anonymous namespace)::RunCommandImpl::_runImpl()\n#17 0x0000560221301f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#18 0x000056022130415e mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#19 0x000056022130cc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#20 0x000056022130edf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#21 0x00005602212c9967 mongo::future_details::SharedStateBase::transitionToFinished()\n#22 0x00005602213131a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#23 0x00005602213065fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x00005602212c9967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000056022130d5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#26 0x000056022130e01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#27 0x000056022130ed36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#28 0x0000560221308fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#29 0x00005602212f8e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#30 0x0000560221350097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#31 0x00005602213503c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#32 0x0000560221352d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#33 0x000056022135322f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#34 0x00005602233ee9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#35 0x0000560221a32ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#36 0x00005602233eeb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#37 0x00005602233f2a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#38 0x00005602233f2a9c mongo::(anonymous namespace)::runFunc(void*)\n#39 0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#40 0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\nTID 23084:\n#0  0x00007f97dbb209ef recvmsg\n    ../sysdeps/unix/sysv/linux/recvmsg.c:27:10\n#1  0x00005602238e8522 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)\n#2  0x00005602238e85d8 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)\n#3  0x0000560223427073 mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#4  0x00005602234351aa mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#5  0x000056022341e6b7 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)\n#6  0x000056022341ea0a mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()\n#7  0x000056022135100d mongo::transport::ServiceStateMachine::Impl::sourceMessage()\n#8  0x0000560221352e72 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#9  0x000056022135322f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#10 0x00005602233ee9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#11 0x0000560221a32ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#12 0x00005602233eeb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#13 0x00005602233f2a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#14 0x00005602233f2a9c mongo::(anonymous namespace)::runFunc(void*)\n#15 0x00007f97dba8db43 start_thread\n    ./nptl/pthread_create.c:442:8\n#16 0x00007f97dbb1fa00 __clone3\n    ../sysdeps/unix/sysv/linux/x86_64/clone3.S:81)",
  "threads": [
    {
      "threadId": "4117",
      "threadName": "conn2",
      "threadState": "R",
      "threadCPU": "99.9",
      "threadStack": "#0  0x00007f97dbb96981 __strlen_avx2\n../sysdeps/x86_64/multiarch/strlen-avx2.S:75\n#1  0x0000560223bcdb3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x00005602235157b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x00005602235143d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000056022233e4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000056022234f26a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000056022233c613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000056022233d8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005602223c6d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005602223c7acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x00005602223c7b63 mongo::PlanExecutorImpl::getNext(mongo::BSONObj*, mongo::RecordId*)\n#11 0x0000560221e1820a mongo::(anonymous namespace)::FindCmd::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#12 0x0000560222a5e74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#13 0x0000560222a638be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#14 0x00005602212fd907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#15 0x000056022130ff56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#16 0x0000560221310fbb mongo::(anonymous namespace)::RunCommandImpl::_runImpl()\n#17 0x0000560221301f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#18 0x000056022130415e mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#19 0x000056022130cc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#20 0x000056022130edf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#21 0x00005602212c9967 mongo::future_details::SharedStateBase::transitionToFinished()\n#22 0x00005602213131a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#23 0x00005602213065fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x00005602212c9967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000056022130d5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#26 0x000056022130e01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#27 0x000056022130ed36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#28 0x0000560221308fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#29 0x00005602212f8e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#30 0x0000560221350097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#31 0x00005602213503c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#32 0x0000560221352d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#33 0x000056022135322f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#34 0x00005602233ee9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#35 0x0000560221a32ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#36 0x00005602233eeb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#37 0x00005602233f2a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#38 0x00005602233f2a9c mongo::(anonymous namespace)::runFunc(void*)\n#39 0x00007f97dba8db43 start_thread\n./nptl/pthread_create.c:442:8\n#40 0x00007f97dbb1fa00 __clone3\n../sysdeps/unix/sysv/linux/x86_64/clone3.S:81"
    },
    {
      "threadId": "23084",
      "threadName": "conn3",
      "threadState": "S",
      "threadCPU": "0.0",
      "threadStack": "#0  0x00007f97dbb209ef recvmsg\n../sysdeps/unix/sysv/linux/recvmsg.c:27:10\n#1  0x00005602238e8522 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)\n#2  0x00005602238e85d8 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)\n#3  0x0000560223427073 mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#4  0x00005602234351aa mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#5  0x000056022341e6b7 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)\n#6  0x000056022341ea0a mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()\n#7  0x000056022135100d mongo::transport::ServiceStateMachine::Impl::sourceMessage()\n#8  0x0000560221352e72 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#9  0x000056022135322f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#10 0x00005602233ee9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#11 0x0000560221a32ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#12 0x00005602233eeb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#13 0x00005602233f2a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#14 0x00005602233f2a9c mongo::(anonymous namespace)::runFunc(void*)\n#15 0x00007f97dba8db43 start_thread\n./nptl/pthread_create.c:442:8\n#16 0x00007f97dbb1fa00 __clone3\n../sysdeps/unix/sysv/linux/x86_64/clone3.S:81"
    }
  ]
}
