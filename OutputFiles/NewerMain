
Process ID of mongod is: 31946

mongo::future_details::SharedStateBase::transitionToFinished() - 110

start_thread - 56

mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&) - 56

mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call() - 56

mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call() - 56

mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call() - 56

mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&) - 56

mongo::(anonymous namespace)::runFunc(void*) - 56

__clone3 - 56

mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&) - 55

mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&) - 55

mongo::transport::ServiceStateMachine::Impl::processMessage() - 55

mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&) - 55

mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >) - 55

mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717] - 55

mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel) - 55

mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*) - 55

mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>) - 55

mongo::(anonymous namespace)::RunCommandImpl::_runCommand() - 55

mongo::(anonymous namespace)::RunCommandImpl::run() - 55

mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>) - 55

mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()() - 55

mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>) - 55

mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec() - 55

mongo::(anonymous namespace)::CommandOpRunner::run() - 55

auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&) - 55

mongo::DocumentSource::getNext() - 42

__poll - 31

mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t) - 31

mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*) - 31

mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*) - 31

mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder*, bool, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long>) - 31

mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t) - 31

mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#2}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#2}, mongo::AtomicWord<long>*)::{lambda(mongo::Date_t, mongo::Interruptible::WakeSpeed)#5}::operator()(mongo::Date_t, mongo::Interruptible::WakeSpeed) const - 31

mongo::Interruptible::sleepFor(mongo::Duration<std::ratio<1l, 1000l> >) - 31

mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*) - 31

mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*) - 31

mongo::(anonymous namespace)::RunCommandImpl::_runImpl() - 31

mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&) - 25

mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl() - 24

mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint() - 24

mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*) - 21

mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*) - 21

mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*) - 21

mongo::PlanExecutorPipeline::_getNext() - 21

mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*) - 21

mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*) - 21

mongo::Pipeline::getNext() - 21

mongo::DocumentSourceGroup::initialize() - 21

mongo::DocumentSourceGroup::doGetNext() - 21

mongo::DocumentSourceCursor::loadBatch() - 21

mongo::DocumentSourceCursor::doGetNext() - 21

mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*) - 21

mongo::CollectionScan::doWork(unsigned long*) - 17

mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const - 9

mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const - 9

mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long) - 9

mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*) - 9

mongo::BSONObj::getField(mongo::StringData) const - 9

mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&) - 9

__strlen_avx2 - 8

mongo::WiredTigerRecordStoreCursorBase::next() - 8

mongo::SortStage::doWork(unsigned long*) - 8

mongo::ProjectionStage::doWork(unsigned long*) - 8

mongo::PlanStage::restoreState(mongo::RestoreContext const&) - 8

__wt_row_search - 6

__wt_struct_unpackv - 5

__wt_cursor_get_keyv - 5

__wt_cursor_get_key - 5

mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const - 5

__wt_btcur_search_near - 4

mongo::WiredTigerRecordStoreCursorBase::restore(bool) - 4

mongo::RequiresCollectionStage::doRestoreState(mongo::RestoreContext const&) - 4

mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>) - 4

mongo::PlanYieldPolicyImpl::restoreState(mongo::OperationContext*, mongo::Yieldable const*) - 4

mongo::PlanExecutorImpl::restoreStateWithoutRetrying(mongo::RestoreContext const&, mongo::Yieldable const*) - 4

mongo::CollectionScan::doRestoreStateRequiresCollection() - 4

int mongo::wiredTigerPrepareConflictRetry<mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}>(mongo::OperationContext*, mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}&&) - 4

__curfile_search_near - 4

__wt_btcur_next_prefix - 3

__wt_btcur_insert - 3

mongo::write_ops_exec::performInserts(mongo::OperationContext*, mongo::write_ops::InsertCommandRequest const&, mongo::OperationSource const&) - 3

mongo::write_ops_exec::(anonymous namespace)::insertDocuments(mongo::OperationContext*, mongo::CollectionPtr const&, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, bool) - 3

mongo::WiredTigerIndex::insert(mongo::OperationContext*, mongo::KeyString::Value const&, bool) - 3

mongo::WiredTigerIdIndex::_insert(mongo::OperationContext*, __wt_cursor*, mongo::KeyString::Value const&, bool) - 3

mongo::wiredTigerCursorInsert(mongo::OperationContext*, __wt_cursor*) - 3

mongo::TypedCommand<mongo::(anonymous namespace)::CmdInsert>::InvocationBase::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*) - 3

mongo::IndexCatalogImpl::indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const - 3

mongo::IndexCatalogImpl::_indexRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const - 3

mongo::IndexCatalogImpl::_indexKeys(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::BSONObj const&, mongo::RecordId, mongo::InsertDeleteOptions const&, long*) const - 3

mongo::IndexCatalogImpl::_indexFilteredRecords(mongo::OperationContext*, mongo::CollectionPtr const&, mongo::IndexCatalogEntry const*, std::vector<mongo::BsonRecord, std::allocator<mongo::BsonRecord> > const&, long*) const - 3

mongo::CollectionImpl::insertDocuments(mongo::OperationContext*, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool) const - 3

mongo::CollectionImpl::_insertDocuments(mongo::OperationContext*, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, __gnu_cxx::__normal_iterator<mongo::InsertStatement const*, std::vector<mongo::InsertStatement, std::allocator<mongo::InsertStatement> > >, mongo::OpDebug*, bool) const - 3

mongo::(anonymous namespace)::CmdInsert::Invocation::typedRun(mongo::OperationContext*) - 3

mongo::AbstractIndexAccessMethod::insertKeys(mongo::OperationContext*, mongo::CollectionPtr const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, mongo::RecordId const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*) - 3

mongo::AbstractIndexAccessMethod::insertKeysAndUpdateMultikeyPaths(mongo::OperationContext*, mongo::CollectionPtr const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::flat_set<mongo::KeyString::Value, std::less<mongo::KeyString::Value>, void> const&, boost::container::small_vector<boost::container::flat_set<unsigned char, std::less<unsigned char>, boost::container::small_vector<unsigned char, 4ul, void, void> >, 4ul, void, void> const&, mongo::RecordId const&, mongo::InsertDeleteOptions const&, std::function<mongo::Status (mongo::KeyString::Value const&)>&&, long*) - 3

__curfile_next - 3

__curfile_insert - 3

__wt_sleep - 2

__wt_page_in_func - 2

__select - 2

__wt_row_modify - 1

__wt_calloc - 1

__wt_btcur_skip_page.part.9 - 1

__wt_btcur_skip_page - 1

__tree_walk_internal - 1

tcmalloc::ThreadCache::FetchFromCentralCache(unsigned int, int, void* (*)(unsigned long)) - 1

tcmalloc::CentralFreeList::RemoveRange(void**, void**, int) - 1

SpinLock::SlowLock() - 1

__sched_yield - 1

recvmsg - 1

mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&) - 1

mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage() - 1

mongo::transport::ServiceStateMachine::Impl::sourceMessage() - 1

mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&) - 1

mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&) - 1

mongo::BSONElement::computeSize(signed char, char const*, int) - 1

calloc - 1

base::internal::SpinLockDelay(int volatile*, int, int) - 1

asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&) - 1

asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&) - 1

