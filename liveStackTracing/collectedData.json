{
    "threads": {
        "41509": {
            "threadId": "41509",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41509",
                    "threadName": "conn378",
                    "threadCpu": 34.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "959086",
                    "threadStack": "TID 41509:\n#0  0x0000564d8ecc943b __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn378",
                            "connectionId": 378,
                            "client": "127.0.0.1:48230",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3935,
                            "lsid": {
                                "id": {
                                    "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2354813"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 568,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "570"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41509",
                    "threadName": "conn378",
                    "threadCpu": 76.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "962936",
                    "threadStack": "TID 41509:\n#0  0x0000564d90289dd3 mongo::WorkingSet::allocate()\n#1  0x0000564d8fc16836 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn378",
                            "connectionId": 378,
                            "client": "127.0.0.1:48230",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3935,
                            "lsid": {
                                "id": {
                                    "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6125208"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1328,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1330"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41509",
                    "threadName": "conn378",
                    "threadCpu": 35.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "967045",
                    "threadStack": "TID 41509:\n#0  0x0000564d91497500 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#1  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#2  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#3  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#4  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn378",
                            "connectionId": 378,
                            "client": "127.0.0.1:48230",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3935,
                            "lsid": {
                                "id": {
                                    "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9554705"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4u5u1/hnRrq7ZQHOZu/pIw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1729,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1731"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ]
                },
                "avgCpu": "49.13",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41606": {
            "threadId": "41606",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41606",
                    "threadName": "conn413",
                    "threadCpu": 52.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "960067",
                    "threadStack": "TID 41606:\n#0  0x0000564d910a0a15 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000564d902898a0 mongo::WorkingSetMember::clear()\n#3  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#4  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn413",
                            "connectionId": 413,
                            "client": "127.0.0.1:48304",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4017,
                            "lsid": {
                                "id": {
                                    "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2246885"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 536,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "538"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41606",
                    "threadName": "conn413",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "962851",
                    "threadStack": "TID 41606:\n#0  0x0000564d90dede86 mongo::BSONElementIterator::more()\n#1  0x0000564d8fc2839d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn413",
                            "connectionId": 413,
                            "client": "127.0.0.1:48304",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4017,
                            "lsid": {
                                "id": {
                                    "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6017282"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1003,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1005"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41606",
                    "threadName": "conn413",
                    "threadCpu": 57.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "967210",
                    "threadStack": "TID 41606:\n#0  0x00007f7b6092fcee __memcmp_avx2_movbe\n#1  0x0000564d9149427b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#4  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#5  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#10 0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#11 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#12 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#14 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#17 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#18 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#19 0x0000564d9013326c mongo::Pipeline::getNext()\n#20 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#21 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#22 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#23 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#27 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#28 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#29 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#30 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#31 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#32 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#33 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#34 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#37 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#38 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#39 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#42 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#43 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#44 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#45 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#46 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#47 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#50 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#52 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#53 0x00007f7b6082ab43 start_thread\n#54 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn413",
                            "connectionId": 413,
                            "client": "127.0.0.1:48304",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4017,
                            "lsid": {
                                "id": {
                                    "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9446730"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7c4EwfxRc+W7rA++wkMZw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1238,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1240"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ]
                },
                "avgCpu": "44.13",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41567": {
            "threadId": "41567",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41567",
                    "threadName": "conn402",
                    "threadCpu": 34.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "959488",
                    "threadStack": "TID 41567:\n#0  0x0000564d8fe0a810 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#1  0x0000564d8fc9fc93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#6  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#7  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d9013326c mongo::Pipeline::getNext()\n#10 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f7b6082ab43 start_thread\n#44 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn402",
                            "connectionId": 402,
                            "client": "127.0.0.1:48280",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3984,
                            "lsid": {
                                "id": {
                                    "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2296139"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 598,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "600"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41567",
                    "threadName": "conn402",
                    "threadCpu": 76.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "963195",
                    "threadStack": "TID 41567:\n#0  0x0000564d9155390e pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn402",
                            "connectionId": 402,
                            "client": "127.0.0.1:48280",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3984,
                            "lsid": {
                                "id": {
                                    "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6066534"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1205,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1207"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41567",
                    "threadName": "conn402",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967208",
                    "threadStack": "TID 41567:\n#0  0x0000564d914a6bc6 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn402",
                            "connectionId": 402,
                            "client": "127.0.0.1:48280",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3984,
                            "lsid": {
                                "id": {
                                    "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9495998"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VBcLfPSpS8qoCiUqApsAEg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1434,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1436"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ]
                },
                "avgCpu": "42.00",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41667": {
            "threadId": "41667",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41667",
                    "threadName": "conn447",
                    "threadCpu": 65.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "959921",
                    "threadStack": "TID 41667:\n#0  0x0000564d8fc28230 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn447",
                            "connectionId": 447,
                            "client": "127.0.0.1:48372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4079,
                            "lsid": {
                                "id": {
                                    "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2186913"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 746,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "748"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41667",
                    "threadName": "conn447",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "962665",
                    "threadStack": "TID 41667:\n#0  0x0000564d8ed65c20 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn447",
                            "connectionId": 447,
                            "client": "127.0.0.1:48372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4079,
                            "lsid": {
                                "id": {
                                    "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5957307"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1068,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1070"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41667",
                    "threadName": "conn447",
                    "threadCpu": 35.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "967347",
                    "threadStack": "TID 41667:\n#0  0x0000564d8eb9f5b0 mongo::LockerImpl::inAWriteUnitOfWork() const\n#1  0x0000564d8fe0a849 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#2  0x0000564d8fc9fc93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn447",
                            "connectionId": 447,
                            "client": "127.0.0.1:48372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 4079,
                            "lsid": {
                                "id": {
                                    "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9386790"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "R6jsSFogSgmu6IKJJ34SrA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1264,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1266"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "41.33",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41691": {
            "threadId": "41691",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41691",
                    "threadName": "conn465",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "960164",
                    "threadStack": "TID 41691:\n#0  0x0000564d9156babd _pcre_valid_utf\n#1  0x0000564d91553168 pcre_exec\n#2  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn465",
                            "connectionId": 465,
                            "client": "127.0.0.1:48414",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4095,
                            "lsid": {
                                "id": {
                                    "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2159883"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 419,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "421"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41691",
                    "threadName": "conn465",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963422",
                    "threadStack": "TID 41691:\n#0  0x0000564d903abe42 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn465",
                            "connectionId": 465,
                            "client": "127.0.0.1:48414",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4095,
                            "lsid": {
                                "id": {
                                    "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5930278"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 611,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "613"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41691",
                    "threadName": "conn465",
                    "threadCpu": 92.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "967207",
                    "threadStack": "TID 41691:\n#0  0x0000564d8fc17324 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#1  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn465",
                            "connectionId": 465,
                            "client": "127.0.0.1:48414",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4095,
                            "lsid": {
                                "id": {
                                    "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9359742"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "S7dG047RT3W6NdHEuxvoow==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 940,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "942"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "39.13",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41607": {
            "threadId": "41607",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41607",
                    "threadName": "conn414",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "959865",
                    "threadStack": "TID 41607:\n#0  0x0000564d8ecc90cd __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn414",
                            "connectionId": 414,
                            "client": "127.0.0.1:48306",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4009,
                            "lsid": {
                                "id": {
                                    "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2255322"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 451,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "453"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41607",
                    "threadName": "conn414",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "963383",
                    "threadStack": "TID 41607:\n#0  0x0000564d8ecc9290 __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn414",
                            "connectionId": 414,
                            "client": "127.0.0.1:48306",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4009,
                            "lsid": {
                                "id": {
                                    "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6025716"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 841,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "843"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41607",
                    "threadName": "conn414",
                    "threadCpu": 78.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967382",
                    "threadStack": "TID 41607:\n#0  0x0000564d8ecc7b46 __wt_cursor_get_keyv\n#1  0x0000564d8ecc84cb __wt_cursor_get_key\n#2  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn414",
                            "connectionId": 414,
                            "client": "127.0.0.1:48306",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4009,
                            "lsid": {
                                "id": {
                                    "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9455186"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ZGcxgxNNTH27IEV7/6FbyQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1410,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1412"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "38.23",
                "cpuStats": {
                    "cpuTrend": "Thread has increasing cpu utilization over iterations. Its Average CPU is greater than threshold.",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41682": {
            "threadId": "41682",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41682",
                    "threadName": "conn458",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "960101",
                    "threadStack": "TID 41682:\n#0  0x0000564d902895f2 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x0000564d902898a0 mongo::WorkingSetMember::clear()\n#2  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#3  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn458",
                            "connectionId": 458,
                            "client": "127.0.0.1:48400",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4086,
                            "lsid": {
                                "id": {
                                    "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2179946"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 371,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "373"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41682",
                    "threadName": "conn458",
                    "threadCpu": 80.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "963317",
                    "threadStack": "TID 41682:\n#0  0x0000564d8ec6c7ec mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn458",
                            "connectionId": 458,
                            "client": "127.0.0.1:48400",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4086,
                            "lsid": {
                                "id": {
                                    "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5950346"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 946,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "948"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41682",
                    "threadName": "conn458",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967543",
                    "threadStack": "TID 41682:\n#0  0x0000564d910a0946 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000564d902898a0 mongo::WorkingSetMember::clear()\n#3  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#4  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn458",
                            "connectionId": 458,
                            "client": "127.0.0.1:48400",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4086,
                            "lsid": {
                                "id": {
                                    "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9379787"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dLOM9whrS2epbItU+0Deqw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1211,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1213"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "37.50",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41603": {
            "threadId": "41603",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41603",
                    "threadName": "conn410",
                    "threadCpu": 39.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "959814",
                    "threadStack": "TID 41603:\n#0  0x0000564d8ecb7eaa __curfile_next\n#1  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn410",
                            "connectionId": 410,
                            "client": "127.0.0.1:48298",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4046,
                            "lsid": {
                                "id": {
                                    "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2223340"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 429,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "431"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41603",
                    "threadName": "conn410",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "962968",
                    "threadStack": "TID 41603:\n#0  0x0000564d8eba844b mongo::StringData::StringData(char const*, unsigned long)\n#1  0x0000564d912fbd78 mongo::FieldRef::getPart(unsigned char) const\n#2  0x0000564d90dee7ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn410",
                            "connectionId": 410,
                            "client": "127.0.0.1:48298",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4046,
                            "lsid": {
                                "id": {
                                    "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5993733"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 656,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "658"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41603",
                    "threadName": "conn410",
                    "threadCpu": 57.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "967470",
                    "threadStack": "TID 41603:\n#0  0x0000564d8fc17320 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#1  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn410",
                            "connectionId": 410,
                            "client": "127.0.0.1:48298",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4046,
                            "lsid": {
                                "id": {
                                    "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9423201"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KH/4yYu2TdmaNutBYR2g+A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 921,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "923"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "37.20",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41685": {
            "threadId": "41685",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41685",
                    "threadName": "conn461",
                    "threadCpu": 43.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "960016",
                    "threadStack": "TID 41685:\n#0  0x0000564d90dede86 mongo::BSONElementIterator::more()\n#1  0x0000564d8fc2839d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn461",
                            "connectionId": 461,
                            "client": "127.0.0.1:48406",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4094,
                            "lsid": {
                                "id": {
                                    "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2164076"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 932,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "934"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41685",
                    "threadName": "conn461",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "963614",
                    "threadStack": "TID 41685:\n#0  0x00007f7b6092ff08 __memcmp_avx2_movbe\n#1  0x0000564d9149427b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#4  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#5  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#10 0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#11 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#12 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#14 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#17 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#18 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#19 0x0000564d9013326c mongo::Pipeline::getNext()\n#20 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#21 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#22 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#23 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#27 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#28 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#29 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#30 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#31 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#32 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#33 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#34 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#37 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#38 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#39 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#42 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#43 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#44 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#45 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#46 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#47 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#50 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#52 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#53 0x00007f7b6082ab43 start_thread\n#54 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn461",
                            "connectionId": 461,
                            "client": "127.0.0.1:48406",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4094,
                            "lsid": {
                                "id": {
                                    "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5934473"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1187,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1189"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41685",
                    "threadName": "conn461",
                    "threadCpu": 35.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "967369",
                    "threadStack": "TID 41685:\n#0  0x0000564d9173954e tc_newarray\n#1  0x0000564d8fc174a2 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn461",
                            "connectionId": 461,
                            "client": "127.0.0.1:48406",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4094,
                            "lsid": {
                                "id": {
                                    "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9363933"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "8RoOEHNCQNaS5QdBK9sB8Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1457,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1459"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "34.10",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41587": {
            "threadId": "41587",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41587",
                    "threadName": "conn409",
                    "threadCpu": 26.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "959923",
                    "threadStack": "TID 41587:\n#0  0x0000564d90dee718 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#1  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#2  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#3  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#4  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn409",
                            "connectionId": 409,
                            "client": "127.0.0.1:48296",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4004,
                            "lsid": {
                                "id": {
                                    "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2267239"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 511,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "513"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41587",
                    "threadName": "conn409",
                    "threadCpu": 61.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963217",
                    "threadStack": "TID 41587:\n#0  0x0000564d9173952b tc_newarray\n#1  0x0000564d8fc174a2 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn409",
                            "connectionId": 409,
                            "client": "127.0.0.1:48296",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4004,
                            "lsid": {
                                "id": {
                                    "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6037636"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1028,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1030"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41587",
                    "threadName": "conn409",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967794",
                    "threadStack": "TID 41587:\n#0  0x0000564d8ec6e316 mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn409",
                            "connectionId": 409,
                            "client": "127.0.0.1:48296",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4004,
                            "lsid": {
                                "id": {
                                    "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9467077"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rEILhWsPTyKJGerUWhmUYA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1223,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1225"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "33.97",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41580": {
            "threadId": "41580",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41580",
                    "threadName": "conn407",
                    "threadCpu": 60.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "960034",
                    "threadStack": "TID 41580:\n#0  0x0000564d8ec6c860 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn407",
                            "connectionId": 407,
                            "client": "127.0.0.1:48292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3987,
                            "lsid": {
                                "id": {
                                    "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2293525"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 756,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "758"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41580",
                    "threadName": "conn407",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "963544",
                    "threadStack": "TID 41580:\n#0  0x00007f7b6092fef9 __memcmp_avx2_movbe\n#1  0x0000564d9149427b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#4  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#5  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#10 0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#11 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#12 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#14 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#17 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#18 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#19 0x0000564d9013326c mongo::Pipeline::getNext()\n#20 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#21 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#22 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#23 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#27 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#28 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#29 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#30 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#31 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#32 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#33 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#34 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#37 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#38 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#39 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#42 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#43 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#44 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#45 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#46 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#47 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#50 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#52 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#53 0x00007f7b6082ab43 start_thread\n#54 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn407",
                            "connectionId": 407,
                            "client": "127.0.0.1:48292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3987,
                            "lsid": {
                                "id": {
                                    "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6063919"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1112,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1114"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41580",
                    "threadName": "conn407",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967495",
                    "threadStack": "TID 41580:\n#0  0x0000564d8fc17320 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#1  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn407",
                            "connectionId": 407,
                            "client": "127.0.0.1:48292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3987,
                            "lsid": {
                                "id": {
                                    "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9493421"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "C4haltKmQCOtDzxa9CkXLA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1330,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1332"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ]
                },
                "avgCpu": "33.83",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41677": {
            "threadId": "41677",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41677",
                    "threadName": "conn454",
                    "threadCpu": 21.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "960218",
                    "threadStack": "TID 41677:\n#0  0x0000564d8fc9fdbf mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#5  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#6  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d9013326c mongo::Pipeline::getNext()\n#9  0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f7b6082ab43 start_thread\n#43 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn454",
                            "connectionId": 454,
                            "client": "127.0.0.1:48390",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4091,
                            "lsid": {
                                "id": {
                                    "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2171757"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 392,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "394"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41677",
                    "threadName": "conn454",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "963320",
                    "threadStack": "TID 41677:\n#0  0x0000564d9173954e tc_newarray\n#1  0x0000564d8fc174a2 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn454",
                            "connectionId": 454,
                            "client": "127.0.0.1:48390",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4091,
                            "lsid": {
                                "id": {
                                    "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5942154"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 574,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "576"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41677",
                    "threadName": "conn454",
                    "threadCpu": 64.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967316",
                    "threadStack": "TID 41677:\n#0  0x0000564d912fbd00 mongo::FieldRef::getPart(unsigned char) const\n#1  0x0000564d90dee7ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn454",
                            "connectionId": 454,
                            "client": "127.0.0.1:48390",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4091,
                            "lsid": {
                                "id": {
                                    "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9371602"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "abClv8fSQ1uQZFbZA4hlsQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1028,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1030"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "33.80",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41676": {
            "threadId": "41676",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41676",
                    "threadName": "conn453",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "959589",
                    "threadStack": "TID 41676:\n#0  0x0000564d90ded3dc mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn453",
                            "connectionId": 453,
                            "client": "127.0.0.1:48388",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4097,
                            "lsid": {
                                "id": {
                                    "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2128297"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 389,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "391"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41676",
                    "threadName": "conn453",
                    "threadCpu": 57.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "963067",
                    "threadStack": "TID 41676:\n#0  0x0000564d8fc1669a mongo::CollectionScan::doWork(unsigned long*)\n#1  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#6  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#7  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d9013326c mongo::Pipeline::getNext()\n#10 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f7b6082ab43 start_thread\n#44 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn453",
                            "connectionId": 453,
                            "client": "127.0.0.1:48388",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4097,
                            "lsid": {
                                "id": {
                                    "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5898692"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 984,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "986"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41676",
                    "threadName": "conn453",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967288",
                    "threadStack": "TID 41676:\n#0  0x0000564d9155866d pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn453",
                            "connectionId": 453,
                            "client": "127.0.0.1:48388",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 4097,
                            "lsid": {
                                "id": {
                                    "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9328189"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "OhxEGXRCSSaylVWmOOtiKQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1168,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1170"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "30.70",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41430": {
            "threadId": "41430",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41430",
                    "threadName": "conn350",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959783",
                    "threadStack": "TID 41430:\n#0  0x0000564d8ecc5ab0 __wt_struct_unpackv\n#1  0x0000564d8ecc7eda __wt_cursor_get_keyv\n#2  0x0000564d8ecc84cb __wt_cursor_get_key\n#3  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn350",
                            "connectionId": 350,
                            "client": "127.0.0.1:48168",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3898,
                            "lsid": {
                                "id": {
                                    "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2400471"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 602,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "604"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41430",
                    "threadName": "conn350",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "962004",
                    "threadStack": "TID 41430:\n#0  0x0000564d8ecb7ed7 __curfile_next\n#1  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn350",
                            "connectionId": 350,
                            "client": "127.0.0.1:48168",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3898,
                            "lsid": {
                                "id": {
                                    "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6170865"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 841,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "843"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41430",
                    "threadName": "conn350",
                    "threadCpu": 57.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "966118",
                    "threadStack": "TID 41430:\n#0  0x0000564d8ed65e97 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn350",
                            "connectionId": 350,
                            "client": "127.0.0.1:48168",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3898,
                            "lsid": {
                                "id": {
                                    "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9600362"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "LK5EW+DZRLWPaRMD6PLLkg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1189,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1191"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "29.97",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41503": {
            "threadId": "41503",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41503",
                    "threadName": "conn374",
                    "threadCpu": 56.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "959335",
                    "threadStack": "TID 41503:\n#0  0x0000564d8ecc7e1a __wt_cursor_get_keyv\n#1  0x0000564d8ecc84cb __wt_cursor_get_key\n#2  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn374",
                            "connectionId": 374,
                            "client": "127.0.0.1:48222",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3977,
                            "lsid": {
                                "id": {
                                    "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2299897"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 497,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "499"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41503",
                    "threadName": "conn374",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "962604",
                    "threadStack": "TID 41503:\n#0  0x0000564d8eb9f5b0 mongo::LockerImpl::inAWriteUnitOfWork() const\n#1  0x0000564d8fe0a849 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#2  0x0000564d8fc9fc93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn374",
                            "connectionId": 374,
                            "client": "127.0.0.1:48222",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3977,
                            "lsid": {
                                "id": {
                                    "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6070291"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 771,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "773"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41503",
                    "threadName": "conn374",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "966804",
                    "threadStack": "TID 41503:\n#0  0x0000564d91553024 pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn374",
                            "connectionId": 374,
                            "client": "127.0.0.1:48222",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3977,
                            "lsid": {
                                "id": {
                                    "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9499757"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "U/K7IVI5QZ6g+rpbAOEDSg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 944,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "946"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ]
                },
                "avgCpu": "29.80",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41560": {
            "threadId": "41560",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41560",
                    "threadName": "conn399",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959907",
                    "threadStack": "TID 41560:\n#0  0x0000564d91553892 pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn399",
                            "connectionId": 399,
                            "client": "127.0.0.1:48274",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3982,
                            "lsid": {
                                "id": {
                                    "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2297439"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1043,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1045"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41560",
                    "threadName": "conn399",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "962841",
                    "threadStack": "TID 41560:\n#0  0x0000564d8fc283c9 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn399",
                            "connectionId": 399,
                            "client": "127.0.0.1:48274",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3982,
                            "lsid": {
                                "id": {
                                    "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6067834"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1240,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1242"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41560",
                    "threadName": "conn399",
                    "threadCpu": 50.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "967063",
                    "threadStack": "TID 41560:\n#0  0x0000564d8ed62f18 __wt_txn_read\n#1  0x0000564d8ed67828 __wt_btcur_next_prefix\n#2  0x0000564d8ecb7ffe __curfile_next\n#3  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn399",
                            "connectionId": 399,
                            "client": "127.0.0.1:48274",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3982,
                            "lsid": {
                                "id": {
                                    "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9497298"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "n2ntLXa6TUG/Ru6T5YC0tQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1525,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1527"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "27.60",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41605": {
            "threadId": "41605",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41605",
                    "threadName": "conn412",
                    "threadCpu": 30.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959955",
                    "threadStack": "TID 41605:\n#0  0x0000564d914a6b08 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn412",
                            "connectionId": 412,
                            "client": "127.0.0.1:48302",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4047,
                            "lsid": {
                                "id": {
                                    "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2221794"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 685,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "687"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41605",
                    "threadName": "conn412",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963158",
                    "threadStack": "TID 41605:\n#0  0x0000564d910a0a26 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000564d902898a0 mongo::WorkingSetMember::clear()\n#3  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#4  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn412",
                            "connectionId": 412,
                            "client": "127.0.0.1:48302",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4047,
                            "lsid": {
                                "id": {
                                    "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5992192"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 950,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "952"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41605",
                    "threadName": "conn412",
                    "threadCpu": 35.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "967436",
                    "threadStack": "TID 41605:\n#0  0x0000564d910a9cc0 mongo::DocumentMetadataFields::operator=(mongo::DocumentMetadataFields&&)\n#1  0x0000564d910a0a22 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#2  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#3  0x0000564d8fc168bc mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn412",
                            "connectionId": 412,
                            "client": "127.0.0.1:48302",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4047,
                            "lsid": {
                                "id": {
                                    "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9421639"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6Cr6Dl9jSxyniOLpnm+vfw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1221,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1223"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "25.87",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41548": {
            "threadId": "41548",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41548",
                    "threadName": "conn394",
                    "threadCpu": 21.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "959527",
                    "threadStack": "TID 41548:\n#0  0x0000564d8ec6c839 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn394",
                            "connectionId": 394,
                            "client": "127.0.0.1:48264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3956,
                            "lsid": {
                                "id": {
                                    "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2331161"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1026,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1028"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41548",
                    "threadName": "conn394",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "962873",
                    "threadStack": "TID 41548:\n#0  0x0000564d91552e87 pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn394",
                            "connectionId": 394,
                            "client": "127.0.0.1:48264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3956,
                            "lsid": {
                                "id": {
                                    "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6101565"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1251,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1253"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41548",
                    "threadName": "conn394",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967247",
                    "threadStack": "TID 41548:\n#0  0x0000564d903abe14 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn394",
                            "connectionId": 394,
                            "client": "127.0.0.1:48264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3956,
                            "lsid": {
                                "id": {
                                    "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9531067"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "c4TepVfrSsaGcWZdolYWZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1464,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1466"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ]
                },
                "avgCpu": "23.17",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41513": {
            "threadId": "41513",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41513",
                    "threadName": "conn380",
                    "threadCpu": 43.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "959631",
                    "threadStack": "TID 41513:\n#0  0x0000564d8ed9a1a4 __wt_value_return_buf\n#1  0x0000564d8ed62f77 __wt_txn_read\n#2  0x0000564d8ed67828 __wt_btcur_next_prefix\n#3  0x0000564d8ecb7ffe __curfile_next\n#4  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn380",
                            "connectionId": 380,
                            "client": "127.0.0.1:48234",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3942,
                            "lsid": {
                                "id": {
                                    "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2350044"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 847,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "849"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41513",
                    "threadName": "conn380",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963131",
                    "threadStack": "TID 41513:\n#0  0x0000564d8fc1560d mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#1  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn380",
                            "connectionId": 380,
                            "client": "127.0.0.1:48234",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3942,
                            "lsid": {
                                "id": {
                                    "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6120441"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1113,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1115"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41513",
                    "threadName": "conn380",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967598",
                    "threadStack": "TID 41513:\n#0  0x0000564d8ecc92b6 __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn380",
                            "connectionId": 380,
                            "client": "127.0.0.1:48234",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3942,
                            "lsid": {
                                "id": {
                                    "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9549888"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "aDWKyi9nQ6agPhkz+qqi4Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1293,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1295"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "23.10",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41640": {
            "threadId": "41640",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41640",
                    "threadName": "conn433",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "960108",
                    "threadStack": "TID 41640:\n#0  0x0000564d9156bcbc _pcre_valid_utf\n#1  0x0000564d91553168 pcre_exec\n#2  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn433",
                            "connectionId": 433,
                            "client": "127.0.0.1:48344",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4027,
                            "lsid": {
                                "id": {
                                    "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2232320"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 340,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "342"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41640",
                    "threadName": "conn433",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963139",
                    "threadStack": "TID 41640:\n#0  0x0000564d9028988f mongo::WorkingSetMember::clear()\n#1  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#2  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn433",
                            "connectionId": 433,
                            "client": "127.0.0.1:48344",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4027,
                            "lsid": {
                                "id": {
                                    "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6002724"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 624,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "626"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41640",
                    "threadName": "conn433",
                    "threadCpu": 42.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "967419",
                    "threadStack": "TID 41640:\n#0  0x0000564d8ed9d5d5 __wt_value_return\n#1  0x0000564d8ed6785c __wt_btcur_next_prefix\n#2  0x0000564d8ecb7ffe __curfile_next\n#3  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn433",
                            "connectionId": 433,
                            "client": "127.0.0.1:48344",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 4027,
                            "lsid": {
                                "id": {
                                    "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9432228"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NI/O4tYSQ/yYOl1I3nijDA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 854,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "856"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "22.47",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41653": {
            "threadId": "41653",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41653",
                    "threadName": "conn443",
                    "threadCpu": 26.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "959920",
                    "threadStack": "TID 41653:\n#0  0x0000564d90ded3d3 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn443",
                            "connectionId": 443,
                            "client": "127.0.0.1:48364",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4049,
                            "lsid": {
                                "id": {
                                    "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2220085"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 429,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "431"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41653",
                    "threadName": "conn443",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "963155",
                    "threadStack": "TID 41653:\n#0  0x0000564d910a0941 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000564d8fc168bc mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn443",
                            "connectionId": 443,
                            "client": "127.0.0.1:48364",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4049,
                            "lsid": {
                                "id": {
                                    "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5990479"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 673,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "675"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41653",
                    "threadName": "conn443",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967275",
                    "threadStack": "TID 41653:\n#0  0x0000564d8ecc99d9 __wt_cursor_get_value\n#1  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn443",
                            "connectionId": 443,
                            "client": "127.0.0.1:48364",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4049,
                            "lsid": {
                                "id": {
                                    "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9419945"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "h9N6Vi1nT0ujY0qI+KxtsA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 890,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "892"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "22.23",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41688": {
            "threadId": "41688",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41688",
                    "threadName": "conn463",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "960086",
                    "threadStack": "TID 41688:\n#0  0x0000564d912fbd01 mongo::FieldRef::getPart(unsigned char) const\n#1  0x0000564d90dee7ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn463",
                            "connectionId": 463,
                            "client": "127.0.0.1:48410",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4081,
                            "lsid": {
                                "id": {
                                    "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2184649"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 478,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "480"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41688",
                    "threadName": "conn463",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "963709",
                    "threadStack": "TID 41688:\n#0  0x0000564d8ecc8421 __wt_cursor_get_key\n#1  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#2  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn463",
                            "connectionId": 463,
                            "client": "127.0.0.1:48410",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4081,
                            "lsid": {
                                "id": {
                                    "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5955047"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 751,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "753"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41688",
                    "threadName": "conn463",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967652",
                    "threadStack": "TID 41688:\n#0  0x0000564d8ed67839 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn463",
                            "connectionId": 463,
                            "client": "127.0.0.1:48410",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4081,
                            "lsid": {
                                "id": {
                                    "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9384488"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KXhffm/ISzuhGwQ5n6e+Gw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 985,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "987"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "21.90",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41550": {
            "threadId": "41550",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41550",
                    "threadName": "conn395",
                    "threadCpu": 34.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "959212",
                    "threadStack": "TID 41550:\n#0  0x0000564d8ecc9414 __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn395",
                            "connectionId": 395,
                            "client": "127.0.0.1:48266",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3955,
                            "lsid": {
                                "id": {
                                    "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2331420"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 559,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "561"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41550",
                    "threadName": "conn395",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "963000",
                    "threadStack": "TID 41550:\n#0  0x0000564d9155854a pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn395",
                            "connectionId": 395,
                            "client": "127.0.0.1:48266",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3955,
                            "lsid": {
                                "id": {
                                    "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6101815"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 820,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "822"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41550",
                    "threadName": "conn395",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966779",
                    "threadStack": "TID 41550:\n#0  0x0000564d90289667 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x0000564d8fc168bc mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn395",
                            "connectionId": 395,
                            "client": "127.0.0.1:48266",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3955,
                            "lsid": {
                                "id": {
                                    "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9531280"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "zUTwtwdgT/yJ/HXqOlrz/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1019,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1021"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ]
                },
                "avgCpu": "21.50",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41650": {
            "threadId": "41650",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41650",
                    "threadName": "conn440",
                    "threadCpu": 30.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "960010",
                    "threadStack": "TID 41650:\n#0  0x0000564d8ec6c826 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn440",
                            "connectionId": 440,
                            "client": "127.0.0.1:48358",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4051,
                            "lsid": {
                                "id": {
                                    "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2215319"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1020,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1022"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41650",
                    "threadName": "conn440",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "962994",
                    "threadStack": "TID 41650:\n#0  0x0000564d8ed65ceb __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn440",
                            "connectionId": 440,
                            "client": "127.0.0.1:48358",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4051,
                            "lsid": {
                                "id": {
                                    "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5985713"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1242,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1244"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41650",
                    "threadName": "conn440",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967547",
                    "threadStack": "TID 41650:\n#0  0x00007f7b60933ab9 __strlen_avx2\n#1  0x0000564d914a6b3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn440",
                            "connectionId": 440,
                            "client": "127.0.0.1:48358",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4051,
                            "lsid": {
                                "id": {
                                    "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9415178"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "5PKtixwnQOOPPCH+I/zh7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1437,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1439"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "21.10",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41444": {
            "threadId": "41444",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41444",
                    "threadName": "conn355",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "958481",
                    "threadStack": "TID 41444:\n#0  0x0000564d902899c3 mongo::WorkingSet::free(unsigned long)\n#1  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn355",
                            "connectionId": 355,
                            "client": "127.0.0.1:48180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3905,
                            "lsid": {
                                "id": {
                                    "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2392424"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 840,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "842"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41444",
                    "threadName": "conn355",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "961965",
                    "threadStack": "TID 41444:\n#0  0x0000564d8ecc7e12 __wt_cursor_get_keyv\n#1  0x0000564d8ecc84cb __wt_cursor_get_key\n#2  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn355",
                            "connectionId": 355,
                            "client": "127.0.0.1:48180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3905,
                            "lsid": {
                                "id": {
                                    "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6162844"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1190,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1192"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41444",
                    "threadName": "conn355",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "965883",
                    "threadStack": "TID 41444:\n#0  0x0000564d9155324f pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn355",
                            "connectionId": 355,
                            "client": "127.0.0.1:48180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3905,
                            "lsid": {
                                "id": {
                                    "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9592284"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XGSHqq7wRPGa5MlnOKp8eA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1563,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1565"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ]
                },
                "avgCpu": "20.63",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41505": {
            "threadId": "41505",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41505",
                    "threadName": "conn376",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "960031",
                    "threadStack": "TID 41505:\n#0  0x0000564d8ecc5d30 __wt_struct_unpackv\n#1  0x0000564d8ecc7eda __wt_cursor_get_keyv\n#2  0x0000564d8ecc84cb __wt_cursor_get_key\n#3  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn376",
                            "connectionId": 376,
                            "client": "127.0.0.1:48226",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3993,
                            "lsid": {
                                "id": {
                                    "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2287232"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 434,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "436"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41505",
                    "threadName": "conn376",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "962963",
                    "threadStack": "TID 41505:\n#0  0x0000564d8ed65ead __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn376",
                            "connectionId": 376,
                            "client": "127.0.0.1:48226",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3993,
                            "lsid": {
                                "id": {
                                    "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6057627"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 612,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "614"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41505",
                    "threadName": "conn376",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967092",
                    "threadStack": "TID 41505:\n#0  0x0000564d8ecb7e9c __curfile_next\n#1  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn376",
                            "connectionId": 376,
                            "client": "127.0.0.1:48226",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3993,
                            "lsid": {
                                "id": {
                                    "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9487091"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "eodWPQaLToqcIkgcN3cnjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 811,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "813"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "20.47",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41652": {
            "threadId": "41652",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41652",
                    "threadName": "conn442",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959957",
                    "threadStack": "TID 41652:\n#0  0x0000564d8ecb7e9c __curfile_next\n#1  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn442",
                            "connectionId": 442,
                            "client": "127.0.0.1:48362",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4044,
                            "lsid": {
                                "id": {
                                    "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2227067"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 690,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "692"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41652",
                    "threadName": "conn442",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "963024",
                    "threadStack": "TID 41652:\n#0  0x0000564d910a4d3a mongo::Document::toBson() const\n#1  0x0000564d8fc155fa mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn442",
                            "connectionId": 442,
                            "client": "127.0.0.1:48362",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4044,
                            "lsid": {
                                "id": {
                                    "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5997461"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 864,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "866"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41652",
                    "threadName": "conn442",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967899",
                    "threadStack": "TID 41652:\n#0  0x00007f7b6092fce8 __memcmp_avx2_movbe\n#1  0x0000564d9149427b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#4  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#5  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#10 0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#11 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#12 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#14 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#17 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#18 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#19 0x0000564d9013326c mongo::Pipeline::getNext()\n#20 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#21 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#22 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#23 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#27 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#28 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#29 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#30 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#31 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#32 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#33 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#34 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#37 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#38 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#39 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#42 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#43 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#44 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#45 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#46 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#47 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#50 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#52 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#53 0x00007f7b6082ab43 start_thread\n#54 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn442",
                            "connectionId": 442,
                            "client": "127.0.0.1:48362",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4044,
                            "lsid": {
                                "id": {
                                    "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9426926"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NY1HMQsgQMCHkGWnK089Fw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1097,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1099"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ]
                },
                "avgCpu": "20.47",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41490": {
            "threadId": "41490",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41490",
                    "threadName": "conn370",
                    "threadCpu": 34.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "959518",
                    "threadStack": "TID 41490:\n#0  0x0000564d8eba8ef7 mongo::FailPoint::shouldFail()\n#1  0x0000564d8ec6e3be mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn370",
                            "connectionId": 370,
                            "client": "127.0.0.1:48214",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3926,
                            "lsid": {
                                "id": {
                                    "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2365411"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 542,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "544"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41490",
                    "threadName": "conn370",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963043",
                    "threadStack": "TID 41490:\n#0  0x0000564d91494b22 mongo::BSONElement::computeSize(signed char, char const*, int)\n#1  0x0000564d914a6b50 mongo::BSONObj::getField(mongo::StringData) const\n#2  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#10 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#16 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#18 0x0000564d9013326c mongo::Pipeline::getNext()\n#19 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f7b6082ab43 start_thread\n#53 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::computeSize": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn370",
                            "connectionId": 370,
                            "client": "127.0.0.1:48214",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3926,
                            "lsid": {
                                "id": {
                                    "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6135810"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 774,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "776"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41490",
                    "threadName": "conn370",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966299",
                    "threadStack": "TID 41490:\n#0  0x0000564d8ed65f72 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn370",
                            "connectionId": 370,
                            "client": "127.0.0.1:48214",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3926,
                            "lsid": {
                                "id": {
                                    "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9565251"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cKNYGU90R8qd9rrLjAsKLg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 994,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "996"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "BSONElement::computeSize"
                    ]
                },
                "avgCpu": "20.20",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41452": {
            "threadId": "41452",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41452",
                    "threadName": "conn357",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "958927",
                    "threadStack": "TID 41452:\n#0  0x0000564d8fc405f0 mongo::ProjectionStage::doWork(unsigned long*)\n#1  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#2  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn357",
                            "connectionId": 357,
                            "client": "127.0.0.1:48184",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3913,
                            "lsid": {
                                "id": {
                                    "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2388592"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 530,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "532"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41452",
                    "threadName": "conn357",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "961745",
                    "threadStack": "TID 41452:\n#0  0x0000564d914a6bc6 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn357",
                            "connectionId": 357,
                            "client": "127.0.0.1:48184",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3913,
                            "lsid": {
                                "id": {
                                    "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6158989"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 836,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "838"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41452",
                    "threadName": "conn357",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966646",
                    "threadStack": "TID 41452:\n#0  0x0000564d8eba845d mongo::StringData::StringData(char const*, unsigned long)\n#1  0x0000564d912fbd78 mongo::FieldRef::getPart(unsigned char) const\n#2  0x0000564d90dee7ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#10 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#16 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#18 0x0000564d9013326c mongo::Pipeline::getNext()\n#19 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f7b6082ab43 start_thread\n#53 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn357",
                            "connectionId": 357,
                            "client": "127.0.0.1:48184",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3913,
                            "lsid": {
                                "id": {
                                    "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9588437"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "moV79y3iTHyyjsrvTRZINA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1062,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1064"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "19.53",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41636": {
            "threadId": "41636",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41636",
                    "threadName": "conn430",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959943",
                    "threadStack": "TID 41636:\n#0  0x0000564d8ecc7d01 __wt_cursor_get_keyv\n#1  0x0000564d8ecc84cb __wt_cursor_get_key\n#2  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn430",
                            "connectionId": 430,
                            "client": "127.0.0.1:48338",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4065,
                            "lsid": {
                                "id": {
                                    "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2197719"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 379,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "381"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41636",
                    "threadName": "conn430",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963750",
                    "threadStack": "TID 41636:\n#0  0x0000564d8ed67839 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn430",
                            "connectionId": 430,
                            "client": "127.0.0.1:48338",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4065,
                            "lsid": {
                                "id": {
                                    "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5968113"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 633,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "635"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41636",
                    "threadName": "conn430",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967334",
                    "threadStack": "TID 41636:\n#0  0x0000564d8ecc84db __wt_cursor_get_key\n#1  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#2  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn430",
                            "connectionId": 430,
                            "client": "127.0.0.1:48338",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4065,
                            "lsid": {
                                "id": {
                                    "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9397579"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "jyhHYyxRTK2TgocMvJUdjA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 907,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "909"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "19.17",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41619": {
            "threadId": "41619",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41619",
                    "threadName": "conn420",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "959898",
                    "threadStack": "TID 41619:\n#0  0x0000564d9028974a mongo::WorkingSetMember::clear()\n#1  0x0000564d902899c8 mongo::WorkingSet::free(unsigned long)\n#2  0x0000564d8fc1582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn420",
                            "connectionId": 420,
                            "client": "127.0.0.1:48318",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4018,
                            "lsid": {
                                "id": {
                                    "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2246457"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 609,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "611"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41619",
                    "threadName": "conn420",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "963095",
                    "threadStack": "TID 41619:\n#0  0x0000564d8fc4b610 mongo::SortStage::doWork(unsigned long*)\n#1  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#6  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#7  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d9013326c mongo::Pipeline::getNext()\n#10 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f7b6082ab43 start_thread\n#44 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn420",
                            "connectionId": 420,
                            "client": "127.0.0.1:48318",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4018,
                            "lsid": {
                                "id": {
                                    "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6016850"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 828,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "830"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41619",
                    "threadName": "conn420",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967610",
                    "threadStack": "TID 41619:\n#0  0x0000564d8fc282de mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn420",
                            "connectionId": 420,
                            "client": "127.0.0.1:48318",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4018,
                            "lsid": {
                                "id": {
                                    "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9446317"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "6ACkc53lTceB3+nV0avioQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1111,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1113"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "19.00",
                "cpuStats": {
                    "cpuTrend": "Thread has increasing cpu utilization over iterations. Its Average CPU is greater than threshold.",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41665": {
            "threadId": "41665",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41665",
                    "threadName": "conn445",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "960146",
                    "threadStack": "TID 41665:\n#0  0x0000564d91494240 mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#1  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#2  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#3  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#4  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#10 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#16 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#18 0x0000564d9013326c mongo::Pipeline::getNext()\n#19 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f7b6082ab43 start_thread\n#53 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn445",
                            "connectionId": 445,
                            "client": "127.0.0.1:48368",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 4067,
                            "lsid": {
                                "id": {
                                    "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2192920"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 480,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "482"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41665",
                    "threadName": "conn445",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "963967",
                    "threadStack": "TID 41665:\n#0  0x0000564d90ded3a4 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#13 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d9013326c mongo::Pipeline::getNext()\n#16 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f7b6082ab43 start_thread\n#50 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn445",
                            "connectionId": 445,
                            "client": "127.0.0.1:48368",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4067,
                            "lsid": {
                                "id": {
                                    "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5963333"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 713,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "715"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41665",
                    "threadName": "conn445",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "967435",
                    "threadStack": "TID 41665:\n#0  0x0000564d8ecc9523 __wt_cursor_get_valuev\n#1  0x0000564d8ecc99e5 __wt_cursor_get_value\n#2  0x0000564d8ec6e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn445",
                            "connectionId": 445,
                            "client": "127.0.0.1:48368",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4067,
                            "lsid": {
                                "id": {
                                    "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9392774"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "B3zM6qYKSAuZ2ztVZrjdAw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 986,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "988"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "19.00",
                "cpuStats": {
                    "cpuTrend": "Thread has increasing cpu utilization over iterations. Its Average CPU is greater than threshold.",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41575": {
            "threadId": "41575",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41575",
                    "threadName": "conn404",
                    "threadCpu": 30.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959416",
                    "threadStack": "TID 41575:\n#0  0x00007f7b6092ff29 __memcmp_avx2_movbe\n#1  0x0000564d914a6bb1 mongo::BSONObj::getField(mongo::StringData) const\n#2  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn404",
                            "connectionId": 404,
                            "client": "127.0.0.1:48284",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3997,
                            "lsid": {
                                "id": {
                                    "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2275335"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 443,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "445"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41575",
                    "threadName": "conn404",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "963281",
                    "threadStack": "TID 41575:\n#0  0x0000564d8ec6c844 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn404",
                            "connectionId": 404,
                            "client": "127.0.0.1:48284",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3997,
                            "lsid": {
                                "id": {
                                    "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6045729"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 772,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "774"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41575",
                    "threadName": "conn404",
                    "threadCpu": 7.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "966392",
                    "threadStack": "TID 41575:\n#0  0x00007f7b60933990 __strlen_avx2\n#1  0x0000564d914a6b3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn404",
                            "connectionId": 404,
                            "client": "127.0.0.1:48284",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3997,
                            "lsid": {
                                "id": {
                                    "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9475226"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "4qJFTMBMRUONa9TZNReziQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 980,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "982"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "18.90",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41476": {
            "threadId": "41476",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41476",
                    "threadName": "conn366",
                    "threadCpu": 21.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "958915",
                    "threadStack": "TID 41476:\n#0  0x0000564d9173954e tc_newarray\n#1  0x0000564d8eba92eb void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)\n#2  0x0000564d8fd2954c mongo::YieldPolicyCallbacksImpl::duringYield(mongo::OperationContext*) const\n#3  0x0000564d8fe0a9dc mongo::PlanYieldPolicy::performYield(mongo::OperationContext*, mongo::Yieldable const*, std::function<void ()>)\n#4  0x0000564d8fe0abf0 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#5  0x0000564d8fc9fcc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn366",
                            "connectionId": 366,
                            "client": "127.0.0.1:48206",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3941,
                            "lsid": {
                                "id": {
                                    "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2350629"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 441,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "443"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41476",
                    "threadName": "conn366",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "962778",
                    "threadStack": "TID 41476:\n#0  0x0000564d91738850 tc_delete_sized\n#1  0x0000564d8fc28328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn366",
                            "connectionId": 366,
                            "client": "127.0.0.1:48206",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3941,
                            "lsid": {
                                "id": {
                                    "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6121031"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 628,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "630"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41476",
                    "threadName": "conn366",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967021",
                    "threadStack": "TID 41476:\n#0  0x0000564d8ed62eee __wt_txn_read\n#1  0x0000564d8ed67828 __wt_btcur_next_prefix\n#2  0x0000564d8ecb7ffe __curfile_next\n#3  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn366",
                            "connectionId": 366,
                            "client": "127.0.0.1:48206",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3941,
                            "lsid": {
                                "id": {
                                    "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9550532"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "xvpzlTZxTkiLbuMn9rdihA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 961,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "963"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "18.40",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41557": {
            "threadId": "41557",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41557",
                    "threadName": "conn398",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "959842",
                    "threadStack": "TID 41557:\n#0  0x0000564d8ec6c7e3 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn398",
                            "connectionId": 398,
                            "client": "127.0.0.1:48272",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.133+05:30",
                            "threaded": true,
                            "opid": 3971,
                            "lsid": {
                                "id": {
                                    "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2309564"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 582,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "584"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41557",
                    "threadName": "conn398",
                    "threadCpu": 19.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "963277",
                    "threadStack": "TID 41557:\n#0  0x0000564d8ed9a0f7 __wt_value_return_buf\n#1  0x0000564d8ed62f77 __wt_txn_read\n#2  0x0000564d8ed67828 __wt_btcur_next_prefix\n#3  0x0000564d8ecb7ffe __curfile_next\n#4  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn398",
                            "connectionId": 398,
                            "client": "127.0.0.1:48272",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3971,
                            "lsid": {
                                "id": {
                                    "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6079978"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 945,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "947"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41557",
                    "threadName": "conn398",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967199",
                    "threadStack": "TID 41557:\n#0  0x0000564d8ed67712 __wt_btcur_next_prefix\n#1  0x0000564d8ecb7ffe __curfile_next\n#2  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn398",
                            "connectionId": 398,
                            "client": "127.0.0.1:48272",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3971,
                            "lsid": {
                                "id": {
                                    "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9509418"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "pTtmb2a7T+SMgYMvRE9V8A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1305,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1307"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "17.87",
                "cpuStats": {
                    "cpuTrend": "Thread has increasing cpu utilization over iterations. Its Average CPU is greater than threshold.",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41681": {
            "threadId": "41681",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41681",
                    "threadName": "conn457",
                    "threadCpu": 26.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "959875",
                    "threadStack": "TID 41681:\n#0  0x0000564d8fe0a9b9 mongo::PlanYieldPolicy::performYield(mongo::OperationContext*, mongo::Yieldable const*, std::function<void ()>)\n#1  0x0000564d8fe0abf0 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#2  0x0000564d8fc9fcc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn457",
                            "connectionId": 457,
                            "client": "127.0.0.1:48398",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4085,
                            "lsid": {
                                "id": {
                                    "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2183279"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 641,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "643"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41681",
                    "threadName": "conn457",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963809",
                    "threadStack": "TID 41681:\n#0  0x0000564d8ecc55c1 __wt_struct_unpackv\n#1  0x0000564d8ecc7eda __wt_cursor_get_keyv\n#2  0x0000564d8ecc84cb __wt_cursor_get_key\n#3  0x0000564d8ec6c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x0000564d8ec6e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn457",
                            "connectionId": 457,
                            "client": "127.0.0.1:48398",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4085,
                            "lsid": {
                                "id": {
                                    "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5953682"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 882,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "884"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41681",
                    "threadName": "conn457",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "967296",
                    "threadStack": "TID 41681:\n#0  0x0000564d910a0a82 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000564d90289628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000564d8fc168bc mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#9  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d9013326c mongo::Pipeline::getNext()\n#12 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f7b6082ab43 start_thread\n#46 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn457",
                            "connectionId": 457,
                            "client": "127.0.0.1:48398",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 4085,
                            "lsid": {
                                "id": {
                                    "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9383180"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "VnLZC4YtRVy07nmCzQG4LA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1046,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1048"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "17.30",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41668": {
            "threadId": "41668",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41668",
                    "threadName": "conn448",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "959329",
                    "threadStack": "TID 41668:\n#0  0x0000564d903abdf6 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn448",
                            "connectionId": 448,
                            "client": "127.0.0.1:48374",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 4083,
                            "lsid": {
                                "id": {
                                    "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2183680"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 344,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "346"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41668",
                    "threadName": "conn448",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "963257",
                    "threadStack": "TID 41668:\n#0  0x0000564d8fca01ce mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#5  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#6  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#8  0x0000564d9013326c mongo::Pipeline::getNext()\n#9  0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f7b6082ab43 start_thread\n#43 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn448",
                            "connectionId": 448,
                            "client": "127.0.0.1:48374",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 4083,
                            "lsid": {
                                "id": {
                                    "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "5"
                            },
                            "microsecs_running": {
                                "$numberLong": "5954074"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 593,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "595"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41668",
                    "threadName": "conn448",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "967123",
                    "threadStack": "TID 41668:\n#0  0x0000564d91552f2b pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn448",
                            "connectionId": 448,
                            "client": "127.0.0.1:48374",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 4083,
                            "lsid": {
                                "id": {
                                    "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9383543"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "1Q+AHBCeSkqPJPulQvBazQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 947,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "949"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "15.30",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41473": {
            "threadId": "41473",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41473",
                    "threadName": "conn365",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959699",
                    "threadStack": "TID 41473:\n#0  0x0000564d9155854a pcre_exec\n#1  0x0000564d9156ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000564d9156ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000564d9156d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000564d903abe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#14 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d9013326c mongo::Pipeline::getNext()\n#17 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f7b6082ab43 start_thread\n#51 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn365",
                            "connectionId": 365,
                            "client": "127.0.0.1:48204",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3924,
                            "lsid": {
                                "id": {
                                    "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2369307"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 388,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "390"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41473",
                    "threadName": "conn365",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "962683",
                    "threadStack": "TID 41473:\n#0  0x0000564d8ec6e67d mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#7  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#8  0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d9013326c mongo::Pipeline::getNext()\n#11 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f7b6082ab43 start_thread\n#45 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn365",
                            "connectionId": 365,
                            "client": "127.0.0.1:48204",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3924,
                            "lsid": {
                                "id": {
                                    "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6139703"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 612,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "614"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41473",
                    "threadName": "conn365",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966819",
                    "threadStack": "TID 41473:\n#0  0x0000564d90dede86 mongo::BSONElementIterator::more()\n#1  0x0000564d8fc2839d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#9  0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#10 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#12 0x0000564d9013326c mongo::Pipeline::getNext()\n#13 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f7b6082ab43 start_thread\n#47 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn365",
                            "connectionId": 365,
                            "client": "127.0.0.1:48204",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3924,
                            "lsid": {
                                "id": {
                                    "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9569201"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ni+QnVDZQ6m1zXQsCliwxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 796,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "798"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "Contains RE Namespace",
                        "RegexMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "14.40",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41493": {
            "threadId": "41493",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41493",
                    "threadName": "conn372",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959777",
                    "threadStack": "TID 41493:\n#0  0x0000564d8ecb7ea3 __curfile_next\n#1  0x0000564d8ec6e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn372",
                            "connectionId": 372,
                            "client": "127.0.0.1:48218",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3943,
                            "lsid": {
                                "id": {
                                    "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2350002"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 584,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "586"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41493",
                    "threadName": "conn372",
                    "threadCpu": 11.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "962743",
                    "threadStack": "TID 41493:\n#0  0x0000564d903abeb1 mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#11 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#12 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d9013326c mongo::Pipeline::getNext()\n#15 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f7b6082ab43 start_thread\n#49 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn372",
                            "connectionId": 372,
                            "client": "127.0.0.1:48218",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3943,
                            "lsid": {
                                "id": {
                                    "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6120396"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 903,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "905"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41493",
                    "threadName": "conn372",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966912",
                    "threadStack": "TID 41493:\n#0  0x0000564d8ec7e930 mongo::WiredTigerRecoveryUnit::getSession()\n#1  0x0000564d8ec6e390 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000564d8fc16725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#10 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#11 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#13 0x0000564d9013326c mongo::Pipeline::getNext()\n#14 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f7b6082ab43 start_thread\n#48 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecoveryUnit::getSession": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn372",
                            "connectionId": 372,
                            "client": "127.0.0.1:48218",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.333+05:30",
                            "threaded": true,
                            "opid": 3943,
                            "lsid": {
                                "id": {
                                    "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9549869"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "WLFZXzMMSoG8lXSD0T4cjQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1135,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1137"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecoveryUnit::getSession",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "14.40",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "41455": {
            "threadId": "41455",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "41455",
                    "threadName": "conn360",
                    "threadCpu": 17.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "959548",
                    "threadStack": "TID 41455:\n#0  0x0000564d914a6b45 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#14 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#15 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#17 0x0000564d9013326c mongo::Pipeline::getNext()\n#18 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f7b6082ab43 start_thread\n#52 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn360",
                            "connectionId": 360,
                            "client": "127.0.0.1:48190",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:17.134+05:30",
                            "threaded": true,
                            "opid": 3914,
                            "lsid": {
                                "id": {
                                    "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "2"
                            },
                            "microsecs_running": {
                                "$numberLong": "2388744"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 543,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "545"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "41455",
                    "threadName": "conn360",
                    "threadCpu": 7.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "962101",
                    "threadStack": "TID 41455:\n#0  0x00007f7b6092fef9 __memcmp_avx2_movbe\n#1  0x0000564d914a6bb1 mongo::BSONObj::getField(mongo::StringData) const\n#2  0x0000564d90dee7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x0000564d90ded3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x0000564d8fc174b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x0000564d8fc2826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#10 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#15 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#16 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#18 0x0000564d9013326c mongo::Pipeline::getNext()\n#19 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f7b6082ab43 start_thread\n#53 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn360",
                            "connectionId": 360,
                            "client": "127.0.0.1:48190",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:20.904+05:30",
                            "threaded": true,
                            "opid": 3914,
                            "lsid": {
                                "id": {
                                    "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "6"
                            },
                            "microsecs_running": {
                                "$numberLong": "6159147"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 754,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "756"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "41455",
                    "threadName": "conn360",
                    "threadCpu": 14.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "966622",
                    "threadStack": "TID 41455:\n#0  0x00007f7b6092fce4 __memcmp_avx2_movbe\n#1  0x0000564d9149427b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x0000564d91497705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x0000564d91497f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#4  0x0000564d903afb5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#5  0x0000564d903abefe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000564d8fc28304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000564d8fc15613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x0000564d8fc168ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x0000564d8fc40503 mongo::ProjectionStage::doWork(unsigned long*)\n#10 0x0000564d8fc4b6ad mongo::SortStage::doWork(unsigned long*)\n#11 0x0000564d8fc9fd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#12 0x0000564d8fca0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x0000564d8fc6bf57 mongo::DocumentSourceCursor::loadBatch()\n#14 0x0000564d8fc6c2f8 mongo::DocumentSourceCursor::doGetNext()\n#15 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#16 0x0000564d900ba25d mongo::DocumentSourceGroup::initialize()\n#17 0x0000564d900ba379 mongo::DocumentSourceGroup::doGetNext()\n#18 0x0000564d8f88bfd8 mongo::DocumentSource::getNext()\n#19 0x0000564d9013326c mongo::Pipeline::getNext()\n#20 0x0000564d8fc75349 mongo::PlanExecutorPipeline::_getNext()\n#21 0x0000564d8fc753ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#22 0x0000564d8fc7556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#23 0x0000564d8f724c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000564d8f71a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x0000564d9033774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000564d9033c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#27 0x0000564d8ebd6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#28 0x0000564d8ebe8f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#29 0x0000564d8ebe97e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#30 0x0000564d8ebe9d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#31 0x0000564d8ebdaf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#32 0x0000564d8ebdcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#33 0x0000564d8ebe5c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#34 0x0000564d8ebe7df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x0000564d8ebec1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#37 0x0000564d8ebdf5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#38 0x0000564d8eba2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#39 0x0000564d8ebe65ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x0000564d8ebe701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x0000564d8ebe7d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#42 0x0000564d8ebe1fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#43 0x0000564d8ebd1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#44 0x0000564d8ec29097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#45 0x0000564d8ec293c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#46 0x0000564d8ec2bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#47 0x0000564d8ec2c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x0000564d90cc79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x0000564d8f30bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#50 0x0000564d90cc7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#51 0x0000564d90ccba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#52 0x0000564d90ccba9c mongo::(anonymous namespace)::runFunc(void*)\n#53 0x00007f7b6082ab43 start_thread\n#54 0x00007f7b608bca00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn360",
                            "connectionId": 360,
                            "client": "127.0.0.1:48190",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-05T08:29:24.334+05:30",
                            "threaded": true,
                            "opid": 3914,
                            "lsid": {
                                "id": {
                                    "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "9"
                            },
                            "microsecs_running": {
                                "$numberLong": "9588649"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "k9CQOS+6T5GGkfzyTtC4/A==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 932,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "934"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "CollectionScan",
                        "SortStage"
                    ],
                    "ExpressionMatching": [
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::compareElements",
                        "BSONElement::woCompare"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "13.13",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        }
    },
    "success": "Success"
}