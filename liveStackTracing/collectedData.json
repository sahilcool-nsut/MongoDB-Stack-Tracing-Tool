{
    "threads": {
        "61189": {
            "threadId": "61189",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61189",
                    "threadName": "conn2485",
                    "threadCpu": 22.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "746857",
                    "threadStack": "TID 61189:\n#0  0x00005570f1588b3f bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#1  0x00005570f1584efe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#2  0x00005570f0e01304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x00005570f0dee613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x00005570f0def8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#7  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#12 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#13 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#15 0x00005570f130c26c mongo::Pipeline::getNext()\n#16 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f9feb4a8b43 start_thread\n#50 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2485",
                            "connectionId": 2485,
                            "client": "127.0.0.1:56068",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.073+05:30",
                            "threaded": true,
                            "opid": 83007,
                            "lsid": {
                                "id": {
                                    "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25450559"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1713,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1715"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61189",
                    "threadName": "conn2485",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "752886",
                    "threadStack": "TID 61189:\n#0  0x00005570eff3bb2e __wt_txn_read\n#1  0x00005570eff40828 __wt_btcur_next_prefix\n#2  0x00005570efe90ffe __curfile_next\n#3  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#7  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#12 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#13 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#15 0x00005570f130c26c mongo::Pipeline::getNext()\n#16 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f9feb4a8b43 start_thread\n#50 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2485",
                            "connectionId": 2485,
                            "client": "127.0.0.1:56068",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.933+05:30",
                            "threaded": true,
                            "opid": 83007,
                            "lsid": {
                                "id": {
                                    "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30310166"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1814,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1816"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61189",
                    "threadName": "conn2485",
                    "threadCpu": 64.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "758355",
                    "threadStack": "TID 61189:\n#0  0x00005570f2670458 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#1  0x00005570f2670f59 mongo::BSONElement::woCompare(mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*) const\n#2  0x00005570f1588b5c bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#3  0x00005570f1584efe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#4  0x00005570f0e01304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x00005570f0dee613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x00005570f0def8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#9  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#14 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#15 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#17 0x00005570f130c26c mongo::Pipeline::getNext()\n#18 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f9feb4a8b43 start_thread\n#52 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "InMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            },
                            "BSONElement::compareElements": {
                                "FoundInStack": "True"
                            },
                            "BSONElement::woCompare": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2485",
                            "connectionId": 2485,
                            "client": "127.0.0.1:56068",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.675+05:30",
                            "threaded": true,
                            "opid": 83007,
                            "lsid": {
                                "id": {
                                    "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "37"
                            },
                            "microsecs_running": {
                                "$numberLong": "37052599"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "3SO1V/ZXSzuYvmSHmixNVQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2104,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2106"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "SortStage",
                        "CollectionScan",
                        "ProjectionStage"
                    ],
                    "ExpressionMatching": [
                        "BSONElement::compareElements",
                        "InMatchExpression",
                        "PathMatchExpression",
                        "BSONElement::woCompare"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "32.93",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "61075": {
            "threadId": "61075",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61075",
                    "threadName": "conn2432",
                    "threadCpu": 11.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "746333",
                    "threadStack": "TID 61075:\n#0  0x00005570f1462dcc mongo::WorkingSet::allocate()\n#1  0x00005570f0def836 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#7  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#8  0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f130c26c mongo::Pipeline::getNext()\n#11 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f9feb4a8b43 start_thread\n#45 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2432",
                            "connectionId": 2432,
                            "client": "127.0.0.1:55956",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.073+05:30",
                            "threaded": true,
                            "opid": 82909,
                            "lsid": {
                                "id": {
                                    "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25622475"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1654,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1656"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61075",
                    "threadName": "conn2432",
                    "threadCpu": 45.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "752016",
                    "threadStack": "TID 61075:\n#0  0x00005570eff3ec20 __wt_btcur_next_prefix\n#1  0x00005570efe90ffe __curfile_next\n#2  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#9  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#10 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#12 0x00005570f130c26c mongo::Pipeline::getNext()\n#13 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f9feb4a8b43 start_thread\n#47 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2432",
                            "connectionId": 2432,
                            "client": "127.0.0.1:55956",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.933+05:30",
                            "threaded": true,
                            "opid": 82909,
                            "lsid": {
                                "id": {
                                    "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30481889"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1840,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1842"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61075",
                    "threadName": "conn2432",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "757280",
                    "threadStack": "TID 61075:\n#0  0x00005570f1fc6c1d mongo::BSONElementIterator::subCursorHasMore()\n#1  0x00005570f1fc6eab mongo::BSONElementIterator::more()\n#2  0x00005570f0e0139d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x00005570f0dee613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x00005570f0def8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2432",
                            "connectionId": 2432,
                            "client": "127.0.0.1:55956",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.675+05:30",
                            "threaded": true,
                            "opid": 82909,
                            "lsid": {
                                "id": {
                                    "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "37"
                            },
                            "microsecs_running": {
                                "$numberLong": "37224521"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "t+mkqhniS+CkpK2ujOqI7Q==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2003,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2005"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "24.10",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "61061": {
            "threadId": "61061",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61061",
                    "threadName": "conn2427",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "746377",
                    "threadStack": "TID 61061:\n#0  0x00005570efe91117 __curfile_next\n#1  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2427",
                            "connectionId": 2427,
                            "client": "127.0.0.1:55946",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.073+05:30",
                            "threaded": true,
                            "opid": 82880,
                            "lsid": {
                                "id": {
                                    "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25660972"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1757,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1759"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61061",
                    "threadName": "conn2427",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "751940",
                    "threadStack": "TID 61061:\n#0  0x00005570f0e19547 mongo::ProjectionStage::doWork(unsigned long*)\n#1  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#2  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#7  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#8  0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f130c26c mongo::Pipeline::getNext()\n#11 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f9feb4a8b43 start_thread\n#45 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2427",
                            "connectionId": 2427,
                            "client": "127.0.0.1:55946",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.932+05:30",
                            "threaded": true,
                            "opid": 82880,
                            "lsid": {
                                "id": {
                                    "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30520632"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2022,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2024"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61061",
                    "threadName": "conn2427",
                    "threadCpu": 15.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "757418",
                    "threadStack": "TID 61061:\n#0  0x00005570efe90eb5 __curfile_next\n#1  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2427",
                            "connectionId": 2427,
                            "client": "127.0.0.1:55946",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.675+05:30",
                            "threaded": true,
                            "opid": 82880,
                            "lsid": {
                                "id": {
                                    "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "37"
                            },
                            "microsecs_running": {
                                "$numberLong": "37262989"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "RXWIrWz5T2iiNTjoB8VNww==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2141,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2143"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "SortStage",
                        "CollectionScan",
                        "ProjectionStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "19.03",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "61310": {
            "threadId": "61310",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61310",
                    "threadName": "conn2538",
                    "threadCpu": 18.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "746919",
                    "threadStack": "TID 61310:\n#0  0x00005570efe45839 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x00005570efe475c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#8  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#9  0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#11 0x00005570f130c26c mongo::Pipeline::getNext()\n#12 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f9feb4a8b43 start_thread\n#46 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2538",
                            "connectionId": 2538,
                            "client": "127.0.0.1:56180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.073+05:30",
                            "threaded": true,
                            "opid": 83078,
                            "lsid": {
                                "id": {
                                    "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25307880"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2388,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2390"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61310",
                    "threadName": "conn2538",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "753728",
                    "threadStack": "TID 61310:\n#0  0x00005570f1fc7771 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#1  0x00005570f1fc63d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#2  0x00005570f0df04b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#3  0x00005570f0e0126a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#4  0x00005570f0dee613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x00005570f0def8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#11 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#12 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#14 0x00005570f130c26c mongo::Pipeline::getNext()\n#15 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f9feb4a8b43 start_thread\n#49 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2538",
                            "connectionId": 2538,
                            "client": "127.0.0.1:56180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.933+05:30",
                            "threaded": true,
                            "opid": 83078,
                            "lsid": {
                                "id": {
                                    "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30167462"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2511,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2513"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61310",
                    "threadName": "conn2538",
                    "threadCpu": 20.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "758306",
                    "threadStack": "TID 61310:\n#0  0x00005570efea264a __wt_cursor_get_valuev\n#1  0x00005570efea29e5 __wt_cursor_get_value\n#2  0x00005570efe476b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#9  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#10 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#12 0x00005570f130c26c mongo::Pipeline::getNext()\n#13 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f9feb4a8b43 start_thread\n#47 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2538",
                            "connectionId": 2538,
                            "client": "127.0.0.1:56180",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.675+05:30",
                            "threaded": true,
                            "opid": 83078,
                            "lsid": {
                                "id": {
                                    "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "36"
                            },
                            "microsecs_running": {
                                "$numberLong": "36909922"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dkokJzV3TtS8VD3X/PxmZA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2643,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2645"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "17.17",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "61064": {
            "threadId": "61064",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61064",
                    "threadName": "conn2428",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "746435",
                    "threadStack": "TID 61064:\n#0  0x00005570efe91141 __curfile_next\n#1  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2428",
                            "connectionId": 2428,
                            "client": "127.0.0.1:55948",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.073+05:30",
                            "threaded": true,
                            "opid": 82876,
                            "lsid": {
                                "id": {
                                    "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25666530"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2326,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2328"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61064",
                    "threadName": "conn2428",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "753078",
                    "threadStack": "TID 61064:\n#0  0x00005570efea2952 __wt_cursor_get_value\n#1  0x00005570efe476b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2428",
                            "connectionId": 2428,
                            "client": "127.0.0.1:55948",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.932+05:30",
                            "threaded": true,
                            "opid": 82876,
                            "lsid": {
                                "id": {
                                    "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30526261"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2476,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2478"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61064",
                    "threadName": "conn2428",
                    "threadCpu": 12.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "757885",
                    "threadStack": "TID 61064:\n#0  0x00005570eff3c738 __wt_btcur_skip_page.part.9\n#1  0x00005570eff3d6c2 __wt_btcur_skip_page\n#2  0x00005570effa0a91 __tree_walk_internal\n#3  0x00005570eff3fbb0 __wt_btcur_next_prefix\n#4  0x00005570efe90ffe __curfile_next\n#5  0x00005570efe473e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#6  0x00005570f0def725 mongo::CollectionScan::doWork(unsigned long*)\n#7  0x00005570f0e19503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x00005570f0e246ad mongo::SortStage::doWork(unsigned long*)\n#9  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#14 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#15 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#17 0x00005570f130c26c mongo::Pipeline::getNext()\n#18 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f9feb4a8b43 start_thread\n#52 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2428",
                            "connectionId": 2428,
                            "client": "127.0.0.1:55948",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.675+05:30",
                            "threaded": true,
                            "opid": 82876,
                            "lsid": {
                                "id": {
                                    "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "37"
                            },
                            "microsecs_running": {
                                "$numberLong": "37268547"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "NpLFAIa7QNeTT0CGDmTGhw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2590,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2592"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "SortStage",
                        "CollectionScan",
                        "ProjectionStage"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "12.77",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "61288": {
            "threadId": "61288",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "61288",
                    "threadName": "conn2523",
                    "threadCpu": 13.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "747312",
                    "threadStack": "TID 61288:\n#0  0x00005570efef8aad __session_rollback_transaction\n#1  0x00005570efe55b9f mongo::WiredTigerRecoveryUnit::_txnClose(bool)\n#2  0x00005570efe56d67 mongo::WiredTigerRecoveryUnit::doAbandonSnapshot()\n#3  0x00005570f0fe39c2 mongo::PlanYieldPolicy::performYield(mongo::OperationContext*, mongo::Yieldable const*, std::function<void ()>)\n#4  0x00005570f0fe3bf0 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#5  0x00005570f0e78cc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#10 0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#11 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#13 0x00005570f130c26c mongo::Pipeline::getNext()\n#14 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f9feb4a8b43 start_thread\n#48 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecoveryUnit::_txnClose": "Found in stack",
                            "WiredTigerRecoveryUnit::doAbandonSnapshot": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2523",
                            "connectionId": 2523,
                            "client": "127.0.0.1:56150",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:03.074+05:30",
                            "threaded": true,
                            "opid": 83071,
                            "lsid": {
                                "id": {
                                    "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "25"
                            },
                            "microsecs_running": {
                                "$numberLong": "25311878"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1756,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1758"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "61288",
                    "threadName": "conn2523",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "753604",
                    "threadStack": "TID 61288:\n#0  0x00005570f0fe3843 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#1  0x00005570f0e78c93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#6  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#7  0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#9  0x00005570f130c26c mongo::Pipeline::getNext()\n#10 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f9feb4a8b43 start_thread\n#44 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2523",
                            "connectionId": 2523,
                            "client": "127.0.0.1:56150",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:07.933+05:30",
                            "threaded": true,
                            "opid": 83071,
                            "lsid": {
                                "id": {
                                    "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "30"
                            },
                            "microsecs_running": {
                                "$numberLong": "30171099"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1862,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1864"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "61288",
                    "threadName": "conn2523",
                    "threadCpu": 10.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "758027",
                    "threadStack": "TID 61288:\n#0  0x00005570f1fc6e80 mongo::BSONElementIterator::more()\n#1  0x00005570f0e0139d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x00005570f0dee613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x00005570f0def8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005570f0e78d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005570f0e79acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x00005570f0e44f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x00005570f0e452f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#9  0x00005570f129325d mongo::DocumentSourceGroup::initialize()\n#10 0x00005570f1293379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005570f0a64fd8 mongo::DocumentSource::getNext()\n#12 0x00005570f130c26c mongo::Pipeline::getNext()\n#13 0x00005570f0e4e349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005570f0e4e3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x00005570f0e4e56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x00005570f08fdc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x00005570f08f39c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x00005570f151074f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x00005570f15158be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005570efdaf907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x00005570efdc1f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005570efdc27e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x00005570efdc2d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005570efdb3f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005570efdb5fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x00005570efdbec00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x00005570efdc0df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x00005570efdc51a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005570efdb85fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005570efd7b967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005570efdbf5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x00005570efdc001e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x00005570efdc0d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x00005570efdbafe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005570efdaae4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x00005570efe02097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005570efe023c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x00005570efe04d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x00005570efe0522f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005570f1ea09c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005570f04e4ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005570f1ea0b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005570f1ea4a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005570f1ea4a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f9feb4a8b43 start_thread\n#47 0x00007f9feb53aa00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2523",
                            "connectionId": 2523,
                            "client": "127.0.0.1:56150",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T09:39:14.676+05:30",
                            "threaded": true,
                            "opid": 83071,
                            "lsid": {
                                "id": {
                                    "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "36"
                            },
                            "microsecs_running": {
                                "$numberLong": "36913898"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AiPV94nORsiiFKKdf80SNQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1978,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1980"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecoveryUnit::_txnClose",
                        "WiredTigerRecoveryUnit::doAbandonSnapshot"
                    ],
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "11.93",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations, but the difference wasn't large",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        }
    },
    "success": "Success"
}