{
    "threads": {
        "6027": {
            "threadId": "6027",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "6027",
                    "threadName": "conn1",
                    "threadCpu": 0.0,
                    "threadState": "S",
                    "threadStackTimeStamp": "565914",
                    "threadStack": "TID 6027:\n#0  0x00007f0d544e39ef recvmsg\n#1  0x0000564173814522 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)\n#2  0x00005641738145d8 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)\n#3  0x0000564173353073 mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#4  0x00005641733611aa mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#5  0x000056417334a6b7 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)\n#6  0x000056417334aa0a mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()\n#7  0x000056417127d00d mongo::transport::ServiceStateMachine::Impl::sourceMessage()\n#8  0x000056417127ee72 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#9  0x000056417127f22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#10 0x000056417331a9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#11 0x000056417195eed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#12 0x000056417331ab7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#13 0x000056417331ea2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#14 0x000056417331ea9c mongo::(anonymous namespace)::runFunc(void*)\n#15 0x00007f0d54450b43 start_thread\n#16 0x00007f0d544e2a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "DistinctCommand": "True"
                        },
                        "ConcurrencyRelated": {
                            "Description": "This section includes the commands which may be related to concurrency operations etc.",
                            "lock": "Lock related operation found in stack",
                            "__lll_lock_wait": "Lock waiting operation found in stack"
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "6027",
                    "threadName": "conn1",
                    "threadCpu": 0.0,
                    "threadState": "S",
                    "threadStackTimeStamp": "566446",
                    "threadStack": "TID 6027:\n#0  0x00007f0d544e39ef recvmsg\n#1  0x0000564173814522 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)\n#2  0x00005641738145d8 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)\n#3  0x0000564173353073 mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#4  0x00005641733611aa mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#5  0x000056417334a6b7 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)\n#6  0x000056417334aa0a mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()\n#7  0x000056417127d00d mongo::transport::ServiceStateMachine::Impl::sourceMessage()\n#8  0x000056417127ee72 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#9  0x000056417127f22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#10 0x000056417331a9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#11 0x000056417195eed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#12 0x000056417331ab7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#13 0x000056417331ea2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#14 0x000056417331ea9c mongo::(anonymous namespace)::runFunc(void*)\n#15 0x00007f0d54450b43 start_thread\n#16 0x00007f0d544e2a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "DistinctCommand": "True"
                        },
                        "ConcurrencyRelated": {
                            "Description": "This section includes the commands which may be related to concurrency operations etc.",
                            "lock": "Lock related operation found in stack",
                            "__lll_lock_wait": "Lock waiting operation found in stack"
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "6027",
                    "threadName": "conn1",
                    "threadCpu": 0.0,
                    "threadState": "S",
                    "threadStackTimeStamp": "566948",
                    "threadStack": "TID 6027:\n#0  0x00007f0d544e39ef recvmsg\n#1  0x0000564173814522 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)\n#2  0x00005641738145d8 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)\n#3  0x0000564173353073 mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#4  0x00005641733611aa mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)\n#5  0x000056417334a6b7 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)\n#6  0x000056417334aa0a mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()\n#7  0x000056417127d00d mongo::transport::ServiceStateMachine::Impl::sourceMessage()\n#8  0x000056417127ee72 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#9  0x000056417127f22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#10 0x000056417331a9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#11 0x000056417195eed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#12 0x000056417331ab7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#13 0x000056417331ea2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#14 0x000056417331ea9c mongo::(anonymous namespace)::runFunc(void*)\n#15 0x00007f0d54450b43 start_thread\n#16 0x00007f0d544e2a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "DistinctCommand": "True"
                        },
                        "ConcurrencyRelated": {
                            "Description": "This section includes the commands which may be related to concurrency operations etc.",
                            "lock": "Lock related operation found in stack",
                            "__lll_lock_wait": "Lock waiting operation found in stack"
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "CommandFoundInStack": [
                        "DistinctCommand"
                    ],
                    "ConcurrencyRelated": [
                        "lock",
                        "__lll_lock_wait"
                    ]
                },
                "avgCpu": "0.00",
                "cpuTrend": "Thread has equal CPU for each iteration, but its average CPU remains lower than threshold.",
                "stacksOverIterations": "Stacks were same over all iterations"
            }
        }
    },
    "success": "Success"
}