{
    "threads": {
        "24477": {
            "threadId": "24477",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24477",
                    "threadName": "conn1816",
                    "threadCpu": 99.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "578137",
                    "threadStack": "TID 24477:\n#0  0x0000557908dc6bc6 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055790870e7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055790870d3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x00005579075374b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055790754826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#9  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#14 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#15 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#17 0x0000557907a5326c mongo::Pipeline::getNext()\n#18 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f4b89265b43 start_thread\n#52 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1816",
                            "connectionId": 1816,
                            "client": "127.0.0.1:48748",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47173,
                            "lsid": {
                                "id": {
                                    "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13152885"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1816,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1818"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24477",
                    "threadName": "conn1816",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "584845",
                    "threadStack": "TID 24477:\n#0  0x00005579065e92ab __wt_cursor_get_valuev\n#1  0x00005579065e99e5 __wt_cursor_get_value\n#2  0x000055790658e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#12 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#14 0x0000557907a5326c mongo::Pipeline::getNext()\n#15 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f4b89265b43 start_thread\n#49 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1816",
                            "connectionId": 1816,
                            "client": "127.0.0.1:48748",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.859+05:30",
                            "threaded": true,
                            "opid": 47173,
                            "lsid": {
                                "id": {
                                    "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20763184"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2002,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2004"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24477",
                    "threadName": "conn1816",
                    "threadCpu": 87.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "592495",
                    "threadStack": "TID 24477:\n#0  0x00005579066bd5d1 __wt_value_return\n#1  0x000055790668785c __wt_btcur_next_prefix\n#2  0x00005579065d7ffe __curfile_next\n#3  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#13 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#15 0x0000557907a5326c mongo::Pipeline::getNext()\n#16 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f4b89265b43 start_thread\n#50 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1816",
                            "connectionId": 1816,
                            "client": "127.0.0.1:48748",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47173,
                            "lsid": {
                                "id": {
                                    "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27440924"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "mkWBubVwSmqHs1iOn3BiHw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2381,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2383"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "68.03",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24651": {
            "threadId": "24651",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24651",
                    "threadName": "conn1890",
                    "threadCpu": 36.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "579743",
                    "threadStack": "TID 24651:\n#0  0x000055790753671f mongo::CollectionScan::doWork(unsigned long*)\n#1  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#2  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1890",
                            "connectionId": 1890,
                            "client": "127.0.0.1:48902",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47297,
                            "lsid": {
                                "id": {
                                    "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13005438"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1428,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1430"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24651",
                    "threadName": "conn1890",
                    "threadCpu": 99.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "586283",
                    "threadStack": "TID 24651:\n#0  0x00005579065d7ff4 __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1890",
                            "connectionId": 1890,
                            "client": "127.0.0.1:48902",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.859+05:30",
                            "threaded": true,
                            "opid": 47297,
                            "lsid": {
                                "id": {
                                    "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20615813"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1945,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1947"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24651",
                    "threadName": "conn1890",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "594047",
                    "threadStack": "TID 24651:\n#0  0x0000557907c09e63 mongo::ResourceConsumption::MetricsCollector::incrementOneDocRead(unsigned long)\n#1  0x000055790658e6d4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1890",
                            "connectionId": 1890,
                            "client": "127.0.0.1:48902",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47297,
                            "lsid": {
                                "id": {
                                    "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27293477"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "XjBTsupqQ6yBhSrTGSjnOQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2082,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2084"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "49.60",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24540": {
            "threadId": "24540",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24540",
                    "threadName": "conn1842",
                    "threadCpu": 81.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "578066",
                    "threadStack": "TID 24540:\n#0  0x0000557908e7304f pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1842",
                            "connectionId": 1842,
                            "client": "127.0.0.1:48800",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47214,
                            "lsid": {
                                "id": {
                                    "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13119200"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1162,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1164"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24540",
                    "threadName": "conn1842",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "585062",
                    "threadStack": "TID 24540:\n#0  0x00005579065e7d01 __wt_cursor_get_keyv\n#1  0x00005579065e84cb __wt_cursor_get_key\n#2  0x000055790658c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1842",
                            "connectionId": 1842,
                            "client": "127.0.0.1:48800",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47214,
                            "lsid": {
                                "id": {
                                    "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20729891"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1355,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1357"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24540",
                    "threadName": "conn1842",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "593290",
                    "threadStack": "TID 24540:\n#0  0x0000557906685c7c __wt_btcur_next_prefix\n#1  0x00005579065d7ffe __curfile_next\n#2  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1842",
                            "connectionId": 1842,
                            "client": "127.0.0.1:48800",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47214,
                            "lsid": {
                                "id": {
                                    "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27407244"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "oEkKppGfQkWt4I34WHe4Cw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1489,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1491"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "RegexMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "41.13",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24877": {
            "threadId": "24877",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24877",
                    "threadName": "conn1986",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "580190",
                    "threadStack": "TID 24877:\n#0  0x000055790870d37d mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x00005579075374b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x000055790754826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#7  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#13 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#15 0x0000557907a5326c mongo::Pipeline::getNext()\n#16 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f4b89265b43 start_thread\n#50 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1986",
                            "connectionId": 1986,
                            "client": "127.0.0.1:49110",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47440,
                            "lsid": {
                                "id": {
                                    "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "12"
                            },
                            "microsecs_running": {
                                "$numberLong": "12717433"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1355,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1357"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24877",
                    "threadName": "conn1986",
                    "threadCpu": 29.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "587675",
                    "threadStack": "TID 24877:\n#0  0x00005579089c49d1 mongo::Document::toBson() const\n#1  0x00005579075355fa mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1986",
                            "connectionId": 1986,
                            "client": "127.0.0.1:49110",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47440,
                            "lsid": {
                                "id": {
                                    "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20328204"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1519,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1521"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24877",
                    "threadName": "conn1986",
                    "threadCpu": 58.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "595427",
                    "threadStack": "TID 24877:\n#0  0x00005579089c0948 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000557907ba9628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x0000557907ba98a0 mongo::WorkingSetMember::clear()\n#3  0x0000557907ba99c8 mongo::WorkingSet::free(unsigned long)\n#4  0x000055790753582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1986",
                            "connectionId": 1986,
                            "client": "127.0.0.1:49110",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47440,
                            "lsid": {
                                "id": {
                                    "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27005477"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "nBJNMrH8SFi9H6A/4ZyMkQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1756,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1758"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "36.73",
                "cpuStats": {
                    "cpuTrend": "Thread has increasing cpu utilization over iterations. Its Average CPU is greater than threshold.",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24486": {
            "threadId": "24486",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24486",
                    "threadName": "conn1821",
                    "threadCpu": 45.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "578293",
                    "threadStack": "TID 24486:\n#0  0x0000557908dc6af8 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055790870e7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055790870d3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x00005579075374b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055790754826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#13 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#15 0x0000557907a5326c mongo::Pipeline::getNext()\n#16 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f4b89265b43 start_thread\n#50 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1821",
                            "connectionId": 1821,
                            "client": "127.0.0.1:48758",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47180,
                            "lsid": {
                                "id": {
                                    "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13150673"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1440,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1442"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24486",
                    "threadName": "conn1821",
                    "threadCpu": 29.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "585567",
                    "threadStack": "TID 24486:\n#0  0x0000557908e7348d pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1821",
                            "connectionId": 1821,
                            "client": "127.0.0.1:48758",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47180,
                            "lsid": {
                                "id": {
                                    "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20761171"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1733,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1735"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24486",
                    "threadName": "conn1821",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "592395",
                    "threadStack": "TID 24486:\n#0  0x00005579075482b9 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1821",
                            "connectionId": 1821,
                            "client": "127.0.0.1:48758",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47180,
                            "lsid": {
                                "id": {
                                    "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27438714"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "+pVZ4BSlQgWzfIFr7Vw2ZQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1836,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1838"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "RegexMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "29.07",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24613": {
            "threadId": "24613",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24613",
                    "threadName": "conn1870",
                    "threadCpu": 36.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "578170",
                    "threadStack": "TID 24613:\n#0  0x000055790658e394 mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#7  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#8  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x0000557907a5326c mongo::Pipeline::getNext()\n#11 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f4b89265b43 start_thread\n#45 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1870",
                            "connectionId": 1870,
                            "client": "127.0.0.1:48860",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47286,
                            "lsid": {
                                "id": {
                                    "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13027344"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1376,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1378"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24613",
                    "threadName": "conn1870",
                    "threadCpu": 29.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "586739",
                    "threadStack": "TID 24613:\n#0  0x0000557909058807 tc_delete_sized\n#1  0x0000557907548328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1870",
                            "connectionId": 1870,
                            "client": "127.0.0.1:48860",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.861+05:30",
                            "threaded": true,
                            "opid": 47286,
                            "lsid": {
                                "id": {
                                    "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20638888"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1751,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1753"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24613",
                    "threadName": "conn1870",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "594756",
                    "threadStack": "TID 24613:\n#0  0x00005579064c8ed8 mongo::FailPoint::shouldFail()\n#1  0x000055790658e3be mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1870",
                            "connectionId": 1870,
                            "client": "127.0.0.1:48860",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47286,
                            "lsid": {
                                "id": {
                                    "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27315391"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "Q/l6n1GPRUeNhmWQltNnxg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1877,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1879"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "27.43",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24535": {
            "threadId": "24535",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24535",
                    "threadName": "conn1840",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "578803",
                    "threadStack": "TID 24535:\n#0  0x000055790658c84c mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1840",
                            "connectionId": 1840,
                            "client": "127.0.0.1:48796",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47210,
                            "lsid": {
                                "id": {
                                    "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13123358"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1112,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1114"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24535",
                    "threadName": "conn1840",
                    "threadCpu": 50.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "586570",
                    "threadStack": "TID 24535:\n#0  0x0000557907ba965a mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x00005579075368bc mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1840",
                            "connectionId": 1840,
                            "client": "127.0.0.1:48796",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.861+05:30",
                            "threaded": true,
                            "opid": 47210,
                            "lsid": {
                                "id": {
                                    "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20734862"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1257,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1259"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24535",
                    "threadName": "conn1840",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "592373",
                    "threadStack": "TID 24535:\n#0  0x00005579089c09a6 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x0000557907ba9628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x00005579075368bc mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1840",
                            "connectionId": 1840,
                            "client": "127.0.0.1:48796",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47210,
                            "lsid": {
                                "id": {
                                    "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27411405"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "csV4OsSdQL2jCUlzcF0aLQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1384,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1386"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "26.90",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24514": {
            "threadId": "24514",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24514",
                    "threadName": "conn1830",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "578062",
                    "threadStack": "TID 24514:\n#0  0x0000557908e72f0a pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1830",
                            "connectionId": 1830,
                            "client": "127.0.0.1:48776",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47202,
                            "lsid": {
                                "id": {
                                    "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13134580"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1136,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1138"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24514",
                    "threadName": "conn1830",
                    "threadCpu": 41.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "585330",
                    "threadStack": "TID 24514:\n#0  0x00005579075482b9 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1830",
                            "connectionId": 1830,
                            "client": "127.0.0.1:48776",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.862+05:30",
                            "threaded": true,
                            "opid": 47202,
                            "lsid": {
                                "id": {
                                    "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20746507"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1345,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1347"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24514",
                    "threadName": "conn1830",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "592441",
                    "threadStack": "TID 24514:\n#0  0x0000557906687844 __wt_btcur_next_prefix\n#1  0x00005579065d7ffe __curfile_next\n#2  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1830",
                            "connectionId": 1830,
                            "client": "127.0.0.1:48776",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47202,
                            "lsid": {
                                "id": {
                                    "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27422637"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "ec1snmmUS4GgTRXxghLdGQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1504,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1506"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "RegexMatchExpression",
                        "PathMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "25.63",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24567": {
            "threadId": "24567",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24567",
                    "threadName": "conn1851",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "577193",
                    "threadStack": "TID 24567:\n#0  0x0000557908e8d268 pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#1  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#2  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1851",
                            "connectionId": 1851,
                            "client": "127.0.0.1:48820",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47232,
                            "lsid": {
                                "id": {
                                    "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13076940"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1385,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1387"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24567",
                    "threadName": "conn1851",
                    "threadCpu": 45.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "586819",
                    "threadStack": "TID 24567:\n#0  0x000055790658c7da mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1851",
                            "connectionId": 1851,
                            "client": "127.0.0.1:48820",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.859+05:30",
                            "threaded": true,
                            "opid": 47232,
                            "lsid": {
                                "id": {
                                    "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20687300"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1612,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1614"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24567",
                    "threadName": "conn1851",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "594036",
                    "threadStack": "TID 24567:\n#0  0x00005579065d814c __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1851",
                            "connectionId": 1851,
                            "client": "127.0.0.1:48820",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47232,
                            "lsid": {
                                "id": {
                                    "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27364979"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "lFteoyXsQLq32IyRVNAroA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1837,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1839"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "RegexMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "25.50",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24699": {
            "threadId": "24699",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24699",
                    "threadName": "conn1913",
                    "threadCpu": 36.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "579642",
                    "threadStack": "TID 24699:\n#0  0x00005579065e964a __wt_cursor_get_valuev\n#1  0x00005579065e99e5 __wt_cursor_get_value\n#2  0x000055790658e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1913",
                            "connectionId": 1913,
                            "client": "127.0.0.1:48952",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47339,
                            "lsid": {
                                "id": {
                                    "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "12"
                            },
                            "microsecs_running": {
                                "$numberLong": "12931040"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1118,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1120"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24699",
                    "threadName": "conn1913",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "588061",
                    "threadStack": "TID 24699:\n#0  0x00005579066f9c30 __config_next\n#1  0x00005579066fa2a1 __wt_config_next\n#2  0x00005579065b6536 config_check\n#3  0x0000557906640c8a __session_begin_transaction\n#4  0x000055790655b385 mongo::WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock(__wt_session*, mongo::PrepareConflictBehavior, mongo::WiredTigerBeginTxnBlock::RoundUpPreparedTimestamps, mongo::WiredTigerBeginTxnBlock::RoundUpReadTimestamp)\n#5  0x000055790659e6e3 mongo::WiredTigerRecoveryUnit::_txnOpen()\n#6  0x000055790659e94c mongo::WiredTigerRecoveryUnit::getSession()\n#7  0x00005579077f81ee std::_Function_handler<void (std::shared_ptr<mongo::Collection const>&, mongo::OperationContext*, mongo::UUID), mongo::AutoGetCollectionForReadLockFree::EmplaceHelper::emplace(boost::optional<mongo::AutoGetCollectionLockFree>&) const::{lambda(std::shared_ptr<mongo::Collection const>&, mongo::OperationContext*, mongo::UUID)#1}>::_M_invoke(std::_Any_data const&, std::shared_ptr<mongo::Collection const>&, mongo::OperationContext*&&, mongo::UUID&&)\n#8  0x0000557907808688 std::_Function_handler<mongo::Collection const* (mongo::OperationContext*, mongo::UUID), mongo::AutoGetCollectionLockFree::AutoGetCollectionLockFree(mongo::OperationContext*, mongo::NamespaceStringOrUUID const&, std::function<void (std::shared_ptr<mongo::Collection const>&, mongo::OperationContext*, mongo::UUID)>, mongo::AutoGetCollectionViewMode, mongo::Date_t)::{lambda(mongo::OperationContext*, mongo::UUID)#2}>::_M_invoke(std::_Any_data const&, mongo::OperationContext*&&, mongo::UUID&&)\n#9  0x00005579089bd71e mongo::CollectionPtr::restore() const\n#10 0x000055790772aa1c mongo::PlanYieldPolicy::performYield(mongo::OperationContext*, mongo::Yieldable const*, std::function<void ()>)\n#11 0x000055790772abf0 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#12 0x00005579075bfcc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#13 0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#15 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#16 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#17 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#18 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#19 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#20 0x0000557907a5326c mongo::Pipeline::getNext()\n#21 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#22 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#23 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#24 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#25 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#27 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#28 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#29 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#30 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#31 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#32 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#33 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#34 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#35 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#38 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#39 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#40 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#42 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#43 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#44 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#45 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#46 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#47 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#48 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#50 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#51 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#52 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#53 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#54 0x00007f4b89265b43 start_thread\n#55 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock": "Found in stack",
                            "WiredTigerRecoveryUnit::_txnOpen": "Found in stack",
                            "WiredTigerRecoveryUnit::getSession": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1913",
                            "connectionId": 1913,
                            "client": "127.0.0.1:48952",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.859+05:30",
                            "threaded": true,
                            "opid": 47339,
                            "lsid": {
                                "id": {
                                    "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20541358"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1265,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1267"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24699",
                    "threadName": "conn1913",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "594191",
                    "threadStack": "TID 24699:\n#0  0x0000557907548230 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1913",
                            "connectionId": 1913,
                            "client": "127.0.0.1:48952",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47339,
                            "lsid": {
                                "id": {
                                    "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27219079"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "heskXWtnS7+7L91+zb6wgg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1391,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1393"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerBeginTxnBlock::WiredTigerBeginTxnBlock",
                        "WiredTigerRecoveryUnit::getSession",
                        "WiredTigerRecordStoreCursorBase::next",
                        "WiredTigerRecoveryUnit::_txnOpen"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "24.63",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations. The drop in CPU usage was large, and hence it may not be problematic",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24642": {
            "threadId": "24642",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24642",
                    "threadName": "conn1887",
                    "threadCpu": 27.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "578996",
                    "threadStack": "TID 24642:\n#0  0x0000557908e73327 pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1887",
                            "connectionId": 1887,
                            "client": "127.0.0.1:48896",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47287,
                            "lsid": {
                                "id": {
                                    "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13022976"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1213,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1215"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24642",
                    "threadName": "conn1887",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "585018",
                    "threadStack": "TID 24642:\n#0  0x0000557908e7854a pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1887",
                            "connectionId": 1887,
                            "client": "127.0.0.1:48896",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.861+05:30",
                            "threaded": true,
                            "opid": 47287,
                            "lsid": {
                                "id": {
                                    "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20634465"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1382,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1384"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24642",
                    "threadName": "conn1887",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "593527",
                    "threadStack": "TID 24642:\n#0  0x00005579075368a4 mongo::CollectionScan::doWork(unsigned long*)\n#1  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#6  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#7  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x0000557907a5326c mongo::Pipeline::getNext()\n#10 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f4b89265b43 start_thread\n#44 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1887",
                            "connectionId": 1887,
                            "client": "127.0.0.1:48896",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47287,
                            "lsid": {
                                "id": {
                                    "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27311022"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "sllZDS9YQYOxyY88BER2yw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1525,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1527"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "RegexMatchExpression",
                        "PathMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ]
                },
                "avgCpu": "24.37",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations.",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24622": {
            "threadId": "24622",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24622",
                    "threadName": "conn1876",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "580075",
                    "threadStack": "TID 24622:\n#0  0x000055790658e5aa mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1876",
                            "connectionId": 1876,
                            "client": "127.0.0.1:48872",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47274,
                            "lsid": {
                                "id": {
                                    "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13036876"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1192,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1194"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24622",
                    "threadName": "conn1876",
                    "threadCpu": 29.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "586406",
                    "threadStack": "TID 24622:\n#0  0x00005579065d7e9c __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1876",
                            "connectionId": 1876,
                            "client": "127.0.0.1:48872",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.861+05:30",
                            "threaded": true,
                            "opid": 47274,
                            "lsid": {
                                "id": {
                                    "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20648005"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1408,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1410"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24622",
                    "threadName": "conn1876",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "594373",
                    "threadStack": "TID 24622:\n#0  0x000055790870deb9 mongo::BSONElementIterator::more()\n#1  0x000055790754839d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#6  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#12 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#14 0x0000557907a5326c mongo::Pipeline::getNext()\n#15 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f4b89265b43 start_thread\n#49 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1876",
                            "connectionId": 1876,
                            "client": "127.0.0.1:48872",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47274,
                            "lsid": {
                                "id": {
                                    "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27324923"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "KmADFM4XSpaBoGVbqMXh5g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1578,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1580"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ]
                },
                "avgCpu": "24.23",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24813": {
            "threadId": "24813",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24813",
                    "threadName": "conn1957",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "581100",
                    "threadStack": "TID 24813:\n#0  0x0000557906682f77 __wt_txn_read\n#1  0x0000557906687828 __wt_btcur_next_prefix\n#2  0x00005579065d7ffe __curfile_next\n#3  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1957",
                            "connectionId": 1957,
                            "client": "127.0.0.1:49046",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47411,
                            "lsid": {
                                "id": {
                                    "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "12"
                            },
                            "microsecs_running": {
                                "$numberLong": "12781125"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1170,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1172"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24813",
                    "threadName": "conn1957",
                    "threadCpu": 29.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "587218",
                    "threadStack": "TID 24813:\n#0  0x00005579075bfd14 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#5  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#6  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x0000557907a5326c mongo::Pipeline::getNext()\n#9  0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f4b89265b43 start_thread\n#43 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1957",
                            "connectionId": 1957,
                            "client": "127.0.0.1:49046",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47411,
                            "lsid": {
                                "id": {
                                    "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20391555"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1422,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1424"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24813",
                    "threadName": "conn1957",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "595635",
                    "threadStack": "TID 24813:\n#0  0x00005579065d7e9c __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1957",
                            "connectionId": 1957,
                            "client": "127.0.0.1:49046",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47411,
                            "lsid": {
                                "id": {
                                    "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27069165"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "cSqOuk0tSrq7d1x9lDLT7g==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1574,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1576"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "22.87",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24597": {
            "threadId": "24597",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24597",
                    "threadName": "conn1861",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "579233",
                    "threadStack": "TID 24597:\n#0  0x0000557908e8bc54 _pcre_valid_utf\n#1  0x0000557908e73168 pcre_exec\n#2  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#14 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#15 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#17 0x0000557907a5326c mongo::Pipeline::getNext()\n#18 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f4b89265b43 start_thread\n#52 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1861",
                            "connectionId": 1861,
                            "client": "127.0.0.1:48842",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47263,
                            "lsid": {
                                "id": {
                                    "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13047268"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1370,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1372"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24597",
                    "threadName": "conn1861",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "586330",
                    "threadStack": "TID 24597:\n#0  0x00005579065e92b6 __wt_cursor_get_valuev\n#1  0x00005579065e99e5 __wt_cursor_get_value\n#2  0x000055790658e6b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1861",
                            "connectionId": 1861,
                            "client": "127.0.0.1:48842",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47263,
                            "lsid": {
                                "id": {
                                    "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20658274"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1532,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1534"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24597",
                    "threadName": "conn1861",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "594869",
                    "threadStack": "TID 24597:\n#0  0x0000557908e8bcbc _pcre_valid_utf\n#1  0x0000557908e73168 pcre_exec\n#2  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#14 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#15 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#17 0x0000557907a5326c mongo::Pipeline::getNext()\n#18 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f4b89265b43 start_thread\n#52 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1861",
                            "connectionId": 1861,
                            "client": "127.0.0.1:48842",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47263,
                            "lsid": {
                                "id": {
                                    "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27335313"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "AuIkXijuSvSKRtFfbCkudw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1657,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1659"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "RegexMatchExpression",
                        "PathMatchExpression",
                        "Contains RE Namespace"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "20.07",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24775": {
            "threadId": "24775",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24775",
                    "threadName": "conn1941",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "580218",
                    "threadStack": "TID 24775:\n#0  0x0000557907c09ceb mongo::ResourceConsumption::MetricsCollector::get(mongo::OperationContext*)\n#1  0x000055790658e6c5 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1941",
                            "connectionId": 1941,
                            "client": "127.0.0.1:49010",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47384,
                            "lsid": {
                                "id": {
                                    "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "12"
                            },
                            "microsecs_running": {
                                "$numberLong": "12828430"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1061,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1063"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24775",
                    "threadName": "conn1941",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "587713",
                    "threadStack": "TID 24775:\n#0  0x000055790668264b __wt_txn_read\n#1  0x0000557906687828 __wt_btcur_next_prefix\n#2  0x00005579065d7ffe __curfile_next\n#3  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1941",
                            "connectionId": 1941,
                            "client": "127.0.0.1:49010",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47384,
                            "lsid": {
                                "id": {
                                    "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20439187"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1196,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1198"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24775",
                    "threadName": "conn1941",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "594262",
                    "threadStack": "TID 24775:\n#0  0x0000557908e72fbc pcre_exec\n#1  0x0000557908e8ce18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x0000557908e8ce9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x0000557908e8d43f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x0000557907ccbe53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x0000557907548304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "Contains RE Namespace": {
                                "Contains REGEX Matching": "True",
                                "FunctionsCalled": [
                                    {
                                        "TryMatch": "called"
                                    },
                                    {
                                        "DoMatchImpl": "called"
                                    },
                                    {
                                        "PartialMatch": "called"
                                    }
                                ]
                            },
                            "RegexMatchExpression": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "matchesSingleElement": "called"
                                    }
                                ]
                            },
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1941",
                            "connectionId": 1941,
                            "client": "127.0.0.1:49010",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47384,
                            "lsid": {
                                "id": {
                                    "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27116474"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "rPSVFMhwSImetJUH8rriIA==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1328,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1330"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression",
                        "RegexMatchExpression",
                        "Contains RE Namespace"
                    ]
                },
                "avgCpu": "20.07",
                "cpuStats": {
                    "cpuTrend": "Thread has decreasing cpu utilization over iterations.",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24491": {
            "threadId": "24491",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24491",
                    "threadName": "conn1822",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "578334",
                    "threadStack": "TID 24491:\n#0  0x0000557908dc6ba1 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055790870e7b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055790870d3d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x00005579075374b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055790754826a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#13 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#15 0x0000557907a5326c mongo::Pipeline::getNext()\n#16 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f4b89265b43 start_thread\n#50 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1822",
                            "connectionId": 1822,
                            "client": "127.0.0.1:48760",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.249+05:30",
                            "threaded": true,
                            "opid": 47186,
                            "lsid": {
                                "id": {
                                    "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13147197"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1162,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1164"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24491",
                    "threadName": "conn1822",
                    "threadCpu": 16.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "584819",
                    "threadStack": "TID 24491:\n#0  0x0000557907536f48 mongo::WorkingSetMatchableDocument::releaseIterator(mongo::ElementIterator*) const\n#1  0x0000557907548328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x0000557907535613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "ExpressionMatching": {
                            "Description": "These elements can give idea about what type of expressions are being used to match the documents",
                            "PathMatchExpression": {
                                "Evaluating Execution Path": "True",
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1822",
                            "connectionId": 1822,
                            "client": "127.0.0.1:48760",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.860+05:30",
                            "threaded": true,
                            "opid": 47186,
                            "lsid": {
                                "id": {
                                    "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20757739"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1305,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1307"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24491",
                    "threadName": "conn1822",
                    "threadCpu": 20.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "592935",
                    "threadStack": "TID 24491:\n#0  0x00005579065e84de __wt_cursor_get_key\n#1  0x000055790658c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#2  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#9  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#10 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#12 0x0000557907a5326c mongo::Pipeline::getNext()\n#13 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f4b89265b43 start_thread\n#47 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1822",
                            "connectionId": 1822,
                            "client": "127.0.0.1:48760",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.537+05:30",
                            "threaded": true,
                            "opid": 47186,
                            "lsid": {
                                "id": {
                                    "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27435238"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "d4i6Hk39SVO41/2CsNQSwQ==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1428,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1430"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "ExpressionMatching": [
                        "PathMatchExpression"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "18.57",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were not much over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24493": {
            "threadId": "24493",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24493",
                    "threadName": "conn1824",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "577526",
                    "threadStack": "TID 24493:\n#0  0x00005579065e5b86 __wt_struct_unpackv\n#1  0x00005579065e7eda __wt_cursor_get_keyv\n#2  0x00005579065e84cb __wt_cursor_get_key\n#3  0x000055790658c813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#8  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#14 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#16 0x0000557907a5326c mongo::Pipeline::getNext()\n#17 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f4b89265b43 start_thread\n#51 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1824",
                            "connectionId": 1824,
                            "client": "127.0.0.1:48764",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47185,
                            "lsid": {
                                "id": {
                                    "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13148717"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1959,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1961"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24493",
                    "threadName": "conn1824",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "585034",
                    "threadStack": "TID 24493:\n#0  0x000055790658c7cb mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x000055790658e5c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreStandardCursor::getKey": "Found in stack",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1824",
                            "connectionId": 1824,
                            "client": "127.0.0.1:48764",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.862+05:30",
                            "threaded": true,
                            "opid": 47185,
                            "lsid": {
                                "id": {
                                    "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20760567"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2124,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2126"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24493",
                    "threadName": "conn1824",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "592125",
                    "threadStack": "TID 24493:\n#0  0x00005579065d7e9c __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x0000557907560503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055790756b6ad mongo::SortStage::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            },
                            "ProjectionStage": {
                                "FoundInStack": "True"
                            },
                            "SortStage": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1824",
                            "connectionId": 1824,
                            "client": "127.0.0.1:48764",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47185,
                            "lsid": {
                                "id": {
                                    "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27436769"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "dV3zxrGNQI25+1sMV7U0Vw==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2245,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2247"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "ProjectionStage",
                        "SortStage",
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreStandardCursor::getKey",
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "18.57",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        },
        "24629": {
            "threadId": "24629",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "24629",
                    "threadName": "conn1879",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "579320",
                    "threadStack": "TID 24629:\n#0  0x00005579089c9cc0 mongo::DocumentMetadataFields::operator=(mongo::DocumentMetadataFields&&)\n#1  0x0000557907ba977b mongo::WorkingSetMember::clear()\n#2  0x0000557907ba99c8 mongo::WorkingSet::free(unsigned long)\n#3  0x000055790753582f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x00005579075368ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#11 0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#13 0x0000557907a5326c mongo::Pipeline::getNext()\n#14 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f4b89265b43 start_thread\n#48 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True",
                                "FunctionsCalled": [
                                    {
                                        "returnIfMatches": "called"
                                    }
                                ]
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1879",
                            "connectionId": 1879,
                            "client": "127.0.0.1:48878",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:42:54.250+05:30",
                            "threaded": true,
                            "opid": 47273,
                            "lsid": {
                                "id": {
                                    "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "13"
                            },
                            "microsecs_running": {
                                "$numberLong": "13037726"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1158,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1160"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "24629",
                    "threadName": "conn1879",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "587708",
                    "threadStack": "TID 24629:\n#0  0x0000557908c8e480 mongo::BackgroundThreadClockSource::now()\n#1  0x000055790772acfa mongo::ElapsedTracker::intervalHasElapsed()\n#2  0x00005579075bfc93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#7  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#8  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#10 0x0000557907a5326c mongo::Pipeline::getNext()\n#11 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f4b89265b43 start_thread\n#45 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1879",
                            "connectionId": 1879,
                            "client": "127.0.0.1:48878",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:01.861+05:30",
                            "threaded": true,
                            "opid": 47273,
                            "lsid": {
                                "id": {
                                    "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "20"
                            },
                            "microsecs_running": {
                                "$numberLong": "20649416"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1320,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1322"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "24629",
                    "threadName": "conn1879",
                    "threadCpu": 12.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "595041",
                    "threadStack": "TID 24629:\n#0  0x00005579065d814c __curfile_next\n#1  0x000055790658e3e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x0000557907536725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x00005579075bfd27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x00005579075c0acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055790758bf57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055790758c2f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x00005579071abfd8 mongo::DocumentSource::getNext()\n#8  0x00005579079da25d mongo::DocumentSourceGroup::initialize()\n#9  0x00005579079da379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x00005579071abfd8 mongo::DocumentSource::getNext()\n#11 0x0000557907a5326c mongo::Pipeline::getNext()\n#12 0x0000557907595349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x00005579075953ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055790759556e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x0000557907044c6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055790703a9c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x0000557907c5774f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x0000557907c5c8be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x00005579064f6907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x0000557906508f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x00005579065097e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x0000557906509d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x00005579064faf4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x00005579064fcfee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x0000557906505c00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x0000557906507df0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055790650c1a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x00005579064ff5fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x00005579064c2967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x00005579065065ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055790650701e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x0000557906507d36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x0000557906501fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x00005579064f1e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x0000557906549097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x00005579065493c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055790654bd28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055790654c22f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x00005579085e79c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x0000557906c2bed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x00005579085e7b7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x00005579085eba2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x00005579085eba9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f4b89265b43 start_thread\n#46 0x00007f4b892f7a00 __clone3\n",
                    "analysis": {
                        "StagesAndScans": {
                            "Description": "The following stages were found somewhere in the stack, and can give some idea about what type of scans are being made, what functions of these scans are called etc.",
                            "CollectionScan": {
                                "FoundInStack": "True"
                            }
                        },
                        "CommandFoundInStack": {
                            "Description": "This section includes the commands which may have been run on the current thread",
                            "PipelineCommand::Invocation": "True"
                        },
                        "WiredTiger": {
                            "Description": "This section contains commands related to WiredTiger (the storage engine) that were called",
                            "WiredTigerRecordStoreCursorBase::next": "Found in stack"
                        }
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn1879",
                            "connectionId": 1879,
                            "client": "127.0.0.1:48878",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-07-04T15:43:08.538+05:30",
                            "threaded": true,
                            "opid": 47273,
                            "lsid": {
                                "id": {
                                    "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                    "$type": "04"
                                },
                                "uid": {
                                    "$binary": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                    "$type": "00"
                                }
                            },
                            "secs_running": {
                                "$numberLong": "27"
                            },
                            "microsecs_running": {
                                "$numberLong": "27325778"
                            },
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": "BPsToKUVRlyTPZ7DueC8Sg==",
                                        "$type": "04"
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 1493,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "1495"
                                        }
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": {
                                            "$numberLong": "2"
                                        }
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ],
            "overallAnalysis": {
                "mergedStackAnalysis": {
                    "StagesAndScans": [
                        "CollectionScan"
                    ],
                    "CommandFoundInStack": [
                        "PipelineCommand::Invocation"
                    ],
                    "WiredTiger": [
                        "WiredTigerRecordStoreCursorBase::next"
                    ]
                },
                "avgCpu": "18.57",
                "cpuStats": {
                    "cpuTrend": "No monotically increasing or decreasing trend seen for thread over iterations ",
                    "cpuDiff": "Differences in CPU utilization were high over iterations"
                },
                "stacksOverIterations": "Stacks changed over different iterations"
            }
        }
    },
    "success": "Success"
}