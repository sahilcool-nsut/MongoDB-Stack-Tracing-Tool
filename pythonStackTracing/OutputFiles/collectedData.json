{
    "threads": {
        "51729": {
            "threadId": "51729",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51729",
                    "threadName": "conn2798",
                    "threadCpu": 22.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159850",
                    "threadStack": "TID 51729:\n#0  0x000055dfbde1c9da mongo::Document::toBson() const\n#1  0x000055dfbc98d5fa mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2798",
                            "connectionId": 2798,
                            "client": "127.0.0.1:40300",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216634,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6B0eHqQMRF2lt8V64htL8w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15775450,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6B0eHqQMRF2lt8V64htL8w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3033,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3035
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51739": {
            "threadId": "51739",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51739",
                    "threadName": "conn2804",
                    "threadCpu": 44.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160037",
                    "threadStack": "TID 51739:\n#0  0x000055dfbe2e3ab5 _pcre_valid_utf\n#1  0x000055dfbe2cb168 pcre_exec\n#2  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#15 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#17 0x000055dfbceab26c mongo::Pipeline::getNext()\n#18 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f54e9464b43 start_thread\n#52 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2804",
                            "connectionId": 2804,
                            "client": "127.0.0.1:40312",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216643,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "5fb45TooSXWPynDOe4iDXw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15766887,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "5fb45TooSXWPynDOe4iDXw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2909,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2911
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51831": {
            "threadId": "51831",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51831",
                    "threadName": "conn2841",
                    "threadCpu": 22.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160038",
                    "threadStack": "TID 51831:\n#0  0x000055dfbd0015c1 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x000055dfbd0018a0 mongo::WorkingSetMember::clear()\n#2  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#3  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2841",
                            "connectionId": 2841,
                            "client": "127.0.0.1:40394",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216716,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "nqiuodP+Td6qrjR02Cln5Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15634151,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "nqiuodP+Td6qrjR02Cln5Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3164,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3166
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51834": {
            "threadId": "51834",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51834",
                    "threadName": "conn2844",
                    "threadCpu": 25.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159865",
                    "threadStack": "TID 51834:\n#0  0x000055dfbe2e3cb4 _pcre_valid_utf\n#1  0x000055dfbe2cb168 pcre_exec\n#2  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#3  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#4  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#5  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#6  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#7  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#8  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#9  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#15 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#17 0x000055dfbceab26c mongo::Pipeline::getNext()\n#18 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f54e9464b43 start_thread\n#52 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2844",
                            "connectionId": 2844,
                            "client": "127.0.0.1:40400",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216703,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "kTlWCDlfRayxUli6LxB1OA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15686171,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "kTlWCDlfRayxUli6LxB1OA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3582,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3584
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "51834",
                    "threadName": "conn2844",
                    "threadCpu": 73.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162180",
                    "threadStack": "TID 51834:\n#0  0x00007f54e956d990 __strlen_avx2\n#1  0x000055dfbe21eb3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2844",
                            "connectionId": 2844,
                            "client": "127.0.0.1:40400",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216703,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "kTlWCDlfRayxUli6LxB1OA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24230030,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "kTlWCDlfRayxUli6LxB1OA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4770,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4772
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51880": {
            "threadId": "51880",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51880",
                    "threadName": "conn2859",
                    "threadCpu": 22.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160013",
                    "threadStack": "TID 51880:\n#0  0x000055dfbba41319 __wt_cursor_get_valuev\n#1  0x000055dfbba419e5 __wt_cursor_get_value\n#2  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2859",
                            "connectionId": 2859,
                            "client": "127.0.0.1:40430",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216757,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "djRKokqySy6sAMpZP2fzkA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15373136,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "djRKokqySy6sAMpZP2fzkA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3697,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3699
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "51880",
                    "threadName": "conn2859",
                    "threadCpu": 38.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162144",
                    "threadStack": "TID 51880:\n#0  0x000055dfbbb155fd __wt_value_return\n#1  0x000055dfbbadf85c __wt_btcur_next_prefix\n#2  0x000055dfbba2fffe __curfile_next\n#3  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2859",
                            "connectionId": 2859,
                            "client": "127.0.0.1:40430",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.578+05:30",
                            "threaded": true,
                            "opid": 216757,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "djRKokqySy6sAMpZP2fzkA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23917108,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "djRKokqySy6sAMpZP2fzkA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4839,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4841
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51882": {
            "threadId": "51882",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51882",
                    "threadName": "conn2860",
                    "threadCpu": 40.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160100",
                    "threadStack": "TID 51882:\n#0  0x000055dfbbada5ef __wt_txn_read\n#1  0x000055dfbbadf828 __wt_btcur_next_prefix\n#2  0x000055dfbba2fffe __curfile_next\n#3  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2860",
                            "connectionId": 2860,
                            "client": "127.0.0.1:40432",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216748,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "JEbTdcWfT7WQ8VMgenQpuw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15387900,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "JEbTdcWfT7WQ8VMgenQpuw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2574,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2576
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51882",
                    "threadName": "conn2860",
                    "threadCpu": 30.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164542",
                    "threadStack": "TID 51882:\n#0  0x000055dfbd001da4 mongo::WorkingSet::allocate()\n#1  0x000055dfbc98e836 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2860",
                            "connectionId": 2860,
                            "client": "127.0.0.1:40432",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216748,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "JEbTdcWfT7WQ8VMgenQpuw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25195632,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "JEbTdcWfT7WQ8VMgenQpuw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3727,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3729
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51883": {
            "threadId": "51883",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51883",
                    "threadName": "conn2861",
                    "threadCpu": 25.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160062",
                    "threadStack": "TID 51883:\n#0  0x000055dfbbaddc7c __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2861",
                            "connectionId": 2861,
                            "client": "127.0.0.1:40434",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216764,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "vUMj//euQWWjMLyGIHZbUg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15155784,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "vUMj//euQWWjMLyGIHZbUg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2680,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2682
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51895": {
            "threadId": "51895",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51895",
                    "threadName": "conn2868",
                    "threadCpu": 25.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159944",
                    "threadStack": "TID 51895:\n#0  0x000055dfbbade770 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2868",
                            "connectionId": 2868,
                            "client": "127.0.0.1:40448",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216753,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15373266,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2932,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2934
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "51895",
                    "threadName": "conn2868",
                    "threadCpu": 34.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162193",
                    "threadStack": "TID 51895:\n#0  0x000055dfbd1234ec mongo::ComparisonMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "currentlyComparingValues": "True",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2868",
                            "connectionId": 2868,
                            "client": "127.0.0.1:40448",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216753,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23917144,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4714,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4716
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51895",
                    "threadName": "conn2868",
                    "threadCpu": 50.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164594",
                    "threadStack": "TID 51895:\n#0  0x000055dfbde1c9ee mongo::Document::toBson() const\n#1  0x000055dfbc98d5fa mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2868",
                            "connectionId": 2868,
                            "client": "127.0.0.1:40448",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216753,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25180997,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "grzfF9V4RXKR6JiJvJFvpg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4906,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4908
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51926": {
            "threadId": "51926",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51926",
                    "threadName": "conn2878",
                    "threadCpu": 74.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381160080",
                    "threadStack": "TID 51926:\n#0  0x000055dfbbb504c4 __wt_row_search\n#1  0x000055dfbbaef05f __wt_btcur_search_near\n#2  0x000055dfbba34dca __curfile_search_near\n#3  0x000055dfbb9e3d78 int mongo::wiredTigerPrepareConflictRetry<mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}>(mongo::OperationContext*, mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}&&)\n#4  0x000055dfbb9e4112 mongo::WiredTigerRecordStoreCursorBase::restore(bool)\n#5  0x000055dfbc98d9ad mongo::CollectionScan::doRestoreStateRequiresCollection()\n#6  0x000055dfbc9bda56 mongo::RequiresCollectionStage::doRestoreState(mongo::RestoreContext const&)\n#7  0x000055dfbca16279 mongo::PlanExecutorImpl::restoreStateWithoutRetrying(mongo::RestoreContext const&, mongo::Yieldable const*)\n#8  0x000055dfbca2c333 mongo::PlanYieldPolicyImpl::restoreState(mongo::OperationContext*, mongo::Yieldable const*)\n#9  0x000055dfbcb82b76 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#10 0x000055dfbca17cc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#16 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#18 0x000055dfbceab26c mongo::Pipeline::getNext()\n#19 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f54e9464b43 start_thread\n#53 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2878",
                            "connectionId": 2878,
                            "client": "127.0.0.1:40470",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216776,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "W5Xng576So+MU6rEBvjSbg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 15,
                            "microsecs_running": 15087587,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "W5Xng576So+MU6rEBvjSbg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3617,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3619
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51953": {
            "threadId": "51953",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51953",
                    "threadName": "conn2889",
                    "threadCpu": 70.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159819",
                    "threadStack": "TID 51953:\n#0  0x000055dfbb920f09 mongo::FailPoint::shouldFail()\n#1  0x000055dfbb9e63ce mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2889",
                            "connectionId": 2889,
                            "client": "127.0.0.1:40494",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216792,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14963353,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3092,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3094
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "51953",
                    "threadName": "conn2889",
                    "threadCpu": 38.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162112",
                    "threadStack": "TID 51953:\n#0  0x000055dfbdb6672b mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#1  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#2  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#3  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#4  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2889",
                            "connectionId": 2889,
                            "client": "127.0.0.1:40494",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216792,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23507229,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4524,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4526
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51953",
                    "threadName": "conn2889",
                    "threadCpu": 65.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164494",
                    "threadStack": "TID 51953:\n#0  0x000055dfbba2fed7 __curfile_next\n#1  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2889",
                            "connectionId": 2889,
                            "client": "127.0.0.1:40494",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216792,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24771083,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "woSUK5DHR6Kc8Kky5qxOvQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4704,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4706
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51969": {
            "threadId": "51969",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51969",
                    "threadName": "conn2896",
                    "threadCpu": 33.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159926",
                    "threadStack": "TID 51969:\n#0  0x000055dfbd001776 mongo::WorkingSetMember::clear()\n#1  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#2  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2896",
                            "connectionId": 2896,
                            "client": "127.0.0.1:40508",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216820,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "clCfEim3TLGw0uE8aSRvAw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14926481,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "clCfEim3TLGw0uE8aSRvAw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5111,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5113
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51970": {
            "threadId": "51970",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51970",
                    "threadName": "conn2897",
                    "threadCpu": 29.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159899",
                    "threadStack": "TID 51970:\n#0  0x000055dfbba3fb2e __wt_cursor_get_keyv\n#1  0x000055dfbba404cb __wt_cursor_get_key\n#2  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2897",
                            "connectionId": 2897,
                            "client": "127.0.0.1:40510",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216796,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ASpWkRrVRAet2onx6Zvg0Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14958840,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ASpWkRrVRAet2onx6Zvg0Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4178,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4180
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51970",
                    "threadName": "conn2897",
                    "threadCpu": 50.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164762",
                    "threadStack": "TID 51970:\n#0  0x000055dfbc9a0230 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2897",
                            "connectionId": 2897,
                            "client": "127.0.0.1:40510",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.842+05:30",
                            "threaded": true,
                            "opid": 216796,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ASpWkRrVRAet2onx6Zvg0Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24766578,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ASpWkRrVRAet2onx6Zvg0Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5637,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5639
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51978": {
            "threadId": "51978",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51978",
                    "threadName": "conn2902",
                    "threadCpu": 37.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159819",
                    "threadStack": "TID 51978:\n#0  0x000055dfbde18a22 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x000055dfbd001628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x000055dfbd0018a0 mongo::WorkingSetMember::clear()\n#3  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#4  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2902",
                            "connectionId": 2902,
                            "client": "127.0.0.1:40522",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216828,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "S9qiIFNxTcGjxyeyQJ5vag==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14904928,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "S9qiIFNxTcGjxyeyQJ5vag==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2588,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2590
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51989": {
            "threadId": "51989",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "51989",
                    "threadName": "conn2906",
                    "threadCpu": 25.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159819",
                    "threadStack": "TID 51989:\n#0  0x000055dfbca181ce mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#5  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#6  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbceab26c mongo::Pipeline::getNext()\n#9  0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f54e9464b43 start_thread\n#43 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2906",
                            "connectionId": 2906,
                            "client": "127.0.0.1:40530",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216827,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "Fh+jctWjRfaUz1i62xt+jA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14912235,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "Fh+jctWjRfaUz1i62xt+jA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2684,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2686
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52029": {
            "threadId": "52029",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "52029",
                    "threadName": "conn2921",
                    "threadCpu": 25.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159828",
                    "threadStack": "TID 52029:\n#0  0x000055dfbba3fb2e __wt_cursor_get_keyv\n#1  0x000055dfbba404cb __wt_cursor_get_key\n#2  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2921",
                            "connectionId": 2921,
                            "client": "127.0.0.1:40562",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.033+05:30",
                            "threaded": true,
                            "opid": 216846,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14850493,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 3742,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 3744
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "52029",
                    "threadName": "conn2921",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381161967",
                    "threadStack": "TID 52029:\n#0  0x000055dfbd061e63 mongo::ResourceConsumption::MetricsCollector::incrementOneDocRead(unsigned long)\n#1  0x000055dfbb9e66d4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2921",
                            "connectionId": 2921,
                            "client": "127.0.0.1:40562",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216846,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23394351,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4972,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4974
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "52029",
                    "threadName": "conn2921",
                    "threadCpu": 30.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164754",
                    "threadStack": "TID 52029:\n#0  0x000055dfbbb129c6 __wt_value_return_buf\n#1  0x000055dfbbadaf77 __wt_txn_read\n#2  0x000055dfbbadf828 __wt_btcur_next_prefix\n#3  0x000055dfbba2fffe __curfile_next\n#4  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2921",
                            "connectionId": 2921,
                            "client": "127.0.0.1:40562",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216846,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24658231,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+GBlqYcMR6iSp8PrKmGYag==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5157,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5159
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52030": {
            "threadId": "52030",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "52030",
                    "threadName": "conn2922",
                    "threadCpu": 29.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381159819",
                    "threadStack": "TID 52030:\n#0  0x000055dfbd0013c2 mongo::WorkingSet::transitionToRecordIdAndObj(unsigned long)\n#1  0x000055dfbc98e8dc mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2922",
                            "connectionId": 2922,
                            "client": "127.0.0.1:40564",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:37.034+05:30",
                            "threaded": true,
                            "opid": 216850,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "n2u5nOQYTIeB9p4wijxP/A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 14,
                            "microsecs_running": 14848586,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "n2u5nOQYTIeB9p4wijxP/A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 2931,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 2933
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51765": {
            "threadId": "51765",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51765",
                    "threadName": "conn2816",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162215",
                    "threadStack": "TID 51765:\n#0  0x000055dfbd127b60 bool std::binary_search<__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan>(__gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, __gnu_cxx::__normal_iterator<mongo::BSONElement const*, std::vector<mongo::BSONElement, std::allocator<mongo::BSONElement> > >, mongo::BSONElement const&, mongo::BSONComparatorInterfaceBase<mongo::BSONElement>::LessThan)\n#1  0x000055dfbd123efe mongo::InMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#2  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'in' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2816",
                            "connectionId": 2816,
                            "client": "127.0.0.1:40340",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.578+05:30",
                            "threaded": true,
                            "opid": 216666,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "GR6VT12DTKyfgxlkKILixg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24294536,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "GR6VT12DTKyfgxlkKILixg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4052,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4054
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51770": {
            "threadId": "51770",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51770",
                    "threadName": "conn2819",
                    "threadCpu": 88.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162167",
                    "threadStack": "TID 51770:\n#0  0x000055dfbb92045d mongo::StringData::StringData(char const*, unsigned long)\n#1  0x000055dfbe073d78 mongo::FieldRef::getPart(unsigned char) const\n#2  0x000055dfbdb667ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2819",
                            "connectionId": 2819,
                            "client": "127.0.0.1:40348",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.578+05:30",
                            "threaded": true,
                            "opid": 216664,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "OhU11dtKToegj0bLBvsIow==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24296625,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "OhU11dtKToegj0bLBvsIow==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 7562,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 7564
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51770",
                    "threadName": "conn2819",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164442",
                    "threadStack": "TID 51770:\n#0  0x000055dfbc98d5d2 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#1  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2819",
                            "connectionId": 2819,
                            "client": "127.0.0.1:40348",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.842+05:30",
                            "threaded": true,
                            "opid": 216664,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "OhU11dtKToegj0bLBvsIow==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25560395,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "OhU11dtKToegj0bLBvsIow==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 7770,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 7772
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51871": {
            "threadId": "51871",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51871",
                    "threadName": "conn2854",
                    "threadCpu": 46.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162274",
                    "threadStack": "TID 51871:\n#0  0x000055dfbe2cb2ec pcre_exec\n#1  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2854",
                            "connectionId": 2854,
                            "client": "127.0.0.1:40420",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216735,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "dBzCmf9fQvSZWJSKUxx+EQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24140330,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "dBzCmf9fQvSZWJSKUxx+EQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4359,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4361
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51886": {
            "threadId": "51886",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51886",
                    "threadName": "conn2863",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162249",
                    "threadStack": "TID 51886:\n#0  0x000055dfbbb155d0 __wt_value_return\n#1  0x000055dfbbadf85c __wt_btcur_next_prefix\n#2  0x000055dfbba2fffe __curfile_next\n#3  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2863",
                            "connectionId": 2863,
                            "client": "127.0.0.1:40438",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216746,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "zM5+6lReSdGrmltXb1Y6pw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23932098,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "zM5+6lReSdGrmltXb1Y6pw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4820,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4822
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51901": {
            "threadId": "51901",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51901",
                    "threadName": "conn2873",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162389",
                    "threadStack": "TID 51901:\n#0  0x000055dfbe20cb27 mongo::BSONElement::computeSize(signed char, char const*, int)\n#1  0x000055dfbe21eb50 mongo::BSONObj::getField(mongo::StringData) const\n#2  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2873",
                            "connectionId": 2873,
                            "client": "127.0.0.1:40460",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216761,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "C2PGHEVtRZ2YP4s7Jtf9ig==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23892723,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "C2PGHEVtRZ2YP4s7Jtf9ig==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4155,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4157
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51958": {
            "threadId": "51958",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51958",
                    "threadName": "conn2892",
                    "threadCpu": 38.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162028",
                    "threadStack": "TID 51958:\n#0  0x000055dfbba41959 __wt_cursor_get_value\n#1  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2892",
                            "connectionId": 2892,
                            "client": "127.0.0.1:40500",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216826,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "rdbZDM+1TaeX9y/zMmjM9w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23460456,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "rdbZDM+1TaeX9y/zMmjM9w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5593,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5595
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51958",
                    "threadName": "conn2892",
                    "threadCpu": 30.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164733",
                    "threadStack": "TID 51958:\n#0  0x000055dfbba2fe9c __curfile_next\n#1  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2892",
                            "connectionId": 2892,
                            "client": "127.0.0.1:40500",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216826,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "rdbZDM+1TaeX9y/zMmjM9w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24724322,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "rdbZDM+1TaeX9y/zMmjM9w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5732,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5734
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51981": {
            "threadId": "51981",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "51981",
                    "threadName": "conn2905",
                    "threadCpu": 76.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162346",
                    "threadStack": "TID 51981:\n#0  0x000055dfbbaddc7c __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2905",
                            "connectionId": 2905,
                            "client": "127.0.0.1:40528",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.578+05:30",
                            "threaded": true,
                            "opid": 216817,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+qSu4xpCTQ2O2FFgKcRctg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23478469,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+qSu4xpCTQ2O2FFgKcRctg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4563,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4565
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "51981",
                    "threadName": "conn2905",
                    "threadCpu": 46.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164482",
                    "threadStack": "TID 51981:\n#0  0x000055dfbca17d09 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#5  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#6  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbceab26c mongo::Pipeline::getNext()\n#9  0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f54e9464b43 start_thread\n#43 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2905",
                            "connectionId": 2905,
                            "client": "127.0.0.1:40528",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216817,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+qSu4xpCTQ2O2FFgKcRctg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24742271,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+qSu4xpCTQ2O2FFgKcRctg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4984,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4986
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52017": {
            "threadId": "52017",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "52017",
                    "threadName": "conn2917",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162466",
                    "threadStack": "TID 52017:\n#0  0x000055dfbba3db89 __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2917",
                            "connectionId": 2917,
                            "client": "127.0.0.1:40554",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216859,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "A2d7s3cuTt+WYEW5DKpzIg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23356643,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "A2d7s3cuTt+WYEW5DKpzIg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5008,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5010
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52031": {
            "threadId": "52031",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "52031",
                    "threadName": "conn2923",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381162065",
                    "threadStack": "TID 52031:\n#0  0x000055dfbdb6503d mongo::BSONElementIterator::~BSONElementIterator()\n#1  0x000055dfbdb65151 mongo::BSONElementIterator::~BSONElementIterator()\n#2  0x000055dfbc9a0328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2923",
                            "connectionId": 2923,
                            "client": "127.0.0.1:40566",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:45.577+05:30",
                            "threaded": true,
                            "opid": 216849,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "WZShvaUESaydl8lXyAytNw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 23,
                            "microsecs_running": 23392036,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "WZShvaUESaydl8lXyAytNw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 6161,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 6163
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51746": {
            "threadId": "51746",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51746",
                    "threadName": "conn2807",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164402",
                    "threadStack": "TID 51746:\n#0  0x000055dfbca181ce mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#5  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#6  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbceab26c mongo::Pipeline::getNext()\n#9  0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f54e9464b43 start_thread\n#43 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2807",
                            "connectionId": 2807,
                            "client": "127.0.0.1:40318",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216648,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ZP0guvoQQKi7ILHm2PqJrA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25569921,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ZP0guvoQQKi7ILHm2PqJrA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5327,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5329
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51768": {
            "threadId": "51768",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51768",
                    "threadName": "conn2817",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164558",
                    "threadStack": "TID 51768:\n#0  0x000055dfbe21ebfa mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2817",
                            "connectionId": 2817,
                            "client": "127.0.0.1:40342",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216673,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "MDFH3GisRwG9eCQaEKOUkA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25547475,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "MDFH3GisRwG9eCQaEKOUkA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5532,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5534
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51822": {
            "threadId": "51822",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51822",
                    "threadName": "conn2838",
                    "threadCpu": 26.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164528",
                    "threadStack": "TID 51822:\n#0  0x000055dfbdb65b50 mongo::BSONElementIterator::subCursorHasMore()\n#1  0x000055dfbdb65eab mongo::BSONElementIterator::more()\n#2  0x000055dfbc9a039d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2838",
                            "connectionId": 2838,
                            "client": "127.0.0.1:40388",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216705,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+rqwkUtNTuOJ/YGmZtMXJg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 25,
                            "microsecs_running": 25492602,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+rqwkUtNTuOJ/YGmZtMXJg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5763,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5765
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51927": {
            "threadId": "51927",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51927",
                    "threadName": "conn2879",
                    "threadCpu": 23.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164370",
                    "threadStack": "TID 51927:\n#0  0x000055dfbcb82840 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#1  0x000055dfbca17c93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#6  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#7  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbceab26c mongo::Pipeline::getNext()\n#10 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f54e9464b43 start_thread\n#44 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2879",
                            "connectionId": 2879,
                            "client": "127.0.0.1:40472",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216774,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "8iQoc8gBQBavOjvRz73ILA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24914190,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "8iQoc8gBQBavOjvRz73ILA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4399,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4401
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51947": {
            "threadId": "51947",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51947",
                    "threadName": "conn2884",
                    "threadCpu": 30.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164598",
                    "threadStack": "TID 51947:\n#0  0x000055dfbe20cb1a mongo::BSONElement::computeSize(signed char, char const*, int)\n#1  0x000055dfbe21eb50 mongo::BSONObj::getField(mongo::StringData) const\n#2  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#10 0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#16 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#18 0x000055dfbceab26c mongo::Pipeline::getNext()\n#19 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f54e9464b43 start_thread\n#53 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2884",
                            "connectionId": 2884,
                            "client": "127.0.0.1:40482",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216790,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "47rg3igOSoyylM/pufp+Uw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24772311,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "47rg3igOSoyylM/pufp+Uw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4403,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4405
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "51992": {
            "threadId": "51992",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "51992",
                    "threadName": "conn2907",
                    "threadCpu": 53.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164844",
                    "threadStack": "TID 51992:\n#0  0x000055dfbc9a0289 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2907",
                            "connectionId": 2907,
                            "client": "127.0.0.1:40532",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216824,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "xASYGr04T3mh9MaVoAlW7g==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24727448,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "xASYGr04T3mh9MaVoAlW7g==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4254,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4256
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52026": {
            "threadId": "52026",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "52026",
                    "threadName": "conn2919",
                    "threadCpu": 34.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164334",
                    "threadStack": "TID 52026:\n#0  0x000055dfbdb65367 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2919",
                            "connectionId": 2919,
                            "client": "127.0.0.1:40558",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216857,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "1M0Bqj74QAGVgUtlCezsOg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24630737,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "1M0Bqj74QAGVgUtlCezsOg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 4569,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 4571
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "52035": {
            "threadId": "52035",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "52035",
                    "threadName": "conn2927",
                    "threadCpu": 53.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656381164794",
                    "threadStack": "TID 52035:\n#0  0x000055dfbbadf717 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn2927",
                            "connectionId": 2927,
                            "client": "127.0.0.1:40576",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T07:22:46.841+05:30",
                            "threaded": true,
                            "opid": 216864,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "aNuevXJxSBydntj5/SxAMw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 24,
                            "microsecs_running": 24557707,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "aNuevXJxSBydntj5/SxAMw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 5405,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 5407
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        }
    }
}