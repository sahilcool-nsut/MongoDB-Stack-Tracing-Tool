{
    "threads": {
        "93459": {
            "threadId": "93459",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93459",
                    "threadName": "conn4104",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091014",
                    "threadStack": "TID 93459:\n#0  0x000055dfbc9a0230 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4104",
                            "connectionId": 4104,
                            "client": "127.0.0.1:43142",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465214,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "4dbx8jVqSwef60/5gC7GWA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66737960,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "4dbx8jVqSwef60/5gC7GWA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14728,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14730
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93459",
                    "threadName": "conn4104",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094786",
                    "threadStack": "TID 93459:\n#0  0x000055dfbb9e4860 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4104",
                            "connectionId": 4104,
                            "client": "127.0.0.1:43142",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465214,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "4dbx8jVqSwef60/5gC7GWA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68739859,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "4dbx8jVqSwef60/5gC7GWA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15030,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15032
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93467": {
            "threadId": "93467",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93467",
                    "threadName": "conn4108",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091069",
                    "threadStack": "TID 93467:\n#0  0x000055dfbe21ebc6 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4108",
                            "connectionId": 4108,
                            "client": "127.0.0.1:43150",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465215,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "2KBWNOOPSNubMuK/CtMEQw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66737723,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "2KBWNOOPSNubMuK/CtMEQw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15162,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15164
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93471": {
            "threadId": "93471",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93471",
                    "threadName": "conn4111",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404090764",
                    "threadStack": "TID 93471:\n#0  0x000055dfbe21eae0 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4111",
                            "connectionId": 4111,
                            "client": "127.0.0.1:43156",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465219,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66737009,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14219,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14221
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93471",
                    "threadName": "conn4111",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093687",
                    "threadStack": "TID 93471:\n#0  0x000055dfbbaddf72 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4111",
                            "connectionId": 4111,
                            "client": "127.0.0.1:43156",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465219,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68738936,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14354,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14356
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93471",
                    "threadName": "conn4111",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096481",
                    "threadStack": "TID 93471:\n#0  0x000055dfbba3db39 __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4111",
                            "connectionId": 4111,
                            "client": "127.0.0.1:43156",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465219,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69986308,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "UoFJXt1XRuSqtZonnUEmug==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14623,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14625
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93521": {
            "threadId": "93521",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93521",
                    "threadName": "conn4121",
                    "threadCpu": 92.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404090562",
                    "threadStack": "TID 93521:\n#0  0x000055dfbbade770 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4121",
                            "connectionId": 4121,
                            "client": "127.0.0.1:43178",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465242,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ZBRvfRdtQMK+NemVA9JVxw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66705928,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ZBRvfRdtQMK+NemVA9JVxw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 17647,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 17649
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93521",
                    "threadName": "conn4121",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093502",
                    "threadStack": "TID 93521:\n#0  0x000055dfbe21eae0 mongo::BSONObj::getField(mongo::StringData) const\n#1  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#8  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#9  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#10 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#12 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#15 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#16 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#17 0x000055dfbceab26c mongo::Pipeline::getNext()\n#18 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#19 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#20 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#21 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#25 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#26 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#27 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#28 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#29 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#30 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#31 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#32 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#35 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#40 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#41 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#42 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#43 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#44 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#45 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#48 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#51 0x00007f54e9464b43 start_thread\n#52 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4121",
                            "connectionId": 4121,
                            "client": "127.0.0.1:43178",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465242,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ZBRvfRdtQMK+NemVA9JVxw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68707857,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ZBRvfRdtQMK+NemVA9JVxw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18066,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18068
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93533": {
            "threadId": "93533",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93533",
                    "threadName": "conn4128",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404090946",
                    "threadStack": "TID 93533:\n#0  0x000055dfbba3db83 __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4128",
                            "connectionId": 4128,
                            "client": "127.0.0.1:43194",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465253,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "uMpfLlkxQkOfeUnlxDwI7A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66701748,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "uMpfLlkxQkOfeUnlxDwI7A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15493,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15495
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93533",
                    "threadName": "conn4128",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093406",
                    "threadStack": "TID 93533:\n#0  0x000055dfbe2e4e66 pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#1  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#2  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#3  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#4  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4128",
                            "connectionId": 4128,
                            "client": "127.0.0.1:43194",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465253,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "uMpfLlkxQkOfeUnlxDwI7A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68703639,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "uMpfLlkxQkOfeUnlxDwI7A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15642,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15644
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93534": {
            "threadId": "93534",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93534",
                    "threadName": "conn4129",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091093",
                    "threadStack": "TID 93534:\n#0  0x000055dfbba3fc71 __wt_cursor_get_keyv\n#1  0x000055dfbba404cb __wt_cursor_get_key\n#2  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#3  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4129",
                            "connectionId": 4129,
                            "client": "127.0.0.1:43192",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465258,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6Z6qJdO4RcO0J61ihgJXmw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66697143,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6Z6qJdO4RcO0J61ihgJXmw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13065,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13067
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93534",
                    "threadName": "conn4129",
                    "threadCpu": 36.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093796",
                    "threadStack": "TID 93534:\n#0  0x000055dfbe2e5429 pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#1  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#2  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4129",
                            "connectionId": 4129,
                            "client": "127.0.0.1:43192",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465258,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6Z6qJdO4RcO0J61ihgJXmw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68699115,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6Z6qJdO4RcO0J61ihgJXmw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13183,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13185
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93535": {
            "threadId": "93535",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93535",
                    "threadName": "conn4130",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091039",
                    "threadStack": "TID 93535:\n#0  0x000055dfbd001992 mongo::WorkingSet::free(unsigned long)\n#1  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4130",
                            "connectionId": 4130,
                            "client": "127.0.0.1:43196",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465266,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "rkC4YPj7SH+uwQNOtMo4Mw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66690953,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "rkC4YPj7SH+uwQNOtMo4Mw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13419,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13421
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93535",
                    "threadName": "conn4130",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093582",
                    "threadStack": "TID 93535:\n#0  0x000055dfbba419f5 __wt_cursor_get_value\n#1  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4130",
                            "connectionId": 4130,
                            "client": "127.0.0.1:43196",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465266,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "rkC4YPj7SH+uwQNOtMo4Mw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68692855,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "rkC4YPj7SH+uwQNOtMo4Mw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13561,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13563
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93543": {
            "threadId": "93543",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93543",
                    "threadName": "conn4135",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091154",
                    "threadStack": "TID 93543:\n#0  0x000055dfbd123dd1 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4135",
                            "connectionId": 4135,
                            "client": "127.0.0.1:43206",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465245,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "MTBfJrGSTFuiFS1qHf5aAw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66703141,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "MTBfJrGSTFuiFS1qHf5aAw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 17539,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 17541
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93566": {
            "threadId": "93566",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93566",
                    "threadName": "conn4143",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091131",
                    "threadStack": "TID 93566:\n#0  0x000055dfbc98d61a mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#1  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4143",
                            "connectionId": 4143,
                            "client": "127.0.0.1:43222",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465280,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "anDQbLnpTNerV5G390JjNw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66666104,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "anDQbLnpTNerV5G390JjNw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16920,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16922
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93566",
                    "threadName": "conn4143",
                    "threadCpu": 40.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093804",
                    "threadStack": "TID 93566:\n#0  0x000055dfbb9e65f0 mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4143",
                            "connectionId": 4143,
                            "client": "127.0.0.1:43222",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465280,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "anDQbLnpTNerV5G390JjNw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68668004,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "anDQbLnpTNerV5G390JjNw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 17243,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 17245
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93597": {
            "threadId": "93597",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93597",
                    "threadName": "conn4155",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091286",
                    "threadStack": "TID 93597:\n#0  0x000055dfbc98ef40 mongo::WorkingSetMatchableDocument::releaseIterator(mongo::ElementIterator*) const\n#1  0x000055dfbc9a0328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4155",
                            "connectionId": 4155,
                            "client": "127.0.0.1:43246",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465298,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "/X/ENKOoTHW/1pf1BJh0wQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66634243,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "/X/ENKOoTHW/1pf1BJh0wQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15287,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15289
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93618": {
            "threadId": "93618",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93618",
                    "threadName": "conn4159",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091522",
                    "threadStack": "TID 93618:\n#0  0x000055dfbd00161e mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x000055dfbd0018a0 mongo::WorkingSetMember::clear()\n#2  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#3  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4159",
                            "connectionId": 4159,
                            "client": "127.0.0.1:43256",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465303,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "A+uMlu9bRpW6oY0wvm0tgg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66629235,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "A+uMlu9bRpW6oY0wvm0tgg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16597,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16599
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93622": {
            "threadId": "93622",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93622",
                    "threadName": "conn4163",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091314",
                    "threadStack": "TID 93622:\n#0  0x000055dfbde21d2d mongo::DocumentMetadataFields::operator=(mongo::DocumentMetadataFields&&)\n#1  0x000055dfbd00177b mongo::WorkingSetMember::clear()\n#2  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#3  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4163",
                            "connectionId": 4163,
                            "client": "127.0.0.1:43264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465314,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66626174,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16450,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16452
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93622",
                    "threadName": "conn4163",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094123",
                    "threadStack": "TID 93622:\n#0  0x000055dfbcb82810 mongo::PlanYieldPolicy::shouldYieldOrInterrupt(mongo::OperationContext*)\n#1  0x000055dfbca17c93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#6  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#7  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbceab26c mongo::Pipeline::getNext()\n#10 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f54e9464b43 start_thread\n#44 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4163",
                            "connectionId": 4163,
                            "client": "127.0.0.1:43264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465314,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68628133,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16640,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16642
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93622",
                    "threadName": "conn4163",
                    "threadCpu": 27.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096631",
                    "threadStack": "TID 93622:\n#0  0x000055dfbc9b85f5 mongo::ProjectionStage::doWork(unsigned long*)\n#1  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4163",
                            "connectionId": 4163,
                            "client": "127.0.0.1:43264",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465314,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69875486,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "+f3dJ0PsRfOMmMGVZPZksA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16852,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16854
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93626": {
            "threadId": "93626",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93626",
                    "threadName": "conn4166",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091466",
                    "threadStack": "TID 93626:\n#0  0x000055dfbe2d054a pcre_exec\n#1  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4166",
                            "connectionId": 4166,
                            "client": "127.0.0.1:43270",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465301,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "dUl6pgQLShiyNhfF9Y/HIw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66631062,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "dUl6pgQLShiyNhfF9Y/HIw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13692,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13694
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93628": {
            "threadId": "93628",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93628",
                    "threadName": "conn4168",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091348",
                    "threadStack": "TID 93628:\n#0  0x000055dfbbadaf44 __wt_txn_read\n#1  0x000055dfbbadf828 __wt_btcur_next_prefix\n#2  0x000055dfbba2fffe __curfile_next\n#3  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#4  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#6  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4168",
                            "connectionId": 4168,
                            "client": "127.0.0.1:43274",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465327,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "e1sgBwvDQtyRfs74f2VQow==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66615082,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "e1sgBwvDQtyRfs74f2VQow==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14284,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14286
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93628",
                    "threadName": "conn4168",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094527",
                    "threadStack": "TID 93628:\n#0  0x000055dfbdb66775 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#1  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#2  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#3  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#4  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#7  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4168",
                            "connectionId": 4168,
                            "client": "127.0.0.1:43274",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465327,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "e1sgBwvDQtyRfs74f2VQow==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68617012,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "e1sgBwvDQtyRfs74f2VQow==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14401,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14403
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93661": {
            "threadId": "93661",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93661",
                    "threadName": "conn4176",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091044",
                    "threadStack": "TID 93661:\n#0  0x000055dfbbade27f __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4176",
                            "connectionId": 4176,
                            "client": "127.0.0.1:43292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465351,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66600405,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15354,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15356
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93661",
                    "threadName": "conn4176",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094188",
                    "threadStack": "TID 93661:\n#0  0x000055dfbdb6532d mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#1  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4176",
                            "connectionId": 4176,
                            "client": "127.0.0.1:43292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465351,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68602330,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15570,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15572
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93661",
                    "threadName": "conn4176",
                    "threadCpu": 72.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096923",
                    "threadStack": "TID 93661:\n#0  0x000055dfbe4b1546 tc_newarray\n#1  0x000055dfbc98f4a2 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#2  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4176",
                            "connectionId": 4176,
                            "client": "127.0.0.1:43292",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465351,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69849701,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "R3UZWAaESHCOGTFNxoPZ+w==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15873,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15875
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93662": {
            "threadId": "93662",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93662",
                    "threadName": "conn4177",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404090794",
                    "threadStack": "TID 93662:\n#0  0x00007f54e956d981 __strlen_avx2\n#1  0x000055dfbe21eb3b mongo::BSONObj::getField(mongo::StringData) const\n#2  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4177",
                            "connectionId": 4177,
                            "client": "127.0.0.1:43294",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465349,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6BSoWrVNRSm2NnSSUITDFg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66603447,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6BSoWrVNRSm2NnSSUITDFg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 17582,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 17584
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93662",
                    "threadName": "conn4177",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094035",
                    "threadStack": "TID 93662:\n#0  0x000055dfbe073d2d mongo::FieldRef::getPart(unsigned char) const\n#1  0x000055dfbdb667ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4177",
                            "connectionId": 4177,
                            "client": "127.0.0.1:43294",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465349,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6BSoWrVNRSm2NnSSUITDFg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68605414,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6BSoWrVNRSm2NnSSUITDFg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 17742,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 17744
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93667": {
            "threadId": "93667",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93667",
                    "threadName": "conn4181",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091279",
                    "threadStack": "TID 93667:\n#0  0x000055dfbca2c300 mongo::PlanYieldPolicyImpl::restoreState(mongo::OperationContext*, mongo::Yieldable const*)\n#1  0x000055dfbcb82b76 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#2  0x000055dfbca17cc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4181",
                            "connectionId": 4181,
                            "client": "127.0.0.1:43302",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465343,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "KaM20nBjSUWaIyqzYFpcWg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66607014,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "KaM20nBjSUWaIyqzYFpcWg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18340,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18342
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93675": {
            "threadId": "93675",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93675",
                    "threadName": "conn4187",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091555",
                    "threadStack": "TID 93675:\n#0  0x000055dfbba412b6 __wt_cursor_get_valuev\n#1  0x000055dfbba419e5 __wt_cursor_get_value\n#2  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4187",
                            "connectionId": 4187,
                            "client": "127.0.0.1:43314",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465367,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "g5lFQHgKRJ6+jj/wonhOIg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66585570,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "g5lFQHgKRJ6+jj/wonhOIg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15237,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15239
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93681": {
            "threadId": "93681",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93681",
                    "threadName": "conn4191",
                    "threadCpu": 71.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091414",
                    "threadStack": "TID 93681:\n#0  0x000055dfbe2cb010 pcre_exec\n#1  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4191",
                            "connectionId": 4191,
                            "client": "127.0.0.1:43322",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465361,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ewx8G5RYQM+RuY0ycK8BaA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66590004,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ewx8G5RYQM+RuY0ycK8BaA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 12343,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 12345
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93681",
                    "threadName": "conn4191",
                    "threadCpu": 31.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094378",
                    "threadStack": "TID 93681:\n#0  0x000055dfbde18979 mongo::DocumentStorage::reset(mongo::BSONObj const&, bool)\n#1  0x000055dfbd001628 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#2  0x000055dfbd0018a0 mongo::WorkingSetMember::clear()\n#3  0x000055dfbd0019c8 mongo::WorkingSet::free(unsigned long)\n#4  0x000055dfbc98d82f mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#5  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4191",
                            "connectionId": 4191,
                            "client": "127.0.0.1:43322",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465361,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ewx8G5RYQM+RuY0ycK8BaA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68591894,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ewx8G5RYQM+RuY0ycK8BaA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 12521,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 12523
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93683": {
            "threadId": "93683",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93683",
                    "threadName": "conn4192",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091080",
                    "threadStack": "TID 93683:\n#0  0x000055dfbbaddf72 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4192",
                            "connectionId": 4192,
                            "client": "127.0.0.1:43324",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465420,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "S1g6RHnXTUOBTra9xFkOmQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66531731,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "S1g6RHnXTUOBTra9xFkOmQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14658,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14660
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93700": {
            "threadId": "93700",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93700",
                    "threadName": "conn4196",
                    "threadCpu": 32.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091638",
                    "threadStack": "TID 93700:\n#0  0x000055dfbdb65eb6 mongo::BSONElementIterator::more()\n#1  0x000055dfbc9a039d mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4196",
                            "connectionId": 4196,
                            "client": "127.0.0.1:43332",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465359,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "8Q8es36GRLy0F63a9imA7A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66593282,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "8Q8es36GRLy0F63a9imA7A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16511,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16513
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93700",
                    "threadName": "conn4196",
                    "threadCpu": 27.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094726",
                    "threadStack": "TID 93700:\n#0  0x000055dfbba411ec __wt_cursor_get_valuev\n#1  0x000055dfbba419e5 __wt_cursor_get_value\n#2  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4196",
                            "connectionId": 4196,
                            "client": "127.0.0.1:43332",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465359,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "8Q8es36GRLy0F63a9imA7A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68595234,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "8Q8es36GRLy0F63a9imA7A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16636,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16638
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93700",
                    "threadName": "conn4196",
                    "threadCpu": 63.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096918",
                    "threadStack": "TID 93700:\n#0  0x000055dfbba30250 __curfile_next\n#1  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4196",
                            "connectionId": 4196,
                            "client": "127.0.0.1:43332",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465359,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "8Q8es36GRLy0F63a9imA7A==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69842580,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "8Q8es36GRLy0F63a9imA7A==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16835,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16837
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93719": {
            "threadId": "93719",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93719",
                    "threadName": "conn4206",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091554",
                    "threadStack": "TID 93719:\n#0  0x000055dfbd12353c mongo::ComparisonMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#1  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "currentlyComparingValues": "True",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4206",
                            "connectionId": 4206,
                            "client": "127.0.0.1:43352",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465382,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66573445,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18087,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18089
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93719",
                    "threadName": "conn4206",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094236",
                    "threadStack": "TID 93719:\n#0  0x000055dfbbaddc32 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4206",
                            "connectionId": 4206,
                            "client": "127.0.0.1:43352",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465382,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68575369,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18254,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18256
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93719",
                    "threadName": "conn4206",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096589",
                    "threadStack": "TID 93719:\n#0  0x000055dfbcb82ce9 mongo::ElapsedTracker::intervalHasElapsed()\n#1  0x000055dfbca17c93 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#6  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#7  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbceab26c mongo::Pipeline::getNext()\n#10 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f54e9464b43 start_thread\n#44 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4206",
                            "connectionId": 4206,
                            "client": "127.0.0.1:43352",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465382,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69822735,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "V6GsEymLS2G+bGc/TPagHA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18595,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18597
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93720": {
            "threadId": "93720",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93720",
                    "threadName": "conn4207",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091526",
                    "threadStack": "TID 93720:\n#0  0x00007f54e956a020 __memcmp_avx2_movbe\n#1  0x000055dfbe20c27b mongo::(anonymous namespace)::compareElementStringValues(mongo::BSONElement const&, mongo::BSONElement const&)\n#2  0x000055dfbe20f705 mongo::BSONElement::compareElements(mongo::BSONElement const&, mongo::BSONElement const&, unsigned int, mongo::StringData::ComparatorInterface const*)\n#3  0x000055dfbd123522 mongo::ComparisonMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#4  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "currentlyComparingValues": "True",
                        "fetchingNextDocument": "True",
                        "currentlyComparingStringValues": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4207",
                            "connectionId": 4207,
                            "client": "127.0.0.1:43354",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465407,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "HSvFQwR6Q76UYR74K3xccQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66546271,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "HSvFQwR6Q76UYR74K3xccQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 18331,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 18333
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93723": {
            "threadId": "93723",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93723",
                    "threadName": "conn4209",
                    "threadCpu": 21.4,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091490",
                    "threadStack": "TID 93723:\n#0  0x000055dfbc9b84d4 mongo::ProjectionStage::doWork(unsigned long*)\n#1  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4209",
                            "connectionId": 4209,
                            "client": "127.0.0.1:43358",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465379,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "InrGtuHGSTGbyqkPmQZE4Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66577946,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "InrGtuHGSTGbyqkPmQZE4Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14625,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14627
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93723",
                    "threadName": "conn4209",
                    "threadCpu": 90.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096807",
                    "threadStack": "TID 93723:\n#0  0x000055dfbb9f0110 mongo::RecordId::compare(mongo::RecordId const&) const\n#1  0x000055dfbb9e66a0 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4209",
                            "connectionId": 4209,
                            "client": "127.0.0.1:43358",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465379,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "InrGtuHGSTGbyqkPmQZE4Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69827249,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "InrGtuHGSTGbyqkPmQZE4Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15177,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15179
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93737": {
            "threadId": "93737",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93737",
                    "threadName": "conn4213",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091043",
                    "threadStack": "TID 93737:\n#0  0x000055dfbc98e80f mongo::CollectionScan::doWork(unsigned long*)\n#1  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#2  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#3  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#4  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#5  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#6  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#7  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbceab26c mongo::Pipeline::getNext()\n#10 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#11 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#13 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#17 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#18 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#19 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#20 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#21 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#22 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#23 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#24 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#25 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#26 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#27 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#32 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#33 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#34 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#35 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#36 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#37 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#40 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#43 0x00007f54e9464b43 start_thread\n#44 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4213",
                            "connectionId": 4213,
                            "client": "127.0.0.1:43366",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465411,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "nArNjMx7RWysg1X8Ze1dRA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66542156,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "nArNjMx7RWysg1X8Ze1dRA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16679,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16681
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93738": {
            "threadId": "93738",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93738",
                    "threadName": "conn4214",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091350",
                    "threadStack": "TID 93738:\n#0  0x000055dfbbadf798 __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4214",
                            "connectionId": 4214,
                            "client": "127.0.0.1:43368",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465408,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "qwp5v4vtR7+5vgPz4Zn3wg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66546076,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "qwp5v4vtR7+5vgPz4Zn3wg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13187,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13189
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93738",
                    "threadName": "conn4214",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094236",
                    "threadStack": "TID 93738:\n#0  0x000055dfbb920466 mongo::StringData::StringData(char const*, unsigned long)\n#1  0x000055dfbe21eb7d mongo::BSONObj::getField(mongo::StringData) const\n#2  0x000055dfbdb667b8 mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#3  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#4  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#5  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#9  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#10 0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#11 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#12 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#13 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#16 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#17 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#18 0x000055dfbceab26c mongo::Pipeline::getNext()\n#19 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#20 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#21 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#22 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#24 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#25 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#26 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#27 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#28 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#29 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#30 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#31 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#32 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#33 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#36 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#37 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#38 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#39 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#40 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#41 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#42 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#43 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#44 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#45 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#46 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#47 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#48 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#49 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#50 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#51 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#52 0x00007f54e9464b43 start_thread\n#53 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4214",
                            "connectionId": 4214,
                            "client": "127.0.0.1:43368",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465408,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "qwp5v4vtR7+5vgPz4Zn3wg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68547966,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "qwp5v4vtR7+5vgPz4Zn3wg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13319,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13321
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93740": {
            "threadId": "93740",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93740",
                    "threadName": "conn4216",
                    "threadCpu": 17.9,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091610",
                    "threadStack": "TID 93740:\n#0  0x000055dfbb9e4839 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#1  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4216",
                            "connectionId": 4216,
                            "client": "127.0.0.1:43372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465405,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66550651,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14519,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14521
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93740",
                    "threadName": "conn4216",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094547",
                    "threadStack": "TID 93740:\n#0  0x000055dfbba3db35 __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4216",
                            "connectionId": 4216,
                            "client": "127.0.0.1:43372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465405,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68552611,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14848,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14850
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93740",
                    "threadName": "conn4216",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096818",
                    "threadStack": "TID 93740:\n#0  0x000055dfbb9e6341 mongo::WiredTigerRecordStoreCursorBase::next()\n#1  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4216",
                            "connectionId": 4216,
                            "client": "127.0.0.1:43372",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465405,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69799966,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "Soeg3JHAQo+sk9xI12FIWQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15309,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15311
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93759": {
            "threadId": "93759",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93759",
                    "threadName": "conn4230",
                    "threadCpu": 25.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091454",
                    "threadStack": "TID 93759:\n#0  0x000055dfbe4b0807 tc_delete_sized\n#1  0x000055dfbc9a0328 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4230",
                            "connectionId": 4230,
                            "client": "127.0.0.1:43402",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465422,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "HlIKYlNmTkSGqZ/IEGDpww==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66526860,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "HlIKYlNmTkSGqZ/IEGDpww==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16399,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16401
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93759",
                    "threadName": "conn4230",
                    "threadCpu": 59.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094554",
                    "threadStack": "TID 93759:\n#0  0x000055dfbe2cb580 pcre_exec\n#1  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4230",
                            "connectionId": 4230,
                            "client": "127.0.0.1:43402",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465422,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "HlIKYlNmTkSGqZ/IEGDpww==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68528819,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "HlIKYlNmTkSGqZ/IEGDpww==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16579,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16581
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93760": {
            "threadId": "93760",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93760",
                    "threadName": "conn4231",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091606",
                    "threadStack": "TID 93760:\n#0  0x000055dfbba41319 __wt_cursor_get_valuev\n#1  0x000055dfbba419e5 __wt_cursor_get_value\n#2  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4231",
                            "connectionId": 4231,
                            "client": "127.0.0.1:43404",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.619+05:30",
                            "threaded": true,
                            "opid": 465433,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "nZAKRTmkQoCmikFmshtsRw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66484351,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "nZAKRTmkQoCmikFmshtsRw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13498,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13500
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93760",
                    "threadName": "conn4231",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094511",
                    "threadStack": "TID 93760:\n#0  0x000055dfbbae0b6d __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4231",
                            "connectionId": 4231,
                            "client": "127.0.0.1:43404",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465433,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "nZAKRTmkQoCmikFmshtsRw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68486231,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "nZAKRTmkQoCmikFmshtsRw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13607,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13609
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93764": {
            "threadId": "93764",
            "iterations": [
                {
                    "iteration": 0,
                    "threadId": "93764",
                    "threadName": "conn4235",
                    "threadCpu": 28.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404091626",
                    "threadStack": "TID 93764:\n#0  0x000055dfbca17dbf mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#5  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#6  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbceab26c mongo::Pipeline::getNext()\n#9  0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f54e9464b43 start_thread\n#43 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4235",
                            "connectionId": 4235,
                            "client": "127.0.0.1:43412",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:55.620+05:30",
                            "threaded": true,
                            "opid": 465432,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "wJEVxRqWRdCpGJpgpyzczg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 66,
                            "microsecs_running": 66485911,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "wJEVxRqWRdCpGJpgpyzczg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14141,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14143
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 1,
                    "threadId": "93764",
                    "threadName": "conn4235",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094463",
                    "threadStack": "TID 93764:\n#0  0x000055dfbd061ceb mongo::ResourceConsumption::MetricsCollector::get(mongo::OperationContext*)\n#1  0x000055dfbb9e66c5 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#4  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4235",
                            "connectionId": 4235,
                            "client": "127.0.0.1:43412",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465432,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "wJEVxRqWRdCpGJpgpyzczg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68487879,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "wJEVxRqWRdCpGJpgpyzczg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14365,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14367
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93520": {
            "threadId": "93520",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93520",
                    "threadName": "conn4120",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093366",
                    "threadStack": "TID 93520:\n#0  0x000055dfbba419e0 __wt_cursor_get_value\n#1  0x000055dfbb9e66b4 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4120",
                            "connectionId": 4120,
                            "client": "127.0.0.1:43176",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465238,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ejAyzzJpQVaCgG90zS4VHA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68710828,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ejAyzzJpQVaCgG90zS4VHA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15863,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15865
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93520",
                    "threadName": "conn4120",
                    "threadCpu": 81.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096480",
                    "threadStack": "TID 93520:\n#0  0x000055dfbb920ed6 mongo::FailPoint::shouldFail()\n#1  0x000055dfbb9e63ce mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4120",
                            "connectionId": 4120,
                            "client": "127.0.0.1:43176",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.868+05:30",
                            "threaded": true,
                            "opid": 465238,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "ejAyzzJpQVaCgG90zS4VHA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69958219,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "ejAyzzJpQVaCgG90zS4VHA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16046,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16048
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93536": {
            "threadId": "93536",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93536",
                    "threadName": "conn4131",
                    "threadCpu": 68.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093647",
                    "threadStack": "TID 93536:\n#0  0x000055dfbb9f0111 mongo::RecordId::compare(mongo::RecordId const&) const\n#1  0x000055dfbb9e66a0 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4131",
                            "connectionId": 4131,
                            "client": "127.0.0.1:43198",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465268,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "LZQiJ0i4Qqa+plsxfn5FtA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68692648,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "LZQiJ0i4Qqa+plsxfn5FtA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15654,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15656
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93536",
                    "threadName": "conn4131",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096518",
                    "threadStack": "TID 93536:\n#0  0x000055dfbca181ce mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#1  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#2  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#3  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#4  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#5  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#6  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbceab26c mongo::Pipeline::getNext()\n#9  0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#10 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#11 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#12 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#13 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#14 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#16 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#17 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#18 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#19 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#20 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#21 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#22 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#23 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#24 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#25 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#26 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#29 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#30 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#31 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#32 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#33 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#34 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#35 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#36 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#37 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#38 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#39 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#40 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#41 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#42 0x00007f54e9464b43 start_thread\n#43 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4131",
                            "connectionId": 4131,
                            "client": "127.0.0.1:43198",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465268,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "LZQiJ0i4Qqa+plsxfn5FtA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69940020,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "LZQiJ0i4Qqa+plsxfn5FtA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16036,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16038
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93593": {
            "threadId": "93593",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93593",
                    "threadName": "conn4152",
                    "threadCpu": 50.0,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094055",
                    "threadStack": "TID 93593:\n#0  0x000055dfbba3db6b __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4152",
                            "connectionId": 4152,
                            "client": "127.0.0.1:43240",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465294,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "J5sRk+HUQX24TVlPhXLGtA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68635995,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "J5sRk+HUQX24TVlPhXLGtA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16481,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16483
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93593",
                    "threadName": "conn4152",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096757",
                    "threadStack": "TID 93593:\n#0  0x000055dfbc98d60d mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#1  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4152",
                            "connectionId": 4152,
                            "client": "127.0.0.1:43240",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.868+05:30",
                            "threaded": true,
                            "opid": 465294,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "J5sRk+HUQX24TVlPhXLGtA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69883374,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "J5sRk+HUQX24TVlPhXLGtA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16817,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16819
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93668": {
            "threadId": "93668",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93668",
                    "threadName": "conn4182",
                    "threadCpu": 22.7,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093806",
                    "threadStack": "TID 93668:\n#0  0x000055dfbc9a0294 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#1  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#2  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4182",
                            "connectionId": 4182,
                            "client": "127.0.0.1:43304",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465341,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "2kCctu/IQI2O/TRGVspIbg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68609925,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "2kCctu/IQI2O/TRGVspIbg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15357,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15359
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93669": {
            "threadId": "93669",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93669",
                    "threadName": "conn4183",
                    "threadCpu": 59.1,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094542",
                    "threadStack": "TID 93669:\n#0  0x000055dfbbb50460 __wt_row_search\n#1  0x000055dfbbaef05f __wt_btcur_search_near\n#2  0x000055dfbba34dca __curfile_search_near\n#3  0x000055dfbb9e3d78 int mongo::wiredTigerPrepareConflictRetry<mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}>(mongo::OperationContext*, mongo::WiredTigerRecordStoreCursorBase::restore(bool)::{lambda()#1}&&)\n#4  0x000055dfbb9e4112 mongo::WiredTigerRecordStoreCursorBase::restore(bool)\n#5  0x000055dfbc98d9ad mongo::CollectionScan::doRestoreStateRequiresCollection()\n#6  0x000055dfbc9bda56 mongo::RequiresCollectionStage::doRestoreState(mongo::RestoreContext const&)\n#7  0x000055dfbc9b8332 mongo::PlanStage::restoreState(mongo::RestoreContext const&)\n#8  0x000055dfbc9b8332 mongo::PlanStage::restoreState(mongo::RestoreContext const&)\n#9  0x000055dfbca16279 mongo::PlanExecutorImpl::restoreStateWithoutRetrying(mongo::RestoreContext const&, mongo::Yieldable const*)\n#10 0x000055dfbca2c333 mongo::PlanYieldPolicyImpl::restoreState(mongo::OperationContext*, mongo::Yieldable const*)\n#11 0x000055dfbcb82b76 mongo::PlanYieldPolicy::yieldOrInterrupt(mongo::OperationContext*, std::function<void ()>)\n#12 0x000055dfbca17cc7 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#13 0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#15 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#16 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#17 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#18 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#19 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#20 0x000055dfbceab26c mongo::Pipeline::getNext()\n#21 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#22 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#23 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#24 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#25 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#26 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#27 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#28 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#29 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#30 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#31 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#32 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#33 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#34 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#35 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#36 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#37 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#38 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#39 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#40 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#41 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#42 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#43 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#44 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#45 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#46 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#47 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#48 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#49 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#50 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#51 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#52 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#53 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#54 0x00007f54e9464b43 start_thread\n#55 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4183",
                            "connectionId": 4183,
                            "client": "127.0.0.1:43306",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465353,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "6x6pkdfAS8qBxVtPGYIyXw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68599337,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "6x6pkdfAS8qBxVtPGYIyXw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13799,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13801
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93703": {
            "threadId": "93703",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93703",
                    "threadName": "conn4199",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094435",
                    "threadStack": "TID 93703:\n#0  0x000055dfbc98d60d mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#1  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4199",
                            "connectionId": 4199,
                            "client": "127.0.0.1:43338",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465381,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "3ektuwsjQl+PMGUp+0m6Rw==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68576485,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "3ektuwsjQl+PMGUp+0m6Rw==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14860,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14862
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93735": {
            "threadId": "93735",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93735",
                    "threadName": "conn4211",
                    "threadCpu": 63.6,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094475",
                    "threadStack": "TID 93735:\n#0  0x000055dfbd001633 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x000055dfbc98e8bc mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#3  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4211",
                            "connectionId": 4211,
                            "client": "127.0.0.1:43362",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465409,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "G1QH6HWJQeqTgxGkALyRUg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68548027,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "G1QH6HWJQeqTgxGkALyRUg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 13664,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 13666
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93748": {
            "threadId": "93748",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93748",
                    "threadName": "conn4224",
                    "threadCpu": 45.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094611",
                    "threadStack": "TID 93748:\n#0  0x000055dfbba3dade __wt_struct_unpackv\n#1  0x000055dfbba3feda __wt_cursor_get_keyv\n#2  0x000055dfbba404cb __wt_cursor_get_key\n#3  0x000055dfbb9e4813 mongo::WiredTigerRecordStoreStandardCursor::getKey(__wt_cursor*) const\n#4  0x000055dfbb9e65c9 mongo::WiredTigerRecordStoreCursorBase::next()\n#5  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4224",
                            "connectionId": 4224,
                            "client": "127.0.0.1:43390",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.622+05:30",
                            "threaded": true,
                            "opid": 465406,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "LbowSMLjTgSDiZztWn8UiA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68552246,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "LbowSMLjTgSDiZztWn8UiA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15138,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15140
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                },
                {
                    "iteration": 2,
                    "threadId": "93748",
                    "threadName": "conn4224",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096778",
                    "threadStack": "TID 93748:\n#0  0x000055dfbbd0b39d mongo::BSONElement::numberDouble() const\n#1  0x000055dfbd123501 mongo::ComparisonMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#2  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#3  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#4  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#5  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#6  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#7  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#8  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#11 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbceab26c mongo::Pipeline::getNext()\n#14 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#15 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#16 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#17 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#21 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#22 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#23 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#24 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#25 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#26 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#27 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#28 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#31 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#36 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#37 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#38 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#39 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#40 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#41 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#44 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#47 0x00007f54e9464b43 start_thread\n#48 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "currentlyComparingValues": "True",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4224",
                            "connectionId": 4224,
                            "client": "127.0.0.1:43390",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465406,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "LbowSMLjTgSDiZztWn8UiA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69799615,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "LbowSMLjTgSDiZztWn8UiA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15334,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15336
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93755": {
            "threadId": "93755",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93755",
                    "threadName": "conn4227",
                    "threadCpu": 27.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404093858",
                    "threadStack": "TID 93755:\n#0  0x000055dfbe2cb2c7 pcre_exec\n#1  0x000055dfbe2e4e18 pcrecpp::RE::TryMatch(pcrecpp::StringPiece const&, int, pcrecpp::RE::Anchor, bool, int*, int) const\n#2  0x000055dfbe2e4e9a pcrecpp::RE::DoMatchImpl(pcrecpp::StringPiece const&, pcrecpp::RE::Anchor, int*, pcrecpp::Arg const* const*, int, int*, int) const\n#3  0x000055dfbe2e543f pcrecpp::RE::PartialMatch(pcrecpp::StringPiece const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&, pcrecpp::Arg const&) const\n#4  0x000055dfbd123e53 mongo::RegexMatchExpression::matchesSingleElement(mongo::BSONElement const&, mongo::MatchDetails*) const\n#5  0x000055dfbc9a0304 mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#6  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#7  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#8  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#9  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#10 0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#11 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#12 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#13 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#14 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#15 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#16 0x000055dfbceab26c mongo::Pipeline::getNext()\n#17 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#18 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#19 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#20 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#23 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#24 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#25 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#26 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#27 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#28 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#29 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#30 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#31 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#32 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#33 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#34 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#35 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#36 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#38 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#39 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#40 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#41 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#42 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#43 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#44 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#46 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#47 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#49 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#50 0x00007f54e9464b43 start_thread\n#51 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching 'Regex' expression",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4227",
                            "connectionId": 4227,
                            "client": "127.0.0.1:43396",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465419,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "JmBo6CqmTziLtz4guAYTkA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68538523,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$regex": "/^me/i"
                                            }
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "JmBo6CqmTziLtz4guAYTkA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15291,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15293
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93762": {
            "threadId": "93762",
            "iterations": [
                {
                    "iteration": 1,
                    "threadId": "93762",
                    "threadName": "conn4233",
                    "threadCpu": 27.3,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404094308",
                    "threadStack": "TID 93762:\n#0  0x000055dfbe073d00 mongo::FieldRef::getPart(unsigned char) const\n#1  0x000055dfbdb667ad mongo::getFieldDottedOrArray(mongo::BSONObj const&, mongo::FieldRef const&, unsigned long*, unsigned long)\n#2  0x000055dfbdb653d8 mongo::BSONElementIterator::BSONElementIterator(mongo::ElementPath const*, mongo::BSONObj const&)\n#3  0x000055dfbc98f4b5 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#4  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#5  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#6  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#7  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#8  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#9  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#10 0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#13 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#14 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#15 0x000055dfbceab26c mongo::Pipeline::getNext()\n#16 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#17 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#18 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#19 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#22 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#23 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#24 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#25 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#26 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#27 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#28 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#29 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#30 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#33 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#34 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#35 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#37 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#38 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#39 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#40 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#41 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#42 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#43 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#45 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#46 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#48 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#49 0x00007f54e9464b43 start_thread\n#50 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4233",
                            "connectionId": 4233,
                            "client": "127.0.0.1:43408",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:57.621+05:30",
                            "threaded": true,
                            "opid": 465429,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "8dk2DWQIQZKGeIFV7mUJ0Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 68,
                            "microsecs_running": 68519320,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "8dk2DWQIQZKGeIFV7mUJ0Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 14051,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 14053
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93475": {
            "threadId": "93475",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "93475",
                    "threadName": "conn4113",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096751",
                    "threadStack": "TID 93475:\n#0  0x000055dfbbaddead __wt_btcur_next_prefix\n#1  0x000055dfbba2fffe __curfile_next\n#2  0x000055dfbb9e63e7 mongo::WiredTigerRecordStoreCursorBase::next()\n#3  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbc9b8503 mongo::ProjectionStage::doWork(unsigned long*)\n#5  0x000055dfbc9c36ad mongo::SortStage::doWork(unsigned long*)\n#6  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#7  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#8  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#9  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#12 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#13 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#14 0x000055dfbceab26c mongo::Pipeline::getNext()\n#15 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#16 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#17 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#18 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#20 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#21 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#22 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#23 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#24 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#25 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#26 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#27 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#28 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#29 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#32 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#33 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#34 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#35 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#36 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#37 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#38 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#39 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#40 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#41 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#42 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#43 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#44 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#45 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#46 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#47 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#48 0x00007f54e9464b43 start_thread\n#49 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "includesSortingStag": "True",
                        "includesProjectionStage": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4113",
                            "connectionId": 4113,
                            "client": "127.0.0.1:43160",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465223,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "4KD8KLsZT32Jgdw1PHXk5Q==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69983905,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": {
                                                "$in": [
                                                    "/Yo/",
                                                    "/mi/",
                                                    "/ma/"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "$sort": {
                                            "age": 1,
                                            "date": -1
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": null,
                                            "amount": {
                                                "$sum": {
                                                    "$add": [
                                                        "$date",
                                                        "$age"
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "4KD8KLsZT32Jgdw1PHXk5Q==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16916,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16918
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93552": {
            "threadId": "93552",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "93552",
                    "threadName": "conn4139",
                    "threadCpu": 54.5,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404097057",
                    "threadStack": "TID 93552:\n#0  0x000055dfbd0015c6 mongo::WorkingSetMember::resetDocument(mongo::SnapshotId, mongo::BSONObj const&)\n#1  0x000055dfbc98e8bc mongo::CollectionScan::doWork(unsigned long*)\n#2  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#3  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#4  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#5  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#6  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#7  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#8  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#9  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#10 0x000055dfbceab26c mongo::Pipeline::getNext()\n#11 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#12 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#13 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#14 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#15 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#18 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#19 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#20 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#21 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#22 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#23 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#24 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#25 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#26 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#27 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#28 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#29 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#30 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#31 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#33 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#34 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#35 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#36 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#37 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#38 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#39 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#41 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#42 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#44 0x00007f54e9464b43 start_thread\n#45 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4139",
                            "connectionId": 4139,
                            "client": "127.0.0.1:43214",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465255,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "pFibX5ofT8Wsw9kLF73dtA==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69949223,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "pFibX5ofT8Wsw9kLF73dtA==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 15516,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 15518
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93565": {
            "threadId": "93565",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "93565",
                    "threadName": "conn4142",
                    "threadCpu": 31.8,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096958",
                    "threadStack": "TID 93565:\n#0  0x000055dfbc98f4d9 mongo::WorkingSetMatchableDocument::allocateIterator(mongo::ElementPath const*) const\n#1  0x000055dfbc9a026a mongo::PathMatchExpression::matches(mongo::MatchableDocument const*, mongo::MatchDetails*) const\n#2  0x000055dfbc98d613 mongo::CollectionScan::returnIfMatches(mongo::WorkingSetMember*, unsigned long, unsigned long*)\n#3  0x000055dfbc98e8ed mongo::CollectionScan::doWork(unsigned long*)\n#4  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#5  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#6  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#7  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#8  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#9  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#10 0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#11 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#12 0x000055dfbceab26c mongo::Pipeline::getNext()\n#13 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#14 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#15 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#16 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#19 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#20 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#21 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#22 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#23 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#24 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#25 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#26 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#27 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#28 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#29 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#30 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#31 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#32 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#34 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#35 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#36 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#37 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#38 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#39 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#40 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#42 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#43 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#45 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#46 0x00007f54e9464b43 start_thread\n#47 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "currentlyMatchingDocuments": "Matching Path for expression (still deciding path)",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4142",
                            "connectionId": 4142,
                            "client": "127.0.0.1:43220",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.868+05:30",
                            "threaded": true,
                            "opid": 465282,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "oblpFHyOQDu1cl+c0nVvaQ==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69905845,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "oblpFHyOQDu1cl+c0nVvaQ==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16004,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16006
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        },
        "93741": {
            "threadId": "93741",
            "iterations": [
                {
                    "iteration": 2,
                    "threadId": "93741",
                    "threadName": "conn4217",
                    "threadCpu": 18.2,
                    "threadState": "R",
                    "threadStackTimeStamp": "1656404096879",
                    "threadStack": "TID 93741:\n#0  0x000055dfbb9f6942 mongo::WiredTigerRecoveryUnit::getSession()\n#1  0x000055dfbb9e6390 mongo::WiredTigerRecordStoreCursorBase::next()\n#2  0x000055dfbc98e725 mongo::CollectionScan::doWork(unsigned long*)\n#3  0x000055dfbca17d27 mongo::PlanExecutorImpl::_getNextImpl(mongo::Snapshotted<mongo::Document>*, mongo::RecordId*)\n#4  0x000055dfbca18acb mongo::PlanExecutorImpl::getNextDocument(mongo::Document*, mongo::RecordId*)\n#5  0x000055dfbc9e3f57 mongo::DocumentSourceCursor::loadBatch()\n#6  0x000055dfbc9e42f8 mongo::DocumentSourceCursor::doGetNext()\n#7  0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#8  0x000055dfbce3225d mongo::DocumentSourceGroup::initialize()\n#9  0x000055dfbce32379 mongo::DocumentSourceGroup::doGetNext()\n#10 0x000055dfbc603fd8 mongo::DocumentSource::getNext()\n#11 0x000055dfbceab26c mongo::Pipeline::getNext()\n#12 0x000055dfbc9ed349 mongo::PlanExecutorPipeline::_getNext()\n#13 0x000055dfbc9ed3ec mongo::PlanExecutorPipeline::getNextDocument(mongo::Document*, mongo::RecordId*)\n#14 0x000055dfbc9ed56e mongo::PlanExecutorPipeline::getNext(mongo::BSONObj*, mongo::RecordId*)\n#15 0x000055dfbc49cc6f mongo::runAggregate(mongo::OperationContext*, mongo::NamespaceString const&, mongo::AggregateCommandRequest const&, mongo::LiteParsedPipeline const&, mongo::BSONObj const&, std::vector<mongo::Privilege, std::allocator<mongo::Privilege> > const&, mongo::rpc::ReplyBuilderInterface*)\n#16 0x000055dfbc4929c5 mongo::(anonymous namespace)::PipelineCommand::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)\n#17 0x000055dfbd0af74f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)\n#18 0x000055dfbd0b48be mongo::CommandHelpers::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>, mongo::transport::ServiceExecutor::ThreadingModel)\n#19 0x000055dfbb94e907 mongo::(anonymous namespace)::runCommandInvocation(std::shared_ptr<mongo::RequestExecutionContext>, std::shared_ptr<mongo::CommandInvocation>)\n#20 0x000055dfbb960f56 mongo::(anonymous namespace)::RunCommandImpl::_runCommand()\n#21 0x000055dfbb9617e6 mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runCommandWithFailPoint()\n#22 0x000055dfbb961d4c mongo::(anonymous namespace)::RunCommandAndWaitForWriteConcern::_runImpl()\n#23 0x000055dfbb952f4c mongo::(anonymous namespace)::RunCommandImpl::run()\n#24 0x000055dfbb954fee mongo::(anonymous namespace)::ExecCommandDatabase::_commandExec()\n#25 0x000055dfbb95dc00 mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}::operator()()\n#26 0x000055dfbb95fdf0 mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#2}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#27 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#28 0x000055dfbb9641a2 auto mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::generalImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::future_details::FakeVoid&&)#1}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda(mongo::Status&&)#2}&&, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::propagateResultTo(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*) &&::{lambda()#3}&&)\n#29 0x000055dfbb9575fc mongo::unique_function<void (mongo::future_details::SharedStateBase*)>::makeImpl<mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::makeContinuation<void, mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}>(mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&) &&::{lambda()#3}::operator()() const::{lambda(mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*, mongo::future_details::SharedStateImpl<mongo::future_details::FakeVoid>*)#1}&&)::{lambda(mongo::future_details::SharedStateBase*)#1}>(mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)::{lambda()#1}&&)::SpecificImpl::call(mongo::future_details::SharedStateBase*&&)\n#30 0x000055dfbb91a967 mongo::future_details::SharedStateBase::transitionToFinished()\n#31 0x000055dfbb95e5ea mongo::(anonymous namespace)::executeCommand(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#32 0x000055dfbb95f01e mongo::(anonymous namespace)::receivedCommands(std::shared_ptr<mongo::(anonymous namespace)::HandleRequest::ExecutionContext>)\n#33 0x000055dfbb95fd36 mongo::(anonymous namespace)::CommandOpRunner::run()\n#34 0x000055dfbb959fe7 mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, std::unique_ptr<mongo::ServiceEntryPointCommon::Hooks const, std::default_delete<mongo::ServiceEntryPointCommon::Hooks const> >)\n#35 0x000055dfbb949e4f mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)\n#36 0x000055dfbb9a1097 mongo::transport::ServiceStateMachine::Impl::processMessage()\n#37 0x000055dfbb9a13c7 mongo::future_details::FutureImpl<mongo::future_details::FakeVoid>::then<mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}>(mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)::{lambda()#2}&&) &&::{lambda(mongo::future_details::FakeVoid&&)#1}::operator()(mongo::future_details::FakeVoid&&) const [clone .isra.717]\n#38 0x000055dfbb9a3d28 mongo::transport::ServiceStateMachine::Impl::startNewLoop(mongo::Status const&)\n#39 0x000055dfbb9a422f mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceStateMachine::Impl::scheduleNewLoop(mongo::Status)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#40 0x000055dfbda3f9c1 mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}>(mongo::transport::ServiceExecutorSynchronous::runOnDataAvailable(std::shared_ptr<mongo::transport::Session> const&, mongo::unique_function<void (mongo::Status)>)::{lambda(mongo::Status)#1}&&)::SpecificImpl::call(mongo::Status&&)\n#41 0x000055dfbc083ed3 mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}>(mongo::transport::ServiceExecutor::schedule(mongo::unique_function<void (mongo::Status)>)::{lambda()#1}&&)::SpecificImpl::call()\n#42 0x000055dfbda3fb7b mongo::unique_function<void ()>::makeImpl<mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}>(mongo::transport::ServiceExecutorSynchronous::scheduleTask(mongo::unique_function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags)::{lambda()#2}&&)::SpecificImpl::call()\n#43 0x000055dfbda43a2c mongo::unique_function<void ()>::makeImpl<mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}>(mongo::launchServiceWorkerThread(mongo::unique_function<void ()>)::{lambda()#4}&&)::SpecificImpl::call()\n#44 0x000055dfbda43a9c mongo::(anonymous namespace)::runFunc(void*)\n#45 0x00007f54e9464b43 start_thread\n#46 0x00007f54e94f6a00 __clone3\n",
                    "analysis": {
                        "includesCollectionScan": "True",
                        "queryType": "Aggregation",
                        "fetchingNextDocument": "True"
                    },
                    "currentOp": {
                        "command": {
                            "type": "op",
                            "host": "sahilchawla-HP-Pavilion:27017",
                            "desc": "conn4217",
                            "connectionId": 4217,
                            "client": "127.0.0.1:43374",
                            "clientMetadata": {
                                "driver": {
                                    "name": "PyMongo",
                                    "version": "4.1.1"
                                },
                                "os": {
                                    "type": "Linux",
                                    "name": "Linux",
                                    "architecture": "x86_64",
                                    "version": "5.15.0-39-generic"
                                },
                                "platform": "CPython 3.10.4.final.0"
                            },
                            "active": true,
                            "currentOpTime": "2022-06-28T13:44:58.869+05:30",
                            "threaded": true,
                            "opid": 465402,
                            "lsid": {
                                "id": {
                                    "$binary": {
                                        "base64": "aA8boHaLTciatrp7K5gLNg==",
                                        "subType": "04"
                                    }
                                },
                                "uid": {
                                    "$binary": {
                                        "base64": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
                                        "subType": "00"
                                    }
                                }
                            },
                            "secs_running": 69,
                            "microsecs_running": 69805768,
                            "op": "command",
                            "ns": "testDB.largestCollection",
                            "command": {
                                "aggregate": "largestCollection",
                                "pipeline": [
                                    {
                                        "$match": {
                                            "name": "Sahil"
                                        }
                                    },
                                    {
                                        "$group": {
                                            "_id": 1,
                                            "n": {
                                                "$sum": 1
                                            }
                                        }
                                    }
                                ],
                                "cursor": {},
                                "lsid": {
                                    "id": {
                                        "$binary": {
                                            "base64": "aA8boHaLTciatrp7K5gLNg==",
                                            "subType": "04"
                                        }
                                    }
                                },
                                "$db": "testDB"
                            },
                            "planSummary": "COLLSCAN",
                            "numYields": 16310,
                            "locks": {
                                "Global": "r"
                            },
                            "waitingForLock": false,
                            "lockStats": {
                                "Global": {
                                    "acquireCount": {
                                        "r": 16312
                                    }
                                },
                                "Mutex": {
                                    "acquireCount": {
                                        "r": 2
                                    }
                                }
                            },
                            "waitingForFlowControl": false,
                            "flowControlStats": {}
                        }
                    }
                }
            ]
        }
    }
}