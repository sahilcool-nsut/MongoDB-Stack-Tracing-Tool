PID 20996 - process
TID 20996:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563847edaef7 mongo::waitForShutdown()
#3  0x00005638460d28b4 mongo::(anonymous namespace)::_initAndListen(mongo::ServiceContext*, int) [clone .isra.1584]
#4  0x00005638460d49cb mongo::(anonymous namespace)::mongoDbMain(int, char**, char**)
#5  0x0000563846045fc9 main
#6  0x00007f5821fac13a __libc_start_main
#7  0x00005638460d015e _start
TID 20997:
#0  0x00007f5821fbfbb1 sigwaitinfo
#1  0x000056384691fb2a mongo::(anonymous namespace)::signalProcessingThread(mongo::LogFileStatus)
#2  0x00005638469200e5 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (*)(mongo::LogFileStatus), mongo::LogFileStatus&, 0>(void (*)(mongo::LogFileStatus), mongo::LogFileStatus&)::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 20998:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563847da6827 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundThreadClockSource::_startTimerThread()::{lambda()#1}, , 0>(mongo::BackgroundThreadClockSource::_startTimerThread()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 20999:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563847a00faa mongo::ThreadPool::_consumeTasks()
#3  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#4  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21000:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21002:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x000056384619bad7 __tiered_server
#3  0x00007f582233d44b start_thread
#4  0x00007f582207840f __clone
TID 21143:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846193b90 __log_file_server
#3  0x00007f582233d44b start_thread
#4  0x00007f582207840f __clone
TID 21144:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x0000563846212113 __wt_cond_auto_wait
#4  0x0000563846195513 __log_wrlsn_server
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21145:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x00005638461941f2 __log_server
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21146:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x0000563846212113 __wt_cond_auto_wait
#4  0x00005638461bfc3c __wt_evict_thread_run
#5  0x0000563846223289 __thread_run
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21147:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x0000563846212113 __wt_cond_auto_wait
#4  0x00005638461bfc3c __wt_evict_thread_run
#5  0x0000563846223289 __thread_run
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21148:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x0000563846212113 __wt_cond_auto_wait
#4  0x00005638461bfc3c __wt_evict_thread_run
#5  0x0000563846223289 __thread_run
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21149:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846212095 __wt_cond_auto_wait_signal
#3  0x0000563846212113 __wt_cond_auto_wait
#4  0x00005638461bfc3c __wt_evict_thread_run
#5  0x0000563846223289 __thread_run
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21150:
#0  0x00007f582234369e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461e3fa9 __wt_cond_wait_signal
#2  0x0000563846199932 __sweep_server
#3  0x00007f582233d44b start_thread
#4  0x00007f582207840f __clone
TID 21151:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x000056384614a403 std::cv_status std::_V2::condition_variable_any::wait_until<std::unique_lock<mongo::latch_detail::Latch>, std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<mongo::latch_detail::Latch>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
#2  0x000056384614bba9 mongo::WiredTigerKVEngine::WiredTigerSessionSweeper::run()
#3  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#4  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21154:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638461519b5 mongo::WiredTigerOplogManager::_updateOplogVisibilityLoop(mongo::WiredTigerSessionCache*, mongo::WiredTigerRecordStore*)
#2  0x0000563846152929 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (mongo::WiredTigerOplogManager::*)(mongo::WiredTigerSessionCache*, mongo::WiredTigerRecordStore*), mongo::WiredTigerOplogManager*, mongo::WiredTigerSessionCache*, mongo::WiredTigerRecordStore*&, 0>(void (mongo::WiredTigerOplogManager::*)(mongo::WiredTigerSessionCache*, mongo::WiredTigerRecordStore*), mongo::WiredTigerOplogManager*&&, mongo::WiredTigerSessionCache*&&, mongo::WiredTigerRecordStore*&)::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21164:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x000056384614a403 std::cv_status std::_V2::condition_variable_any::wait_until<std::unique_lock<mongo::latch_detail::Latch>, std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<mongo::latch_detail::Latch>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
#2  0x000056384614e47f mongo::WiredTigerKVEngine::WiredTigerCheckpointThread::run()
#3  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#4  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21165:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21166:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563846b15098 mongo::JournalFlusher::run()
#2  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#3  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21167:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x000056384614a403 std::cv_status std::_V2::condition_variable_any::wait_until<std::unique_lock<mongo::latch_detail::Latch>, std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::unique_lock<mongo::latch_detail::Latch>&, std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
#2  0x000056384706a93f mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::deadlineMonitorThread()
#3  0x0000563847068c11 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::*)(), mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>*, 0>(void (mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>::*)(), mongo::DeadlineMonitor<mongo::mozjs::MozJSImplScope>*&&)::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21392:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x0000563847d9aa8e mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#3  0x0000563846764113 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::WaitForMajorityService::_periodicallyWaitForMajority(mongo::ServiceContext*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::WaitForMajorityService::_periodicallyWaitForMajority(mongo::ServiceContext*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#4  0x000056384676522f mongo::WaitForMajorityService::_periodicallyWaitForMajority(mongo::ServiceContext*)
#5  0x00005638467667a0 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::WaitForMajorityService::setUp(mongo::ServiceContext*)::{lambda()#1}, , 0>(mongo::WaitForMajorityService::setUp(mongo::ServiceContext*)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#6  0x000056384808ae4f execute_native_thread_routine
#7  0x00007f582233d44b start_thread
#8  0x00007f582207840f __clone
TID 21394:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638465c5fe4 mongo::FTDCController::doLoop()
#2  0x00005638465c670c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FTDCController::start()::{lambda()#2}, , 0>(mongo::FTDCController::start()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21395:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#5  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#6  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21396:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563847a00faa mongo::ThreadPool::_consumeTasks()
#3  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#4  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21397:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638465b25ea mongo::FreeMonMessageQueue::dequeue(mongo::ClockSource*)
#2  0x00005638465af16e mongo::FreeMonProcessor::run()
#3  0x00005638465b6903 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::FreeMonController::start(mongo::RegistrationType, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, mongo::Duration<std::ratio<1l, 1l> >)::{lambda()#1}, , 0>(mongo::FreeMonController::start(mongo::RegistrationType, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, mongo::Duration<std::ratio<1l, 1l> >)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21398:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x0000563847b88bd3 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#3}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x0000563847b8c7c8 mongo::KeysCollectionManager::PeriodicRunner::_doPeriodicRefresh(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, mongo::Duration<std::ratio<1l, 1000l> >)
#7  0x0000563847b8d4d3 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::KeysCollectionManager::PeriodicRunner::start(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1}, , 0>(mongo::KeysCollectionManager::PeriodicRunner::start(mongo::ServiceContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::Duration<std::ratio<1l, 1000l> >)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 21399:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#5  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#6  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21400:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563847a00faa mongo::ThreadPool::_consumeTasks()
#3  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#4  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21401:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x000056384615fba2 mongo::WiredTigerRecordStore::OplogStones::awaitHasExcessStonesOrDead()
#3  0x000056384615fdf5 mongo::WiredTigerRecordStore::yieldAndAwaitOplogDeletionRequest(mongo::OperationContext*)
#4  0x00005638463c77af mongo::OplogCapMaintainerThread::_deleteExcessDocuments()
#5  0x00005638463c7d70 mongo::OplogCapMaintainerThread::run()
#6  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#7  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 21402:
#0  0x00007f582207872c epoll_wait
#1  0x00005638479e2e8e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)
#2  0x00005638479e586d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#3  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#4  0x00005638479eda2e asio::io_context::run()
#5  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#6  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#7  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 21413:
#0  0x00007f5822346dfb __nanosleep
#1  0x0000563847eed936 mongo::sleepsecs(int)
#2  0x0000563846539a2c mongo::TTLMonitor::run()
#3  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#4  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21414:
#0  0x00007f5822346dfb __nanosleep
#1  0x0000563847eed936 mongo::sleepsecs(int)
#2  0x0000563846b503c6 mongo::(anonymous namespace)::ClientCursorMonitor::run()
#3  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#4  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 21415:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847d5a14a mongo::(anonymous namespace)::PeriodicTaskRunner::run()
#2  0x0000563847d5a4c6 mongo::BackgroundJob::jobBody()
#3  0x0000563847d5a78c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::BackgroundJob::go()::{lambda()#2}, , 0>(mongo::BackgroundJob::go()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21416:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563846bf5e68 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::SessionKiller::SessionKiller(mongo::ServiceContext*, std::function<mongo::StatusWith<std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> > > (mongo::OperationContext*, mongo::SessionKiller::Matcher const&, std::linear_congruential_engine<unsigned long, 48271ul, 0ul, 2147483647ul>*)>)::{lambda()#1}, , 0>(mongo::SessionKiller::SessionKiller(mongo::ServiceContext*, std::function<mongo::StatusWith<std::vector<mongo::HostAndPort, std::allocator<mongo::HostAndPort> > > (mongo::OperationContext*, mongo::SessionKiller::Matcher const&, std::linear_congruential_engine<unsigned long, 48271ul, 0ul, 2147483647ul>*)>)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21417:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21418:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21419:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21420:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847da7407 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#2  0x0000563846704aea std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2}, , 0>(mongo::PeriodicRunnerImpl::PeriodicJobImpl::_run()::{lambda()#2})::{lambda()#1}> > >::_M_run()
#3  0x000056384808ae4f execute_native_thread_routine
#4  0x00007f582233d44b start_thread
#5  0x00007f582207840f __clone
TID 21421:
#0  0x00007f582207872c epoll_wait
#1  0x00005638479e2e8e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)
#2  0x00005638479e586d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#3  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#4  0x00005638479eda2e asio::io_context::run()
#5  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#6  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#7  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 21423:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x0000563847d9aa8e mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#3  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#4  0x0000563846576440 mongo::repl::TopologyVersionObserver::_cacheIsMasterResponse(mongo::OperationContext*, boost::optional<mongo::TopologyVersion>)
#5  0x0000563846576dda mongo::repl::TopologyVersionObserver::_workerThreadBody()
#6  0x000056384657741c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::repl::TopologyVersionObserver::init(mongo::ServiceContext*, mongo::repl::ReplicationCoordinator*)::{lambda()#2}, , 0>(mongo::repl::TopologyVersionObserver::init(mongo::ServiceContext*, mongo::repl::ReplicationCoordinator*)::{lambda()#2})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21424:
#0  0x00007f582207872c epoll_wait
#1  0x00005638479e2e8e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)
#2  0x00005638479e586d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#3  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#4  0x00005638479eda2e asio::io_context::run()
#5  0x0000563847897614 mongo::transport::TransportLayerASIO::_runListener()
#6  0x0000563847897a7c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::transport::TransportLayerASIO::start()::{lambda()#1}, , 0>(mongo::transport::TransportLayerASIO::start()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21428:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#5  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#6  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21429:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638465010f7 mongo::repl::OplogBatcher::getNextBatch(mongo::Duration<std::ratio<1l, 1l> >)
#2  0x00005638464a8d77 mongo::repl::OplogApplierImpl::_run(mongo::repl::OplogBuffer*)
#3  0x00005638464ffa48 auto mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::OplogApplier::startup()::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#1}>(mongo::repl::OplogApplier::startup()::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#1}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&)
#4  0x0000563847855013 mongo::executor::ThreadPoolTaskExecutor::runCallback(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>)
#5  0x0000563847855422 auto mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<mongo::latch_detail::Latch>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<mongo::latch_detail::Latch>)::{lambda(auto:1)#3}&&)::SpecificImpl::call(mongo::Status&&)
#6  0x00005638479fe532 mongo::ThreadPool::_doOneTask(std::unique_lock<mongo::latch_detail::Latch>*)
#7  0x0000563847a00b76 mongo::ThreadPool::_consumeTasks()
#8  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#9  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#10 0x000056384808ae4f execute_native_thread_routine
#11 0x00007f582233d44b start_thread
#12 0x00007f582207840f __clone
TID 21430:
#0  0x00007f582207872c epoll_wait
#1  0x00005638479e2e8e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)
#2  0x00005638479e586d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#3  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#4  0x00005638479eda2e asio::io_context::run()
#5  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#6  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#7  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 21432:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x00005638479e03b0 asio_detail_posix_thread_function
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21433:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x000056384652fc7e mongo::repl::AbstractAsyncComponent::join()
#3  0x0000563845d5afa1 mongo::repl::BackgroundSync::_produce() [clone .cold.1241]
#4  0x0000563846455cc6 mongo::repl::BackgroundSync::_runProducer()
#5  0x0000563846455fa0 mongo::repl::BackgroundSync::_run()
#6  0x000056384645605c std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::repl::BackgroundSync::startup(mongo::OperationContext*)::{lambda()#1}, , 0>(mongo::repl::BackgroundSync::startup(mongo::OperationContext*)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#7  0x000056384808ae4f execute_native_thread_routine
#8  0x00007f582233d44b start_thread
#9  0x00007f582207840f __clone
TID 21434:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x00005638464fc5dd mongo::repl::OplogBufferBlockingQueue::waitForData(mongo::Duration<std::ratio<1l, 1l> >)
#2  0x00005638465035ed mongo::repl::OplogBatcher::_run(mongo::repl::StorageInterface*)
#3  0x0000563846503830 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::repl::OplogBatcher::startup(mongo::repl::StorageInterface*)::{lambda()#1}, , 0>(mongo::repl::OplogBatcher::startup(mongo::repl::StorageInterface*)::{lambda()#1})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21435:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x00005638464a3932 mongo::repl::(anonymous namespace)::ApplyBatchFinalizerForJournal::_run()
#3  0x00005638464a27f5 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<void (mongo::repl::(anonymous namespace)::ApplyBatchFinalizerForJournal::*)(), mongo::repl::(anonymous namespace)::ApplyBatchFinalizerForJournal*, 0>(void (mongo::repl::(anonymous namespace)::ApplyBatchFinalizerForJournal::*)(), mongo::repl::(anonymous namespace)::ApplyBatchFinalizerForJournal*&&)::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 21436:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x000056384644daec mongo::repl::Reporter::join()
#3  0x00005638463da9a2 mongo::repl::SyncSourceFeedback::_updateUpstream(mongo::repl::Reporter*)
#4  0x00005638463db1ba mongo::repl::SyncSourceFeedback::run(mongo::executor::TaskExecutor*, mongo::repl::BackgroundSync*, mongo::repl::ReplicationCoordinator*)
#5  0x00005638463d2c52 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::repl::ReplicationCoordinatorExternalStateImpl::startSteadyStateReplication(mongo::OperationContext*, mongo::repl::ReplicationCoordinator*)::{lambda()#4}, , 0>(mongo::repl::ReplicationCoordinatorExternalStateImpl::startSteadyStateReplication(mongo::OperationContext*, mongo::repl::ReplicationCoordinator*)::{lambda()#4})::{lambda()#1}> > >::_M_run()
#6  0x000056384808ae4f execute_native_thread_routine
#7  0x00007f582233d44b start_thread
#8  0x00007f582207840f __clone
TID 21527:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21585:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21718:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21828:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x00005638479e03b0 asio_detail_posix_thread_function
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 1165:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4029:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4030:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4031:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4032:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3797:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x00005638479e03b0 asio_detail_posix_thread_function
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 4110:
#0  0x00007f582207872c epoll_wait
#1  0x00005638479e2e8e asio::detail::epoll_reactor::run(long, asio::detail::op_queue<asio::detail::scheduler_operation>&)
#2  0x00005638479e586d asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#3  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#4  0x00005638479eda2e asio::io_context::run()
#5  0x0000563847899660 mongo::transport::TransportLayerASIO::ASIOReactor::run()
#6  0x0000563847865b78 mongo::executor::NetworkInterfaceTL::_run()
#7  0x0000563847865dbd std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1}, , 0>(mongo::executor::NetworkInterfaceTL::startup()::{lambda()#1})::{lambda()#1}> > >::_M_run()
#8  0x000056384808ae4f execute_native_thread_routine
#9  0x00007f582233d44b start_thread
#10 0x00007f582207840f __clone
TID 4111:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x00005638479e598b asio::detail::scheduler::do_run_one(asio::detail::conditionally_enabled_mutex::scoped_lock&, asio::detail::scheduler_thread_info&, std::error_code const&)
#2  0x00005638479e5df5 asio::detail::scheduler::run(std::error_code&)
#3  0x00005638479eda2e asio::io_context::run()
#4  0x00005638479e03b0 asio_detail_posix_thread_function
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 4112:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4113:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 14320:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 24984:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27834:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x00005638477ffa17 mongo::DBClientConnection::call(mongo::Message&, mongo::Message&, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
#8  0x000056384799caea mongo::DBClientCursor::requestMore()
#9  0x000056384799cbfa mongo::DBClientCursor::more()
#10 0x00005638464f6fe8 mongo::repl::OplogFetcher::_getNextBatch()
#11 0x00005638464f949e mongo::repl::OplogFetcher::_runQuery(mongo::executor::TaskExecutor::CallbackArgs const&)
#12 0x00005638464f9906 auto mongo::unique_function<void (mongo::executor::TaskExecutor::CallbackArgs const&)>::makeImpl<mongo::repl::OplogFetcher::_doStartup_inlock()::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#1}>(mongo::repl::OplogFetcher::_doStartup_inlock()::{lambda(mongo::executor::TaskExecutor::CallbackArgs const&)#1}&&)::SpecificImpl::call(mongo::executor::TaskExecutor::CallbackArgs const&)
#13 0x0000563847855013 mongo::executor::ThreadPoolTaskExecutor::runCallback(std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>)
#14 0x0000563847855422 auto mongo::unique_function<void (mongo::Status)>::makeImpl<mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<mongo::latch_detail::Latch>)::{lambda(auto:1)#3}>(mongo::executor::ThreadPoolTaskExecutor::scheduleIntoPool_inlock(std::__cxx11::list<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState>, std::allocator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > >*, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::_List_iterator<std::shared_ptr<mongo::executor::ThreadPoolTaskExecutor::CallbackState> > const&, std::unique_lock<mongo::latch_detail::Latch>)::{lambda(auto:1)#3}&&)::SpecificImpl::call(mongo::Status&&)
#15 0x00005638479fe532 mongo::ThreadPool::_doOneTask(std::unique_lock<mongo::latch_detail::Latch>*)
#16 0x0000563847a00b76 mongo::ThreadPool::_consumeTasks()
#17 0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#18 0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#19 0x000056384808ae4f execute_native_thread_routine
#20 0x00007f582233d44b start_thread
#21 0x00007f582207840f __clone
TID 10511:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 32643:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 32644:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 7954:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 7955:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13016:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13017:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13027:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13028:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13039:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13051:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13056:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13057:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13070:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13072:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13077:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13079:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17860:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17865:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17866:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17867:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10691:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10694:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31271:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31273:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 692:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 694:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27145:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27146:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 27157:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27159:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 11989:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 11990:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 9098:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 9099:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 7402:
#0  0x00007f5822343377 pthread_cond_wait@@GLIBC_2.3.2
#1  0x0000563848087c6c std::condition_variable::wait(std::unique_lock<std::mutex>&)
#2  0x0000563847a00faa mongo::ThreadPool::_consumeTasks()
#3  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#4  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#5  0x000056384808ae4f execute_native_thread_routine
#6  0x00007f582233d44b start_thread
#7  0x00007f582207840f __clone
TID 31608:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31609:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31614:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31615:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31617:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31618:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 6243:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 6244:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 23840:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 23841:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 23846:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 23874:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30327:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30328:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30329:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30330:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30331:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30332:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30333:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30334:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30335:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30336:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30337:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30338:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30339:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30340:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30341:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30342:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30343:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30344:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30345:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30346:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30347:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30348:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30349:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30350:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30351:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30352:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30353:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30354:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30355:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30356:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30357:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30358:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30359:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30360:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30361:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30362:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15229:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28208:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 25471:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16460:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16461:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16462:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28244:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28245:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28246:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15580:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29197:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13152:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13153:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13154:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13161:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13162:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17555:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17556:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17557:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19243:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19244:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19245:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19246:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19247:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19248:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19249:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19250:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19251:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19252:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19253:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4241:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4242:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11315:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 11316:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10054:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10055:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 23601:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 23602:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15258:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 9149:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 9150:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3623:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22130:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 14929:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19201:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19202:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 21521:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21522:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31030:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31034:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31038:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31039:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31042:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31043:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2932:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2933:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 1625:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 1626:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26069:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26070:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16965:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16966:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10408:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10409:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29249:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28870:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28871:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28915:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28916:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28965:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28966:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28972:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29003:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29004:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29015:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29016:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29017:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29018:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29021:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4585:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4586:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26873:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26874:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27869:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 27870:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 32242:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 32243:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 8464:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 8465:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13673:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13674:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13679:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13680:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13685:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13686:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13693:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13694:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13705:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13706:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13707:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13708:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13709:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13710:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13711:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13712:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13717:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13719:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13723:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13724:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13725:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13726:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13727:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13728:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13729:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13730:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13735:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13736:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13739:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13740:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13741:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13742:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13743:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13744:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13745:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13746:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13755:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13756:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13759:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13760:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13775:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13776:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13818:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13819:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13821:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13822:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13823:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13824:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15596:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15597:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15832:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15833:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16289:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16290:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17474:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17475:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3022:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3025:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3043:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3044:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3048:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3049:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3050:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3051:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3056:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3057:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3060:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3061:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3070:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3071:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3072:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3073:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3074:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3075:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3087:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3088:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3098:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3099:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3106:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3107:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3132:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3133:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2621:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2622:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10655:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10656:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5957:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5972:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28524:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28525:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28526:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28527:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28561:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28562:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28563:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28564:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28581:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28582:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17630:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18377:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3724:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12458:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12459:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12460:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12461:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 32211:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 32212:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 549:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 550:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1675:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1676:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3895:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3896:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31352:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31354:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31363:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31364:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31369:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31370:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31371:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31372:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31373:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31374:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31375:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31376:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31381:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31382:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31383:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31384:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31387:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31388:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31389:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31390:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31391:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31392:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31404:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31405:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31407:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31410:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31411:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31412:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31413:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31414:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31415:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31416:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31425:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31426:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31429:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31430:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31433:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31434:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31445:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31446:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18695:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18696:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18699:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18700:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 8699:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 8700:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 8989:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 8990:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 20394:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 20395:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10012:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10013:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10414:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10415:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10416:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10417:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11171:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 11172:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11177:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11178:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12232:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12233:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18953:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18954:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18957:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18958:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26137:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26138:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5794:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5795:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5796:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5797:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5812:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5813:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1501:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 1502:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5666:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5667:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28387:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 28388:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29193:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5e9d mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 29194:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 6554:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15218:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15219:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22401:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 22402:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22403:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 22404:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22409:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22410:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 22412:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 22413:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 11182:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11183:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3479:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3480:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3481:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3482:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3499:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3500:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3501:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3502:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21070:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 21071:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21074:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 21075:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 26424:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 26425:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5448:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5449:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 13496:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13497:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 14510:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 14511:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15620:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15621:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17541:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17542:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19219:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 19220:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 26233:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26234:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 933:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 934:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1240:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 1241:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3364:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3369:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3372:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3373:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 3374:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 3375:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 8122:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 8123:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 9739:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 9740:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 14940:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 14941:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15329:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15330:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15333:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15334:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15335:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15336:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 15340:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 15341:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16693:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16694:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 26429:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 26566:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 26567:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 26895:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 27071:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 27690:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 28508:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 849:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 850:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2690:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 2691:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4699:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4700:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 4964:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 4965:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 5159:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5160:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10775:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10776:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10814:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 10815:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17373:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17374:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31598:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31599:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31962:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31963:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1404:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1405:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16886:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16887:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16915:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16916:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16951:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16952:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17034:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17035:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17055:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17056:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17057:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17058:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17078:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17079:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17248:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 17249:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 24124:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 24125:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 24135:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 24136:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28186:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 28187:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30599:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 30600:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31695:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31696:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31698:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31699:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31700:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31701:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31702:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31703:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31708:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31709:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31714:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31715:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31716:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31717:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31718:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31719:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31720:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31721:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31722:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31723:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31734:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31735:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31738:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31739:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31740:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31741:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 31964:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 31965:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1862:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 1863:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 9224:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 9225:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12808:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12809:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13396:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 13397:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18037:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18038:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18823:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 18824:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 554:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 555:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 6743:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 6744:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 20670:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 20671:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27856:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 27857:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 1327:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 5447:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 5450:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 16716:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16717:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 24426:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 24427:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 29128:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 10994:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 10995:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 11149:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12541:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 12578:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12579:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12580:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12581:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12586:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12587:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12588:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5e9d mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12589:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12590:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12591:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12592:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 12593:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12594:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 12597:
#0  0x00007f582206e519 __poll
#1  0x00005638478be325 mongo::transport::TransportLayerASIO::BatonASIO::run(mongo::ClockSource*)
#2  0x00005638478a83dd mongo::transport::TransportLayerASIO::BatonASIO::run_until(mongo::ClockSource*, mongo::Date_t)
#3  0x0000563847da7001 mongo::ClockSource::waitForConditionUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t, mongo::Waitable*)
#4  0x0000563847d9abc0 mongo::OperationContext::waitForConditionOrInterruptNoAssertUntil(mongo::stdx::condition_variable&, mongo::BasicLockableAdapter, mongo::Date_t)
#5  0x00005638460f5473 bool mongo::Interruptible::waitForConditionOrInterruptUntil<std::unique_lock<mongo::latch_detail::Latch>, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}>(mongo::stdx::condition_variable&, std::unique_lock<mongo::latch_detail::Latch>&, mongo::Date_t, mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)::{lambda()#1}, mongo::AtomicWord<long>*)::{lambda(auto:1&, mongo::Interruptible::WakeSpeed)#3}::operator()(std::unique_lock<mongo::latch_detail::Latch>&, mongo::AtomicWord<long>*) const
#6  0x00005638460f5f28 mongo::future_details::SharedStateBase::wait(mongo::Interruptible*)
#7  0x0000563846422b07 mongo::repl::ReplicationCoordinatorImpl::awaitIsMasterResponse(mongo::OperationContext*, mongo::repl::SplitHorizon::Parameters const&, boost::optional<mongo::TopologyVersion>, boost::optional<mongo::Date_t>)
#8  0x00005638463e4aea mongo::repl::(anonymous namespace)::appendReplicationInfo(mongo::OperationContext*, mongo::BSONObjBuilder&, int, bool, boost::optional<mongo::TopologyVersion>, boost::optional<long long>)
#9  0x00005638463e621d mongo::repl::(anonymous namespace)::CmdHello::runWithReplyBuilder(mongo::OperationContext*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, mongo::BSONObj const&, mongo::rpc::ReplyBuilderInterface*)
#10 0x0000563846e2431e mongo::BasicCommandWithReplyBuilderInterface::Invocation::run(mongo::OperationContext*, mongo::rpc::ReplyBuilderInterface*)
#11 0x0000563846e1ea6f mongo::CommandHelpers::runCommandInvocation(mongo::OperationContext*, mongo::OpMsgRequest const&, mongo::CommandInvocation*, mongo::rpc::ReplyBuilderInterface*)
#12 0x000056384654fa08 mongo::(anonymous namespace)::runCommandImpl(mongo::OperationContext*, mongo::CommandInvocation*, mongo::OpMsgRequest const&, mongo::rpc::ReplyBuilderInterface*, mongo::LogicalTime, mongo::ServiceEntryPointCommon::Hooks const&, mongo::BSONObjBuilder*, mongo::OperationSessionInfoFromClient const&)
#13 0x000056384655350f mongo::(anonymous namespace)::receivedCommands(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)::{lambda()#1}::operator()() const
#14 0x000056384655444b mongo::ServiceEntryPointCommon::handleRequest(mongo::OperationContext*, mongo::Message const&, mongo::ServiceEntryPointCommon::Hooks const&)
#15 0x00005638465420ec mongo::ServiceEntryPointMongod::handleRequest(mongo::OperationContext*, mongo::Message const&)
#16 0x000056384654d022 mongo::ServiceStateMachine::_processMessage(mongo::ServiceStateMachine::ThreadGuard)
#17 0x000056384654ad65 mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#18 0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#19 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#20 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#21 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#22 0x00007f582233d44b start_thread
#23 0x00007f582207840f __clone
TID 16146:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 17186:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 17712:
eu-stack: dwfl_thread_getframes tid 17712: No such process
TID 17729:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 18195:
eu-stack: dwfl_thread_getframes tid 18195: No such process
TID 18197:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
TID 18379:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18380:
#0  0x00007f582234758d recvmsg
#1  0x00005638479e9180 asio::detail::socket_ops::recv(int, iovec*, unsigned long, int, std::error_code&)
#2  0x00005638479e9238 asio::detail::socket_ops::sync_recv(int, unsigned char, iovec*, unsigned long, int, bool, std::error_code&)
#3  0x00005638478c412f mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::opportunisticRead<asio::basic_stream_socket<asio::generic::stream_protocol>, asio::mutable_buffers_1>(asio::basic_stream_socket<asio::generic::stream_protocol>&, asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#4  0x00005638478c4e4a mongo::Future<void> mongo::transport::TransportLayerASIO::ASIOSession::read<asio::mutable_buffers_1>(asio::mutable_buffers_1 const&, std::shared_ptr<mongo::Baton> const&)
#5  0x00005638478c6e57 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessageImpl(std::shared_ptr<mongo::Baton> const&)
#6  0x00005638478c7318 mongo::transport::TransportLayerASIO::ASIOSession::sourceMessage()
#7  0x000056384654b825 mongo::ServiceStateMachine::_sourceMessage(mongo::ServiceStateMachine::ThreadGuard)
#8  0x000056384654adda mongo::ServiceStateMachine::_runNextInGuard(mongo::ServiceStateMachine::ThreadGuard)
#9  0x000056384654bbf6 std::_Function_handler<void (), mongo::ServiceStateMachine::_scheduleNextWithGuard(mongo::ServiceStateMachine::ThreadGuard, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName, mongo::ServiceStateMachine::Ownership)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
#10 0x000056384788d814 std::_Function_handler<void (), mongo::transport::ServiceExecutorSynchronous::schedule(std::function<void ()>, mongo::transport::ServiceExecutor::ScheduleFlags, mongo::transport::ServiceExecutorTaskName)::{lambda()#2}>::_M_invoke(std::_Any_data const&)
#11 0x0000563847be6006 std::_Function_handler<void (), mongo::launchServiceWorkerThread(std::function<void ()>)::{lambda()#3}>::_M_invoke(std::_Any_data const&)
#12 0x0000563847be6074 mongo::(anonymous namespace)::runFunc(void*)
#13 0x00007f582233d44b start_thread
#14 0x00007f582207840f __clone
TID 18486:
#0  0x00007f582234371e pthread_cond_timedwait@@GLIBC_2.3.2
#1  0x0000563847a013fa mongo::ThreadPool::_consumeTasks()
#2  0x0000563847a01921 mongo::ThreadPool::_workerThreadBody(mongo::ThreadPool*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
#3  0x0000563847a01c50 std::thread::_State_impl<std::thread::_Invoker<std::tuple<mongo::stdx::thread::thread<mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4}, , 0>(mongo::ThreadPool::_startWorkerThread_inlock()::{lambda()#4})::{lambda()#1}> > >::_M_run()
#4  0x000056384808ae4f execute_native_thread_routine
#5  0x00007f582233d44b start_thread
#6  0x00007f582207840f __clone
